## Instalar entorno virtual.

* Moverse a la carpeta /home/alumno/HackatonF5/HackatonF5/Backend

* verificar si esta instalado Virtualenv y la version 
    - $ virtualenv --version
            virtualenv 20.26.1 from /usr/local/lib/python3.10/dist-packages/virtualenv/__init__.py

* Luego instalamos nuestro entorno virtual en donde este nuestro proyecto
    - $ virtualenv venv

* Ahora activamos este entorno virtual
    - $ source venv/bin/activate

## Instalar Python Flask
    Chequear que version de python tenemos.
    - $ python --version            ||           - $ python3 --version
            -Python 3.10.12
 - $ pip install Flask  
    Crear el archivo main.py
        Pegar el siguiente código

        from flask import Flask


        app = Flask(__name__)

        @app.route("/")
        def hello_world():
            return "<p>Hello, World!</p>"

        ## Pegar al pie del archivo para ejecutar el servidor local
        if __name__ == "__main__":
            app.run(debug=True, port="4000", host="0.0.0.0")

## PAra instalar la base de datos 
    https://pypi.org/project/mysql-connector-python/
        - $ pip install mysql-connector-python

    ** Detalles para la instalación
    https://www.tutorialesprogramacionya.com/pythonya/detalleconcepto.php?punto=81&codigo=81&inicio=75
    https://es.wikihow.com/instalar-XAMPP-en-Linux

- En phpMyAdmin crear una base de datos con el nombre "alumnos"

- Crear una nueva tabla llamada alumno_tabla con 6 columnas 
CREATE TABLE `alumno_tabla` (
  `nombre` text NOT NULL,
  `apellido` text NOT NULL,
  `front` int(11) NOT NULL,
  `back` int(11) NOT NULL,
  `email` text NOT NULL,
  `bootcamp` text NOT NULL
) ENGINE=CSV DEFAULT CHARSET=utf8 COLLATE=utf8_spanish2_ci;

Motor almacenamiento innoDB


## SWAGGER crear documentación

$ pip install flask-swagger

https://diptochakrabarty.medium.com/flask-python-swagger-for-rest-apis-6efdf0100bd7

En caso de crear una solicitud nueva debe agregarse en Backend/static/swagger.json el siguiente json
    "/api/personas": {  ## <=== en este la ruta
        "get": { ## <=== en este la accion del CRUD
          "description": "Returns message showing app is up",
          "produces": ["application/json"],
          "responses": {"200": {"description": "Successful operation"}
          }
        }
      }

