{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Cargar Archivo CSV\", -1 /* HOISTED */);\nconst _hoisted_2 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: _cache[0] || (_cache[0] = (...args) => $options.handleFileUpload && $options.handleFileUpload(...args))\n  }, null, 32 /* HYDRATE_EVENTS */), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.submitFile && $options.submitFile(...args))\n  }, \" Cargar \"), $data.message ? (_openBlock(), _createElementBlock(\"p\", _hoisted_2, _toDisplayString($data.message), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","type","onChange","_cache","args","$options","handleFileUpload","onClick","submitFile","$data","message","_hoisted_2","_toDisplayString"],"sources":["/home/alumno/HackatonF5/Frontend/hackathon-admin/src/components/UploadCsv.vue"],"sourcesContent":["<template>\n    <div>\n      <h2>Cargar Archivo CSV</h2>\n      <input type=\"file\" @change=\"handleFileUpload\" />\n      <button @click=\"submitFile\"> Cargar </button>\n      <p v-if=\"message\">{{ message }}</p>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    data() {\n      return {\n        file: null,\n        message: ''\n      };\n    },\n    methods: {\n      handleFileUpload(event) {\n        this.file = event.target.files[0];\n      },\n      async submitFile() {\n        if (!this.file) {\n          this.message = 'Por favor, seleccione un archivo CSV.';\n          return;\n        }\n  \n        const formData = new FormData();\n        formData.append('file', this.file);\n  \n        try {\n          const response = await fetch('http://localhost:4000/api/upload', {\n            method: 'POST',\n            body: formData,\n          });\n          const data = await response.json();\n          if (response.ok) {\n            this.message = 'Archivo cargado correctamente.';\n          } else {\n            this.message = data.error;\n          }\n        } catch (error) {\n          this.message = 'Error al cargar el archivo.';\n        }\n      }\n    }\n  };\n  </script>\n  "],"mappings":";gCAEMA,mBAAA,CAA2B,YAAvB,oBAAkB;;;;;uBADxBC,mBAAA,CAKM,cAJJC,UAA2B,EAC3BF,mBAAA,CAAgD;IAAzCG,IAAI,EAAC,MAAM;IAAEC,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,gBAAA,IAAAD,QAAA,CAAAC,gBAAA,IAAAF,IAAA,CAAgB;qCAC5CN,mBAAA,CAA6C;IAApCS,OAAK,EAAAJ,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAG,UAAA,IAAAH,QAAA,CAAAG,UAAA,IAAAJ,IAAA,CAAU;KAAE,UAAQ,GAC3BK,KAAA,CAAAC,OAAO,I,cAAhBX,mBAAA,CAAmC,KAAAY,UAAA,EAAAC,gBAAA,CAAdH,KAAA,CAAAC,OAAO,oB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}