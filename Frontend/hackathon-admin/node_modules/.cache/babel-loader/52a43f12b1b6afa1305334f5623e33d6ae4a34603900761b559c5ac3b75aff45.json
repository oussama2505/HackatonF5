{"ast":null,"code":"/* import { createRouter, createWebHistory } from 'vue-router';\nimport Home from '../Views/Home.vue';\nimport Dashboard from '../Views/Dashboard.vue';\nimport Groups from '../Views/Groups.vue';\n\nconst routes = [\n  {\n    path: '/groups',\n    name: 'Groups',\n    component: Groups\n  },\n  {\n    path: '/dashboard',\n    name: 'Dashboard',\n    component: Dashboard,\n    meta: { requiresAuth: true }\n  },\n  {\n    path: '/',\n    name: 'Home',\n    component: Home\n  }\n ];\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n});\n\nexport default router; */ /* \n                          import { createRouter, createWebHistory } from 'vue-router';\n                          import Home from '../Views/Home.vue';\n                          import Dashboard from '../Views/Dashboard.vue';\n                          import Groups from '../Views/Groups.vue';\n                          const routes = [\n                          {\n                          path: '/groups',\n                          name: 'Groups',\n                          component: Groups,\n                          meta: { requiresAuth: true }\n                          },\n                          {\n                          path: '/dashboard',\n                          name: 'Dashboard',\n                          component: Dashboard,\n                          meta: { requiresAuth: true }\n                          },\n                          {\n                          path: '/',\n                          name: 'Home',\n                          component: Home\n                          }\n                          ];\n                          const router = createRouter({\n                          history: createWebHistory(process.env.BASE_URL),\n                          routes\n                          });\n                          router.beforeEach((to, from, next) => {\n                          const requiresAuth = to.matched.some(record => record.meta.requiresAuth);\n                          const token = localStorage.getItem('token');\n                          if (requiresAuth && !token) {\n                          next('/');\n                          } else {\n                          next();\n                          }\n                          });\n                          export default router;\n                          */\n\n// En tu componente Login.vue, después de que el usuario inicie sesión con éxito:\nlocalStorage.setItem('token', response.data.access_token);\n\n// En tu componente Logout.vue, después de cerrar sesión:\nlocalStorage.removeItem('token');\n\n// En tu archivo index.js donde defines las rutas:\nimport { createRouter, createWebHistory } from 'vue-router';\nconst routes = [{\n  path: '/login',\n  name: 'Login',\n  component: Login\n}, {\n  path: '/dashboard',\n  name: 'Dashboard',\n  component: Dashboard,\n  meta: {\n    requiresAuth: true\n  } // Indica que esta ruta requiere autenticación\n}\n// Otras rutas...\n];\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n});\nrouter.beforeEach((to, from, next) => {\n  // Verificar si la ruta requiere autenticación\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    // Verificar si el usuario está autenticado (tiene un token JWT)\n    const token = localStorage.getItem('token');\n    if (!token) {\n      // Si el usuario no está autenticado, redirigir a la página de inicio de sesión\n      next({\n        path: '/login',\n        query: {\n          redirect: to.fullPath\n        }\n      });\n    } else {\n      // Si el usuario está autenticado, permitir el acceso a la ruta\n      next();\n    }\n  } else {\n    // Si la ruta no requiere autenticación, permitir el acceso\n    next();\n  }\n});\nexport default router;","map":{"version":3,"names":["localStorage","setItem","response","data","access_token","removeItem","createRouter","createWebHistory","routes","path","name","component","Login","Dashboard","meta","requiresAuth","router","history","process","env","BASE_URL","beforeEach","to","from","next","matched","some","record","token","getItem","query","redirect","fullPath"],"sources":["/home/elias_riquelme/HackatonF5/Frontend/hackathon-admin/src/router/index.js"],"sourcesContent":["/* import { createRouter, createWebHistory } from 'vue-router';\nimport Home from '../Views/Home.vue';\nimport Dashboard from '../Views/Dashboard.vue';\nimport Groups from '../Views/Groups.vue';\n\nconst routes = [\n  {\n    path: '/groups',\n    name: 'Groups',\n    component: Groups\n  },\n  {\n    path: '/dashboard',\n    name: 'Dashboard',\n    component: Dashboard,\n    meta: { requiresAuth: true }\n  },\n  {\n    path: '/',\n    name: 'Home',\n    component: Home\n  }\n ];\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n});\n\nexport default router; *//* \n\nimport { createRouter, createWebHistory } from 'vue-router';\nimport Home from '../Views/Home.vue';\nimport Dashboard from '../Views/Dashboard.vue';\nimport Groups from '../Views/Groups.vue';\n\nconst routes = [\n  {\n    path: '/groups',\n    name: 'Groups',\n    component: Groups,\n    meta: { requiresAuth: true }\n  },\n  {\n    path: '/dashboard',\n    name: 'Dashboard',\n    component: Dashboard,\n    meta: { requiresAuth: true }\n  },\n  {\n    path: '/',\n    name: 'Home',\n    component: Home\n  }\n];\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n});\n\nrouter.beforeEach((to, from, next) => {\n  const requiresAuth = to.matched.some(record => record.meta.requiresAuth);\n  const token = localStorage.getItem('token');\n\n  if (requiresAuth && !token) {\n    next('/');\n  } else {\n    next();\n  }\n});\n\nexport default router;\n */\n\n\n// En tu componente Login.vue, después de que el usuario inicie sesión con éxito:\nlocalStorage.setItem('token', response.data.access_token);\n\n// En tu componente Logout.vue, después de cerrar sesión:\nlocalStorage.removeItem('token');\n\n// En tu archivo index.js donde defines las rutas:\nimport { createRouter, createWebHistory } from 'vue-router';\n\nconst routes = [\n  {\n    path: '/login',\n    name: 'Login',\n    component: Login\n  },\n  {\n    path: '/dashboard',\n    name: 'Dashboard',\n    component: Dashboard,\n    meta: { requiresAuth: true } // Indica que esta ruta requiere autenticación\n  },\n  // Otras rutas...\n];\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n});\n\nrouter.beforeEach((to, from, next) => {\n  // Verificar si la ruta requiere autenticación\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    // Verificar si el usuario está autenticado (tiene un token JWT)\n    const token = localStorage.getItem('token');\n    if (!token) {\n      // Si el usuario no está autenticado, redirigir a la página de inicio de sesión\n      next({ path: '/login', query: { redirect: to.fullPath } });\n    } else {\n      // Si el usuario está autenticado, permitir el acceso a la ruta\n      next();\n    }\n  } else {\n    // Si la ruta no requiere autenticación, permitir el acceso\n    next();\n  }\n});\n\nexport default router;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBA7BA,CA6ByB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASA;AACAA,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEC,QAAQ,CAACC,IAAI,CAACC,YAAY,CAAC;;AAEzD;AACAJ,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC;;AAEhC;AACA,SAASC,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAE3D,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEC;AACb,CAAC,EACD;EACEH,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,WAAW;EACjBC,SAAS,EAAEE,SAAS;EACpBC,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK,CAAC,CAAC;AAC/B;AACA;AAAA,CACD;AAED,MAAMC,MAAM,GAAGV,YAAY,CAAC;EAC1BW,OAAO,EAAEV,gBAAgB,CAACW,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;EAC/CZ;AACF,CAAC,CAAC;AAEFQ,MAAM,CAACK,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC;EACA,IAAIF,EAAE,CAACG,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACb,IAAI,CAACC,YAAY,CAAC,EAAE;IACvD;IACA,MAAMa,KAAK,GAAG5B,YAAY,CAAC6B,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACD,KAAK,EAAE;MACV;MACAJ,IAAI,CAAC;QAAEf,IAAI,EAAE,QAAQ;QAAEqB,KAAK,EAAE;UAAEC,QAAQ,EAAET,EAAE,CAACU;QAAS;MAAE,CAAC,CAAC;IAC5D,CAAC,MAAM;MACL;MACAR,IAAI,CAAC,CAAC;IACR;EACF,CAAC,MAAM;IACL;IACAA,IAAI,CAAC,CAAC;EACR;AACF,CAAC,CAAC;AAEF,eAAeR,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}