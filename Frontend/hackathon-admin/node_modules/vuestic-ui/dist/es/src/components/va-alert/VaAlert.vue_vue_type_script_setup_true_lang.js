import { defineComponent, useSlots, computed, openBlock, createBlock, Transition, withCtx, unref, createElementBlock, normalizeStyle, createElementVNode, normalizeClass, renderSlot, createVNode, createCommentVNode, createTextVNode, toDisplayString, withKeys } from "vue";
import { u as useAlertStyles } from "./useAlertStyles.js";
import { V as VaIcon } from "../va-icon/index.js";
import { u as useStatefulProps, a as useStatefulEmits, b as useStateful } from "../../composables/useStateful.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { u as useTranslation } from "../../composables/useTranslation.js";
const _hoisted_1 = {
  key: 1,
  class: "va-alert__close"
};
const _hoisted_2 = ["aria-label"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaAlert"
  },
  __name: "VaAlert",
  props: {
    ...useStatefulProps,
    ...useComponentPresetProp,
    modelValue: { type: Boolean, default: true },
    stateful: { type: Boolean, default: true },
    color: { type: String, default: "primary" },
    textColor: { type: String, default: "" },
    title: { type: String, default: "" },
    description: { type: String, default: "" },
    icon: { type: String, default: "" },
    closeText: { type: String, default: "" },
    closeIcon: { type: String, default: "close" },
    closeable: { type: Boolean, default: false },
    dense: { type: Boolean, default: false },
    outline: { type: Boolean, default: false },
    center: { type: Boolean, default: false },
    borderColor: { type: String, default: "" },
    border: {
      type: String,
      default: "",
      validator: (value) => ["top", "right", "bottom", "left", ""].includes(value)
    }
  },
  emits: [...useStatefulEmits],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const {
      contentStyle,
      titleStyle,
      alertStyle,
      borderStyle
    } = useAlertStyles(props);
    const { valueComputed } = useStateful(props, emit);
    const hide = () => {
      valueComputed.value = false;
    };
    const show = () => {
      valueComputed.value = true;
    };
    const slots = useSlots();
    const hasIcon = computed(() => props.icon || slots.icon);
    const hasTitle = computed(() => props.title || slots.title);
    const borderClass = computed(() => `va-alert__border--${props.border}`);
    const { tp, t } = useTranslation();
    __expose({
      hide,
      show
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(Transition, { name: "fade" }, {
        default: withCtx(() => [
          unref(valueComputed) ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: "va-alert",
            style: normalizeStyle(unref(alertStyle)),
            role: "alert"
          }, [
            createElementVNode("div", {
              style: normalizeStyle(unref(borderStyle)),
              class: normalizeClass([borderClass.value, "va-alert__border"])
            }, null, 6),
            hasIcon.value ? (openBlock(), createElementBlock("div", {
              key: 0,
              style: normalizeStyle(unref(contentStyle)),
              class: "va-alert__icon",
              "aria-hidden": "true"
            }, [
              renderSlot(_ctx.$slots, "icon", {}, () => [
                createVNode(unref(VaIcon), { name: __props.icon }, null, 8, ["name"])
              ])
            ], 4)) : createCommentVNode("", true),
            createElementVNode("div", {
              style: normalizeStyle(unref(contentStyle)),
              class: "va-alert__content"
            }, [
              hasTitle.value ? (openBlock(), createElementBlock("div", {
                key: 0,
                style: normalizeStyle(unref(titleStyle)),
                class: "va-alert__title"
              }, [
                renderSlot(_ctx.$slots, "title", {}, () => [
                  createTextVNode(toDisplayString(__props.title), 1)
                ])
              ], 4)) : createCommentVNode("", true),
              createElementVNode("span", null, [
                renderSlot(_ctx.$slots, "default", {}, () => [
                  createTextVNode(toDisplayString(_ctx.$props.description), 1)
                ])
              ])
            ], 4),
            __props.closeable ? (openBlock(), createElementBlock("div", _hoisted_1, [
              createElementVNode("div", {
                role: "button",
                class: "va-alert__close--closeable",
                tabindex: "0",
                "aria-label": __props.closeText || unref(t)("closeAlert"),
                style: normalizeStyle(unref(contentStyle)),
                onClick: hide,
                onKeydown: [
                  withKeys(hide, ["space"]),
                  withKeys(hide, ["enter"])
                ]
              }, [
                renderSlot(_ctx.$slots, "close", {}, () => [
                  !__props.closeText ? (openBlock(), createBlock(unref(VaIcon), {
                    key: 0,
                    name: __props.closeIcon
                  }, null, 8, ["name"])) : createCommentVNode("", true),
                  createTextVNode(" " + toDisplayString(__props.closeText), 1)
                ])
              ], 44, _hoisted_2)
            ])) : createCommentVNode("", true)
          ], 4)) : createCommentVNode("", true)
        ]),
        _: 3
      });
    };
  }
});
export {
  _sfc_main as _
};

import '../../../VaAlert.css';
//# sourceMappingURL=VaAlert.vue_vue_type_script_setup_true_lang.js.map
