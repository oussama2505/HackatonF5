import { defineComponent, shallowRef, computed, openBlock, createBlock, unref, normalizeClass, normalizeStyle, withCtx, createElementVNode, withModifiers, mergeProps, toHandlers, createCommentVNode, createElementBlock, renderSlot, createTextVNode, toDisplayString } from "vue";
import { u as useComponentUuid } from "../../composables/useComponentUuid.js";
import { V as VaIcon } from "../va-icon/index.js";
import { u as useSelectableProps, a as useSelectableEmits, b as useSelectable } from "../../composables/useSelectable.js";
import { u as useKeyboardOnlyFocus } from "../../composables/useKeyboardOnlyFocus.js";
import { _ as _sfc_main$1 } from "../va-message-list/VaMessageListWrapper.vue_vue_type_script_setup_true_lang.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { u as useColors } from "../../composables/useColors.js";
import { u as useTextColor } from "../../composables/useTextColor.js";
const _hoisted_1 = ["id", "indeterminate", "value", "checked"];
const _hoisted_2 = ["for"];
const VaCheckboxValueType = [Boolean, Array, String, Object];
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaCheckbox"
  },
  __name: "VaCheckbox",
  props: {
    ...useSelectableProps,
    ...useComponentPresetProp,
    modelValue: { type: VaCheckboxValueType, default: false },
    color: { type: String, default: "primary" },
    checkedIcon: { type: String, default: "va-check" },
    indeterminate: { type: Boolean, default: false },
    indeterminateValue: { type: VaCheckboxValueType, default: null },
    indeterminateIcon: { type: String, default: "remove" },
    id: { type: String, default: "" },
    name: { type: String, default: "" },
    ariaLabel: { type: String, default: void 0 },
    vertical: { type: Boolean, default: false }
  },
  emits: useSelectableEmits,
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const elements = {
      container: shallowRef(),
      input: shallowRef(),
      label: shallowRef()
    };
    const {
      isChecked,
      computedError,
      isIndeterminate,
      computedErrorMessages,
      validationAriaAttributes,
      toggleSelection,
      onBlur,
      onFocus,
      isDirty,
      isTouched,
      isError,
      isLoading,
      isValid
    } = useSelectable(props, emit, elements);
    const { getColor } = useColors();
    const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus();
    const { textColorComputed } = useTextColor(computed(() => getColor(props.color)));
    const isActive = computed(() => isChecked.value || isIndeterminate.value);
    const computedClass = computed(() => ({
      "va-checkbox--selected": isChecked.value,
      "va-checkbox--readonly": props.readonly,
      "va-checkbox--disabled": props.disabled,
      "va-checkbox--indeterminate": props.indeterminate,
      "va-checkbox--error": computedError.value,
      "va-checkbox--left-label": props.leftLabel,
      "va-checkbox--on-keyboard-focus": hasKeyboardFocus.value
    }));
    const getPaddingStyle = () => {
      switch (true) {
        case !props.label:
          return "";
        case props.vertical:
          return "var(--va-checkbox-vertical-padding)";
        case Boolean(props.arrayValue):
          return "var(--va-checkbox-horizontal-padding)";
        case props.leftLabel:
          return "var(--va-checkbox-right-padding)";
        default:
          return "var(--va-checkbox-left-padding)";
      }
    };
    const labelStyle = computed(() => {
      return {
        color: computedError.value ? getColor("danger") : props.success ? getColor("success") : "",
        padding: getPaddingStyle()
      };
    });
    const inputStyle = computed(() => {
      const style = {
        background: isActive.value ? getColor(props.color) : "",
        borderColor: isActive.value ? getColor(props.color) : ""
      };
      if (computedError.value) {
        style.borderColor = getColor("danger");
      }
      if (props.success) {
        style.borderColor = getColor("success");
      }
      return style;
    });
    const computedIconName = computed(
      () => props.indeterminate && isIndeterminate.value ? props.indeterminateIcon : props.checkedIcon
    );
    const uniqueId = useComponentUuid();
    const computedId = computed(() => props.id || String(uniqueId));
    const computedName = computed(() => props.name || String(uniqueId));
    const inputAttributesComputed = computed(() => ({
      name: computedName.value,
      disabled: props.disabled,
      readonly: props.readonly,
      tabindex: props.disabled ? -1 : 0,
      "aria-label": props.ariaLabel,
      "aria-disabled": props.disabled,
      "aria-readOnly": props.readonly,
      "aria-checked": isActive.value,
      ...validationAriaAttributes.value
    }));
    const displayVal = computed(() => props.vertical ? "--va-checkbox-display-flex" : "var(--va-checkbox-display)");
    __expose({
      toggleSelection,
      isDirty,
      isTouched,
      isError,
      isLoading,
      isValid
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1), {
        class: normalizeClass(["va-checkbox", computedClass.value]),
        disabled: _ctx.disabled,
        success: _ctx.success,
        messages: _ctx.messages,
        error: unref(computedError),
        "error-messages": unref(computedErrorMessages),
        "error-count": _ctx.errorCount,
        style: normalizeStyle(`--va-display-val: ${String(displayVal.value)}`)
      }, {
        default: withCtx(() => [
          createElementVNode("div", {
            ref: "container",
            class: "va-checkbox__input-container",
            onClick: _cache[6] || (_cache[6] = //@ts-ignore
            (...args) => unref(toggleSelection) && unref(toggleSelection)(...args)),
            onBlur: _cache[7] || (_cache[7] = //@ts-ignore
            (...args) => unref(onBlur) && unref(onBlur)(...args))
          }, [
            createElementVNode("div", {
              class: "va-checkbox__square",
              style: normalizeStyle(inputStyle.value),
              onSelectstart: _cache[4] || (_cache[4] = withModifiers(() => {
              }, ["prevent"]))
            }, [
              createElementVNode("input", mergeProps({
                ref: "input",
                type: "checkbox",
                class: "va-checkbox__input",
                id: computedId.value,
                indeterminate: __props.indeterminate,
                value: _ctx.label,
                checked: isActive.value
              }, inputAttributesComputed.value, toHandlers(unref(keyboardFocusListeners), true), {
                onFocus: _cache[0] || (_cache[0] = //@ts-ignore
                (...args) => unref(onFocus) && unref(onFocus)(...args)),
                onBlur: _cache[1] || (_cache[1] = //@ts-ignore
                (...args) => unref(onBlur) && unref(onBlur)(...args)),
                onClick: _cache[2] || (_cache[2] = withModifiers(() => {
                }, ["stop", "prevent"])),
                onKeypress: _cache[3] || (_cache[3] = withModifiers(
                  //@ts-ignore
                  (...args) => unref(toggleSelection) && unref(toggleSelection)(...args),
                  ["prevent"]
                ))
              }), null, 16, _hoisted_1),
              isActive.value ? (openBlock(), createBlock(unref(VaIcon), {
                key: 0,
                class: "va-checkbox__icon",
                name: computedIconName.value,
                color: unref(textColorComputed)
              }, null, 8, ["name", "color"])) : createCommentVNode("", true)
            ], 36),
            _ctx.label || _ctx.$slots.label ? (openBlock(), createElementBlock("label", {
              key: 0,
              ref: "label",
              class: "va-checkbox__label",
              for: computedId.value,
              style: normalizeStyle(labelStyle.value),
              onBlur: _cache[5] || (_cache[5] = //@ts-ignore
              (...args) => unref(onBlur) && unref(onBlur)(...args))
            }, [
              renderSlot(_ctx.$slots, "label", {}, () => [
                createTextVNode(toDisplayString(_ctx.label), 1)
              ])
            ], 44, _hoisted_2)) : createCommentVNode("", true)
          ], 544)
        ]),
        _: 3
      }, 8, ["class", "disabled", "success", "messages", "error", "error-messages", "error-count", "style"]);
    };
  }
});
export {
  _sfc_main as _
};

import '../../../VaCheckbox.css';
//# sourceMappingURL=VaCheckbox.vue_vue_type_script_setup_true_lang.js.map
