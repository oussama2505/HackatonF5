import { defineComponent, computed, unref, openBlock, createBlock, resolveDynamicComponent, normalizeClass, normalizeStyle, withCtx, createElementVNode, mergeProps, toHandlers, createCommentVNode, renderSlot, withModifiers, withKeys } from "vue";
import { p as pick } from "../../../vendor.js";
import { V as VaIcon } from "../va-icon/index.js";
import { a as useColorProps, u as useColors } from "../../composables/useColors.js";
import { a as getBoxShadowColor, b as getFocusColor, c as getHoverColor } from "../../services/color/utils.js";
import { u as useRouterLinkProps, a as useRouterLink } from "../../composables/useRouterLink.js";
import { u as useStatefulProps, a as useStatefulEmits, b as useStateful } from "../../composables/useStateful.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { a as useTranslationProp, u as useTranslation } from "../../composables/useTranslation.js";
import { u as useTextColor } from "../../composables/useTextColor.js";
import { u as useKeyboardOnlyFocus } from "../../composables/useKeyboardOnlyFocus.js";
import { u as useHover } from "../../composables/useHover.js";
import { u as useBem } from "../../composables/useBem.js";
const _hoisted_1 = { class: "va-chip__content" };
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaChip"
  },
  __name: "VaChip",
  props: {
    ...useRouterLinkProps,
    ...useColorProps,
    ...useStatefulProps,
    ...useComponentPresetProp,
    modelValue: { type: Boolean, default: true },
    closeable: { type: Boolean, default: false },
    outline: { type: Boolean, default: false },
    disabled: { type: Boolean, default: false },
    readonly: { type: Boolean, default: false },
    square: { type: Boolean, default: false },
    shadow: { type: Boolean, default: false },
    flat: { type: Boolean, default: false },
    icon: { type: String, default: "" },
    tag: { type: String, default: "span" },
    size: {
      type: String,
      default: "medium",
      validator: (value) => ["small", "medium", "large"].includes(value)
    },
    ariaCloseLabel: useTranslationProp("$t:close")
  },
  emits: [...useStatefulEmits, "focus"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const { getColor } = useColors();
    const colorComputed = computed(() => getColor(props.color));
    const borderColor = computed(() => props.outline ? colorComputed.value : "");
    const isTransparentBackground = computed(() => Boolean(props.outline || props.flat));
    const { textColorComputed } = useTextColor(colorComputed, isTransparentBackground);
    const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus();
    const shadowStyle = computed(() => {
      if (!props.shadow || props.flat || props.outline || props.disabled || hasKeyboardFocus.value) {
        return;
      }
      return `0 0.125rem 0.19rem 0 ${getBoxShadowColor(colorComputed.value)}`;
    });
    const { valueComputed } = useStateful(props, emit);
    const { tagComputed, hrefComputed } = useRouterLink(props);
    const { isHovered, onMouseEnter, onMouseLeave } = useHover();
    const close = () => {
      if (!props.disabled) {
        valueComputed.value = false;
      }
    };
    const iconSize = computed(() => props.size);
    const tabIndexComputed = computed(() => props.disabled ? -1 : 0);
    const computedClass = useBem("va-chip", () => ({
      ...pick(props, ["disabled", "readonly", "square"]),
      small: props.size === "small",
      large: props.size === "large"
    }));
    const computedStyle = computed(() => {
      const result = {
        color: textColorComputed.value,
        borderColor: borderColor.value,
        background: "",
        boxShadow: shadowStyle.value
      };
      if (props.outline || props.flat) {
        if (hasKeyboardFocus.value) {
          result.background = getFocusColor(colorComputed.value);
        } else if (!props.readonly && isHovered.value) {
          result.background = getHoverColor(colorComputed.value);
        }
      } else {
        result.background = colorComputed.value;
      }
      return result;
    });
    const { tp } = useTranslation();
    __expose({
      close
    });
    return (_ctx, _cache) => {
      return unref(valueComputed) ? (openBlock(), createBlock(resolveDynamicComponent(unref(tagComputed)), {
        key: 0,
        class: normalizeClass(["va-chip", unref(computedClass)]),
        href: unref(hrefComputed),
        target: _ctx.target,
        to: _ctx.to,
        replace: _ctx.replace,
        exact: _ctx.exact,
        "active-class": _ctx.activeClass,
        "exact-active-class": _ctx.exactActiveClass,
        style: normalizeStyle(computedStyle.value)
      }, {
        default: withCtx(() => [
          createElementVNode("span", mergeProps({
            class: "va-chip__inner",
            onFocus: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("focus")),
            onMouseenter: _cache[1] || (_cache[1] = //@ts-ignore
            (...args) => unref(onMouseEnter) && unref(onMouseEnter)(...args)),
            onMouseleave: _cache[2] || (_cache[2] = //@ts-ignore
            (...args) => unref(onMouseLeave) && unref(onMouseLeave)(...args))
          }, toHandlers(unref(keyboardFocusListeners), true)), [
            __props.icon ? (openBlock(), createBlock(unref(VaIcon), {
              key: 0,
              class: "va-chip__icon",
              name: __props.icon,
              size: iconSize.value
            }, null, 8, ["name", "size"])) : createCommentVNode("", true),
            createElementVNode("span", _hoisted_1, [
              renderSlot(_ctx.$slots, "default")
            ]),
            __props.closeable ? (openBlock(), createBlock(unref(VaIcon), {
              key: 1,
              role: "button",
              name: "va-close",
              class: "va-chip__close-icon",
              "aria-label": unref(tp)(_ctx.$props.ariaCloseLabel),
              tabindex: tabIndexComputed.value,
              size: iconSize.value,
              onClick: withModifiers(close, ["stop"]),
              onKeydown: [
                withKeys(withModifiers(close, ["stop"]), ["enter"]),
                withKeys(withModifiers(close, ["stop"]), ["space"])
              ]
            }, null, 8, ["aria-label", "tabindex", "size", "onKeydown"])) : createCommentVNode("", true)
          ], 16)
        ]),
        _: 3
      }, 8, ["href", "target", "to", "replace", "exact", "active-class", "exact-active-class", "class", "style"])) : createCommentVNode("", true);
    };
  }
});
export {
  _sfc_main as _
};

import '../../../VaChip.css';
//# sourceMappingURL=VaChip.vue_vue_type_script_setup_true_lang.js.map
