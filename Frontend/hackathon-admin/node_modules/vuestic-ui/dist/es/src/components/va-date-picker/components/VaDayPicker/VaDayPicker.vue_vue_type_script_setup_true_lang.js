import { defineComponent, toRefs, computed, watch, openBlock, createElementBlock, mergeProps, unref, Fragment, renderList, renderSlot, createTextVNode, toDisplayString, createCommentVNode, createVNode, withCtx, createElementVNode, normalizeProps, guardReactiveProps } from "vue";
import { _ as _sfc_main$1 } from "../VaDatePickerCell.vue_vue_type_script_setup_true_lang.js";
import { u as useGridKeyboardNavigation } from "../../hooks/grid-keyboard-navigation.js";
import { u as useDatePicker } from "../../hooks/use-picker.js";
import { u as useVaDatePickerCalendar } from "./va-date-picker-calendar-hook.js";
const _hoisted_1 = ["onMouseenter"];
const _hoisted_2 = { class: "va-date-picker-cell__day" };
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaDayPicker"
  },
  __name: "VaDayPicker",
  props: {
    monthNames: { type: Array, required: true },
    weekdayNames: { type: Array, required: true },
    firstWeekday: { type: String, default: "Sunday" },
    hideWeekDays: { type: Boolean, default: false },
    view: { type: Object, default: () => ({ type: "day" }) },
    modelValue: { type: [Date, Array, Object] },
    mode: { type: String, default: "auto" },
    showOtherMonths: { type: Boolean, default: false },
    allowedDays: { type: Function },
    weekends: { type: Function },
    highlightWeekend: { type: Boolean, default: false },
    highlightToday: { type: Boolean, default: false },
    readonly: { type: Boolean, default: false },
    color: { type: String, default: "primary" }
  },
  emits: ["update:modelValue", "hover:day", "click:day"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const { firstWeekday, weekdayNames, view } = toRefs(props);
    const { calendarDates, currentMonthStartIndex, currentMonthEndIndex } = useVaDatePickerCalendar(view, { firstWeekday });
    const weekdayNamesComputed = computed(() => {
      return firstWeekday.value.toLowerCase() === "sunday" ? weekdayNames.value : [...weekdayNames.value.slice(1), weekdayNames.value[0]];
    });
    const {
      hoveredIndex,
      onClick,
      isToday,
      isSelected,
      isInRange
    } = useDatePicker("day", calendarDates, props, emit);
    const gridStartIndex = computed(() => props.showOtherMonths ? 0 : currentMonthStartIndex.value);
    const gridEndIndex = computed(() => props.showOtherMonths ? calendarDates.value.length : currentMonthEndIndex.value);
    const {
      focusedCellIndex,
      containerAttributes
    } = useGridKeyboardNavigation({
      rowSize: 7,
      start: gridStartIndex,
      end: gridEndIndex,
      onSelected: (selectedValue) => onClick(calendarDates.value[selectedValue])
    });
    watch(focusedCellIndex, (index) => {
      hoveredIndex.value = index;
    });
    watch(hoveredIndex, (index) => {
      focusedCellIndex.value = index;
    });
    const isOtherMonth = (date) => props.view.month !== date.getMonth();
    const isDateDisabled = (date) => props.allowedDays === void 0 ? false : !props.allowedDays(date);
    const isDateWeekend = (date) => {
      if (props.weekends === void 0) {
        return date.getDay() === 6 || date.getDay() === 0;
      }
      return props.weekends(date);
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", mergeProps({ class: "va-day-picker" }, unref(containerAttributes)), [
        !__props.hideWeekDays ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(weekdayNamesComputed.value, (weekday) => {
          return openBlock(), createElementBlock("div", {
            key: weekday,
            class: "va-day-picker__weekday"
          }, [
            renderSlot(_ctx.$slots, "weekday", {}, () => [
              createTextVNode(toDisplayString(weekday), 1)
            ])
          ]);
        }), 128)) : createCommentVNode("", true),
        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(calendarDates), (date, index) => {
          return openBlock(), createElementBlock("div", {
            class: "va-day-picker__calendar__day-wrapper",
            key: index,
            onMouseenter: ($event) => hoveredIndex.value = index,
            onMouseleave: _cache[0] || (_cache[0] = ($event) => hoveredIndex.value = -1)
          }, [
            createVNode(_sfc_main$1, {
              hidden: isOtherMonth(date) && !__props.showOtherMonths,
              today: unref(isToday)(date),
              selected: unref(isSelected)(date),
              "in-range": unref(isInRange)(date),
              "other-month": isOtherMonth(date),
              weekend: isDateWeekend(date),
              disabled: isDateDisabled(date),
              focused: unref(hoveredIndex) === index,
              "highlight-today": __props.highlightToday,
              "highlight-weekend": __props.highlightWeekend,
              readonly: _ctx.$props.readonly,
              color: __props.color,
              onClick: ($event) => {
                unref(onClick)(date);
                focusedCellIndex.value = index;
              }
            }, {
              default: withCtx(() => [
                createElementVNode("span", _hoisted_2, [
                  renderSlot(_ctx.$slots, "day", normalizeProps(guardReactiveProps({ date })), () => [
                    createTextVNode(toDisplayString(date.getDate()), 1)
                  ])
                ])
              ]),
              _: 2
            }, 1032, ["hidden", "today", "selected", "in-range", "other-month", "weekend", "disabled", "focused", "highlight-today", "highlight-weekend", "readonly", "color", "onClick"])
          ], 40, _hoisted_1);
        }), 128))
      ], 16);
    };
  }
});
export {
  _sfc_main as _
};

import '../../../../../VaDayPicker.css';
//# sourceMappingURL=VaDayPicker.vue_vue_type_script_setup_true_lang.js.map
