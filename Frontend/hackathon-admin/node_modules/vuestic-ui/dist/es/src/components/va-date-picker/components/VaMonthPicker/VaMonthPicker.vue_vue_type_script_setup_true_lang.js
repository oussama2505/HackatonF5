import { defineComponent, toRefs, computed, watch, openBlock, createElementBlock, mergeProps, unref, Fragment, renderList, createVNode, withCtx, renderSlot, normalizeProps, guardReactiveProps, createTextVNode, toDisplayString } from "vue";
import { _ as _sfc_main$1 } from "../VaDatePickerCell.vue_vue_type_script_setup_true_lang.js";
import { u as useGridKeyboardNavigation } from "../../hooks/grid-keyboard-navigation.js";
import { u as useDatePicker } from "../../hooks/use-picker.js";
const _hoisted_1 = ["onMouseenter"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaMonthPicker"
  },
  __name: "VaMonthPicker",
  props: {
    modelValue: { type: [Date, Array, Object] },
    monthNames: { type: Array, required: true },
    view: { type: Object, default: () => ({ type: "month" }) },
    allowedMonths: { type: Function, default: void 0 },
    highlightToday: { type: Boolean, default: true },
    mode: { type: String, default: "auto" },
    readonly: { type: Boolean, default: false },
    color: { type: String, default: "primary" }
  },
  emits: ["update:modelValue", "hover:month", "click:month"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const { view } = toRefs(props);
    const months = computed(() => Array.from(Array(12).keys()).map((month) => new Date(view.value.year, month)));
    const {
      hoveredIndex,
      onClick,
      isToday,
      isSelected,
      isInRange
    } = useDatePicker("month", months, props, emit);
    const isDisabled = (date) => props.allowedMonths === void 0 ? false : !props.allowedMonths(date);
    const {
      focusedCellIndex,
      containerAttributes
    } = useGridKeyboardNavigation({
      rowSize: 3,
      start: 0,
      end: months.value.length,
      onSelected: (selectedIndex) => onClick(months.value[selectedIndex])
    });
    watch(focusedCellIndex, (index) => {
      hoveredIndex.value = index;
    });
    watch(hoveredIndex, (index) => {
      focusedCellIndex.value = index;
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", mergeProps({ class: "va-month-picker" }, unref(containerAttributes)), [
        (openBlock(true), createElementBlock(Fragment, null, renderList(months.value, (month, monthIndex) => {
          return openBlock(), createElementBlock("div", {
            key: monthIndex,
            class: "va-month-picker__month-wrapper",
            onMouseenter: ($event) => hoveredIndex.value = monthIndex,
            onMouseleave: _cache[0] || (_cache[0] = ($event) => hoveredIndex.value = -1)
          }, [
            createVNode(_sfc_main$1, {
              "in-range": !!unref(isInRange)(month),
              selected: !!unref(isSelected)(month),
              disabled: !!isDisabled(month),
              today: !!unref(isToday)(month),
              focused: unref(hoveredIndex) === monthIndex,
              "highlight-today": __props.highlightToday,
              readonly: _ctx.$props.readonly,
              color: __props.color,
              onClick: ($event) => {
                unref(onClick)(month);
                focusedCellIndex.value = monthIndex;
              }
            }, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "month", normalizeProps(guardReactiveProps({ monthIndex, month: __props.monthNames[monthIndex] })), () => [
                  createTextVNode(toDisplayString(__props.monthNames[monthIndex]), 1)
                ])
              ]),
              _: 2
            }, 1032, ["in-range", "selected", "disabled", "today", "focused", "highlight-today", "readonly", "color", "onClick"])
          ], 40, _hoisted_1);
        }), 128))
      ], 16);
    };
  }
});
export {
  _sfc_main as _
};

import '../../../../../VaMonthPicker.css';
//# sourceMappingURL=VaMonthPicker.vue_vue_type_script_setup_true_lang.js.map
