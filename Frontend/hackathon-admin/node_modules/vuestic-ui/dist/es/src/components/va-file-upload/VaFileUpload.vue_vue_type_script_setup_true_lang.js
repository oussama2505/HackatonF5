import { defineComponent, shallowRef, ref, computed, onMounted, provide, toRef, openBlock, createElementBlock, normalizeClass, unref, normalizeStyle, renderSlot, createElementVNode, toDisplayString, createCommentVNode, createVNode, withCtx, createTextVNode, createBlock, mergeProps } from "vue";
import { V as VaFileUploadKey } from "./types.js";
import { V as VaFileUploadList } from "./VaFileUploadList/index.js";
import { V as VaModal } from "../va-modal/VaModal.js";
import { e as extractComponentProps } from "../../utils/component-options/extract-component-options.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { a as useTranslationProp, u as useTranslation } from "../../composables/useTranslation.js";
import { u as useColors } from "../../composables/useColors.js";
import { u as useBem } from "../../composables/useBem.js";
import { u as useNumericProp } from "../../composables/useNumericProp.js";
import { f as filterComponentProps } from "../../utils/component-options/filter-props.js";
import { V as VaButton } from "../va-button/index.js";
const _hoisted_1 = { class: "va-file-upload__field" };
const _hoisted_2 = {
  key: 0,
  class: "va-file-upload__field__text"
};
const _hoisted_3 = ["accept", "multiple", "disabled"];
const VaFileUploadListProps = extractComponentProps(VaFileUploadList);
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaFileUpload"
  },
  __name: "VaFileUpload",
  props: {
    ...useComponentPresetProp,
    ...VaFileUploadListProps,
    fileTypes: { type: String, default: "" },
    dropzone: { type: Boolean, default: false },
    hideFileList: { type: Boolean, default: false },
    color: { type: String, default: "primary" },
    disabled: { type: Boolean, default: false },
    undo: { type: Boolean, default: false },
    undoDuration: { type: [Number, String], default: 3e3 },
    undoButtonText: useTranslationProp("$t:undo"),
    dropZoneText: useTranslationProp("$t:dropzone"),
    uploadButtonText: useTranslationProp("$t:uploadFile"),
    deletedFileMessage: useTranslationProp("$t:fileDeleted"),
    fileIncorrectMessage: useTranslationProp("$t:fileTypeIncorrect"),
    modelValue: {
      type: [Object, Array],
      default: () => []
    },
    type: {
      type: String,
      default: "list",
      validator: (value) => ["list", "gallery", "single"].includes(value)
    }
  },
  emits: ["update:modelValue", "file-removed", "file-added"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const fileInputRef = shallowRef();
    const modal = ref(false);
    const dropzoneHighlight = ref(false);
    const { getColor, shiftHSLAColor } = useColors();
    const colorComputed = computed(() => getColor(props.color));
    const computedStyle = computed(() => ({
      backgroundColor: props.dropzone ? shiftHSLAColor(colorComputed.value, { a: dropzoneHighlight.value ? -0.82 : -0.92 }) : "transparent"
    }));
    const computedClasses = useBem("va-file-upload", () => ({
      dropzone: props.dropzone,
      disabled: props.disabled
    }));
    const files = computed({
      get() {
        return Array.isArray(props.modelValue) ? props.modelValue : [props.modelValue];
      },
      set(files2) {
        if (props.type === "single") {
          emit("update:modelValue", files2[0]);
        } else {
          emit("update:modelValue", files2);
        }
      }
    });
    const filterInvalidFiles = (files2) => files2.filter((file) => {
      const fileName = file.name || file.url;
      if (!fileName) {
        return false;
      }
      if (file.url) {
        return true;
      }
      const MIMETypes = ["audio/*", "video/*", "image/*"];
      const isContainedMIMEType = MIMETypes.find((t) => props.fileTypes.includes(t));
      if (isContainedMIMEType) {
        return true;
      }
      const extension = fileName.substring(fileName.lastIndexOf(".") + 1).toLowerCase();
      const isCorrectExt = props.fileTypes.includes(extension);
      if (!isCorrectExt) {
        modal.value = true;
      }
      return isCorrectExt;
    });
    const uploadFile = (e) => {
      var _a, _b;
      const f = ((_a = e.target) == null ? void 0 : _a.files) || ((_b = e.dataTransfer) == null ? void 0 : _b.files);
      if (!f) {
        return;
      }
      const validatedFiles = props.fileTypes ? filterInvalidFiles(Array.from(f)) : f;
      files.value = props.type === "single" ? validatedFiles : [...files.value, ...validatedFiles];
      emit("file-added", validatedFiles);
    };
    const changeFieldValue = (e) => {
      uploadFile(e);
      if (fileInputRef.value) {
        fileInputRef.value.value = "";
      }
    };
    const removeFile = (index) => {
      if (index in files.value) {
        const removedFile = files.value[index];
        files.value = files.value.filter((item, idx) => idx !== index);
        emit("file-removed", removedFile);
      }
    };
    const removeSingleFile = () => {
      if (files.value.length > 0) {
        const removedFile = files.value[0];
        files.value = [];
        emit("file-removed", removedFile);
      }
    };
    const callFileDialogue = () => {
      if (fileInputRef.value) {
        fileInputRef.value.click();
      }
    };
    onMounted(() => {
      if (Array.isArray(files.value)) {
        const filteredFiles = filterInvalidFiles(files.value);
        if (filteredFiles.length !== files.value.length) {
          files.value = filteredFiles;
        }
      }
    });
    const { tp } = useTranslation();
    provide(VaFileUploadKey, {
      undo: toRef(props, "undo"),
      disabled: toRef(props, "disabled"),
      undoDuration: useNumericProp("undoDuration"),
      undoButtonText: computed(() => tp(props.undoButtonText)),
      deletedFileMessage: computed(() => tp(props.deletedFileMessage))
    });
    const fileUploadListProps = filterComponentProps(VaFileUploadListProps);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(["va-file-upload", unref(computedClasses)]),
        style: normalizeStyle(computedStyle.value)
      }, [
        renderSlot(_ctx.$slots, "default", {}, () => [
          createElementVNode("div", _hoisted_1, [
            __props.dropzone ? (openBlock(), createElementBlock("div", _hoisted_2, toDisplayString(unref(tp)(__props.dropZoneText)), 1)) : createCommentVNode("", true),
            createVNode(unref(VaButton), {
              class: "va-file-upload__field__button",
              disabled: __props.disabled,
              "aria-disabled": __props.disabled,
              color: colorComputed.value,
              style: normalizeStyle({ "pointer-events": dropzoneHighlight.value ? "none" : void 0 }),
              onChange: changeFieldValue,
              onClick: callFileDialogue
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString(unref(tp)(__props.uploadButtonText)), 1)
              ]),
              _: 1
            }, 8, ["disabled", "aria-disabled", "color", "style"])
          ])
        ]),
        createElementVNode("input", {
          ref_key: "fileInputRef",
          ref: fileInputRef,
          type: "file",
          class: "va-file-upload__field__input",
          tabindex: -1,
          "aria-hidden": "true",
          accept: __props.fileTypes,
          multiple: __props.type !== "single",
          disabled: __props.disabled,
          onChange: changeFieldValue,
          onDragenter: _cache[0] || (_cache[0] = ($event) => dropzoneHighlight.value = true),
          onDragleave: _cache[1] || (_cache[1] = ($event) => dropzoneHighlight.value = false)
        }, null, 40, _hoisted_3),
        files.value.length && !_ctx.$props.hideFileList ? (openBlock(), createBlock(unref(VaFileUploadList), mergeProps({ key: 0 }, unref(fileUploadListProps), {
          type: __props.type,
          files: files.value,
          color: colorComputed.value,
          onRemove: removeFile,
          onRemoveSingle: removeSingleFile
        }), null, 16, ["type", "files", "color"])) : createCommentVNode("", true),
        createVNode(unref(VaModal), {
          modelValue: modal.value,
          "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => modal.value = $event),
          "hide-default-actions": "",
          message: unref(tp)("$t:fileTypeIncorrect")
        }, null, 8, ["modelValue", "message"])
      ], 6);
    };
  }
});
export {
  _sfc_main as _
};

import '../../../VaFileUpload.css';
//# sourceMappingURL=VaFileUpload.vue_vue_type_script_setup_true_lang.js.map
