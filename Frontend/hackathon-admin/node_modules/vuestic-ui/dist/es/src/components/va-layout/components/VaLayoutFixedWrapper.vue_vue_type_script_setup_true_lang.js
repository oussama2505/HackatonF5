import { defineComponent, ref, computed, openBlock, createElementBlock, normalizeStyle, createVNode, normalizeClass, withCtx, renderSlot } from "vue";
import { _ as _sfc_main$1 } from "./VaResizeObserver.vue_vue_type_script_setup_true_lang.js";
import { b as useFixedLayoutChild } from "../hooks/useLayout.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaLayoutFixedWrapper"
  },
  __name: "VaLayoutFixedWrapper",
  props: {
    area: { type: String, required: true }
  },
  setup(__props) {
    const props = __props;
    const size = ref(null);
    const direction = computed(() => {
      if (props.area === "top" || props.area === "bottom") {
        return "vertical";
      } else {
        return "horizontal";
      }
    });
    const getPxOrZero = (value) => {
      if (!value) {
        return "0px";
      }
      return value + "px";
    };
    const styles = computed(() => {
      if (direction.value === "vertical") {
        return { width: `calc(100% - ${getPxOrZero(paddings.value.left)} - ${getPxOrZero(paddings.value.right)})`, [props.area]: 0 };
      } else {
        return { height: `calc(100% - ${getPxOrZero(paddings.value.top)} - ${getPxOrZero(paddings.value.bottom)})`, [props.area]: 0 };
      }
    });
    const { paddings } = useFixedLayoutChild(props.area, size);
    computed(() => {
      return Object.keys(paddings.value).reduce((acc, key) => {
        if (key === props.area) {
          return acc;
        }
        return {
          ...acc,
          [key]: `${paddings.value[key]}px`
        };
      }, {});
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: "va-layout-fixed-wrapper",
        style: normalizeStyle([[{
          height: size.value && direction.value === "vertical" ? size.value.height + "px" : "auto",
          width: size.value && direction.value === "horizontal" ? size.value.width + "px" : "auto"
        }], `--va-styles-width: ${String(styles.value.width)};--va-styles-height: ${String(styles.value.height)}`])
      }, [
        createVNode(_sfc_main$1, {
          class: normalizeClass(["va-layout-fixed-wrapper__content", `va-layout-fixed-wrapper__content--${__props.area}`]),
          style: normalizeStyle(!size.value ? { position: "relative" } : {}),
          onResize: _cache[0] || (_cache[0] = ($event) => size.value = $event)
        }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 8, ["class", "style"])
      ], 4);
    };
  }
});
export {
  _sfc_main as _
};

import '../../../../VaLayoutFixedWrapper.css';
//# sourceMappingURL=VaLayoutFixedWrapper.vue_vue_type_script_setup_true_lang.js.map
