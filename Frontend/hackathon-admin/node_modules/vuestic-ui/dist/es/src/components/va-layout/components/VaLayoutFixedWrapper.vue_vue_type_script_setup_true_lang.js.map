{"version":3,"file":"VaLayoutFixedWrapper.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../../src/components/va-layout/components/VaLayoutFixedWrapper.vue"],"sourcesContent":["<template>\n  <div\n    class=\"va-layout-fixed-wrapper\"\n    :style=\"[[{\n      height: size && direction === 'vertical' ? size.height + 'px' : 'auto',\n      width: size && direction === 'horizontal' ? size.width + 'px' : 'auto',\n    }], `--va-styles-width: ${String(styles.width)};--va-styles-height: ${String(styles.height)}`]\"\n  >\n    <VaResizeObserver\n      class=\"va-layout-fixed-wrapper__content\"\n      :class=\"`va-layout-fixed-wrapper__content--${area}`\"\n      :style=\"!size ? { position: 'relative' } : {}\"\n      @resize=\"size = $event\"\n    >\n      <slot />\n    </VaResizeObserver>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport VaResizeObserver from './VaResizeObserver.vue'\nimport { ref, type PropType, computed } from 'vue'\nimport {\n  AreaName,\n} from '../hooks/useGridTemplateArea'\nimport { useFixedLayoutChild } from '../hooks/useLayout'\n\ndefineOptions({\n  name: 'VaLayoutFixedWrapper',\n})\n\nconst props = defineProps({\n  area: { type: String as PropType<AreaName>, required: true },\n})\n\nconst size = ref<DOMRectReadOnly | null>(null)\n\nconst direction = computed(() => {\n  if (props.area === 'top' || props.area === 'bottom') {\n    return 'vertical'\n  } else {\n    return 'horizontal'\n  }\n})\n\nconst getPxOrZero = (value: number | null) => {\n  if (!value) { return 0 + 'px' }\n\n  return value + 'px'\n}\n\nconst styles = computed(() => {\n  if (direction.value === 'vertical') {\n    return { width: `calc(100% - ${getPxOrZero(paddings.value.left)} - ${getPxOrZero(paddings.value.right)})`, [props.area]: 0 }\n  } else {\n    return { height: `calc(100% - ${getPxOrZero(paddings.value.top)} - ${getPxOrZero(paddings.value.bottom)})`, [props.area]: 0 }\n  }\n})\n\nconst { paddings } = useFixedLayoutChild(props.area, size)\n\nconst computedStyle = computed(() => {\n  return Object.keys(paddings.value).reduce((acc, key) => {\n    if (key === props.area) { return acc }\n\n    return {\n      ...acc,\n      [key]: `${paddings.value[key as AreaName]}px`,\n    }\n  }, {})\n})\n</script>\n\n<style lang=\"scss\">\n.va-layout-fixed-wrapper {\n  position: relative;\n  flex: 1;\n\n  &__content {\n    position: fixed;\n    width: var(--va-styles-width);\n    height: var(--va-styles-height);\n\n    @media print {\n      position: relative !important;\n      height: max-content !important;\n      width: max-content !important;\n    }\n\n    &--top {\n      top: 0;\n    }\n\n    &--bottom {\n      bottom: 0;\n    }\n\n    &--right {\n      right: 0;\n    }\n\n    &--left {\n      left: 0;\n    }\n  }\n}\n</style>\n"],"names":[],"mappings":";;;;;;;;;;;;AA+BA,UAAM,QAAQ;AAIR,UAAA,OAAO,IAA4B,IAAI;AAEvC,UAAA,YAAY,SAAS,MAAM;AAC/B,UAAI,MAAM,SAAS,SAAS,MAAM,SAAS,UAAU;AAC5C,eAAA;AAAA,MAAA,OACF;AACE,eAAA;AAAA,MACT;AAAA,IAAA,CACD;AAEK,UAAA,cAAc,CAAC,UAAyB;AAC5C,UAAI,CAAC,OAAO;AAAS,eAAA;AAAA,MAAS;AAE9B,aAAO,QAAQ;AAAA,IAAA;AAGX,UAAA,SAAS,SAAS,MAAM;AACxB,UAAA,UAAU,UAAU,YAAY;AAClC,eAAO,EAAE,OAAO,eAAe,YAAY,SAAS,MAAM,IAAI,CAAC,MAAM,YAAY,SAAS,MAAM,KAAK,CAAC,KAAK,CAAC,MAAM,IAAI,GAAG;MAAE,OACtH;AACL,eAAO,EAAE,QAAQ,eAAe,YAAY,SAAS,MAAM,GAAG,CAAC,MAAM,YAAY,SAAS,MAAM,MAAM,CAAC,KAAK,CAAC,MAAM,IAAI,GAAG;MAC5H;AAAA,IAAA,CACD;AAED,UAAM,EAAE,SAAS,IAAI,oBAAoB,MAAM,MAAM,IAAI;AAEnC,aAAS,MAAM;AAC5B,aAAA,OAAO,KAAK,SAAS,KAAK,EAAE,OAAO,CAAC,KAAK,QAAQ;AAClD,YAAA,QAAQ,MAAM,MAAM;AAAS,iBAAA;AAAA,QAAI;AAE9B,eAAA;AAAA,UACL,GAAG;AAAA,UACH,CAAC,GAAG,GAAG,GAAG,SAAS,MAAM,GAAe,CAAC;AAAA,QAAA;AAAA,MAE7C,GAAG,CAAE,CAAA;AAAA,IAAA,CACN;;;;;;;;;;;;;;;;;;;;;;;"}