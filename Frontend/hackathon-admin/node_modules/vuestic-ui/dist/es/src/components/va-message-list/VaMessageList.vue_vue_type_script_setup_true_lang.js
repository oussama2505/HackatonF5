import { defineComponent, computed, openBlock, createElementBlock, Fragment, renderSlot, normalizeProps, guardReactiveProps, unref, mergeProps, createElementVNode, renderList, createBlock, createCommentVNode, createTextVNode, toDisplayString } from "vue";
import { V as VaIcon } from "../va-icon/index.js";
import { u as useMessageListAria } from "./hooks/useMessageListAria.js";
import { u as useColors } from "../../composables/useColors.js";
import { u as useNumericProp } from "../../composables/useNumericProp.js";
const _hoisted_1 = { class: "va-message-list__list" };
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaMessageList",
    inheritAttrs: false
  },
  __name: "VaMessageList",
  props: {
    modelValue: {
      type: [String, Array],
      default: ""
    },
    limit: { type: [Number, String], default: 1 },
    color: { type: String },
    hasError: { type: Boolean, default: false }
  },
  setup(__props, { expose: __expose }) {
    const props = __props;
    const { getColor } = useColors();
    const { childAttributes, messageListAttributes } = useMessageListAria(props);
    const limitComputed = useNumericProp("limit");
    const messages = computed(() => {
      if (!props.modelValue) {
        return [];
      }
      if (!Array.isArray(props.modelValue)) {
        return [props.modelValue];
      }
      return props.modelValue.slice(0, limitComputed.value);
    });
    const computedStyle = computed(() => props.color ? { color: getColor(props.color) } : {});
    __expose({
      messages
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(Fragment, null, [
        renderSlot(_ctx.$slots, "default", normalizeProps(guardReactiveProps({ ariaAttributes: unref(childAttributes), messages: messages.value, attrs: _ctx.$attrs }))),
        renderSlot(_ctx.$slots, "messages", normalizeProps(guardReactiveProps({ ariaAttributes: unref(messageListAttributes), messages: messages.value })), () => [
          messages.value.length > 0 ? (openBlock(), createElementBlock("div", mergeProps({
            key: 0,
            class: "va-message-list",
            style: computedStyle.value
          }, unref(messageListAttributes)), [
            createElementVNode("ul", _hoisted_1, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(messages.value, (message, index) => {
                return openBlock(), createElementBlock("li", {
                  key: index,
                  class: "va-message-list__message"
                }, [
                  renderSlot(_ctx.$slots, "message", normalizeProps(guardReactiveProps({ messages: messages.value, message })), () => [
                    __props.hasError ? (openBlock(), createBlock(unref(VaIcon), {
                      key: 0,
                      class: "va-message-list__icon",
                      name: "va-warning",
                      size: 16
                    })) : createCommentVNode("", true),
                    createTextVNode(toDisplayString(message), 1)
                  ])
                ]);
              }), 128))
            ])
          ], 16)) : createCommentVNode("", true)
        ])
      ], 64);
    };
  }
});
export {
  _sfc_main as _
};

import '../../../VaMessageList.css';
//# sourceMappingURL=VaMessageList.vue_vue_type_script_setup_true_lang.js.map
