{"version":3,"file":"VaSelectContent.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../../../src/components/va-select/components/VaSelectContent/VaSelectContent.vue"],"sourcesContent":["<template>\n  <div class=\"va-select-content\" @click=\"handleClick\">\n    <span\n      v-if=\"isPlaceholder && !$props.autocomplete\"\n      class=\"va-select-content__placeholder\"\n    >\n      <input v-bind=\"ariaAttributes\" :placeholder=\"$props.placeholder\" readonly />\n    </span>\n\n    <slot\n      v-else-if=\"!(props.autocomplete && !props.multiple)\"\n      name=\"content\"\n      v-bind=\"{\n        value: slotValue,\n        valueString: $props.valueString,\n        valueArray: $props.value,\n        tabindex: $props.tabindex,\n        ariaAttributes,\n      }\"\n    >\n      <template v-for=\"(option, index) in $props.value\" :key=\"index\">\n        <span v-if=\"option !== ''\" class=\"va-select-content__option\">\n          <slot name=\"option-content\" v-bind=\"{ option, index, selectOption: () => void 0 }\">\n            <va-icon\n              v-if=\"getIcon(option)\"\n              size=\"small\"\n              class=\"va-select-option__icon\"\n              :name=\"getIcon(option)\"\n            />\n            {{ getText(option) }}\n          </slot>\n        </span>\n        <span class=\"va-select-content__separator\" v-if=\"index < $props.value.length - 1\">\n          {{ $props.separator }}\n        </span>\n      </template>\n    </slot>\n\n    <input\n      v-if=\"$props.autocomplete\"\n      v-bind=\"ariaAttributes\"\n      v-model=\"autocompleteInputValueComputed\"\n      class=\"va-select-content__autocomplete\"\n      ref=\"autocompleteInput\"\n      autocomplete=\"off\"\n      aria-autocomplete=\"list\"\n      :placeholder=\"$props.placeholder\"\n      :disabled=\"$props.disabled\"\n      :readonly=\"$props.readonly\"\n      @keydown.up.stop.prevent=\"$emit('focus-prev')\"\n      @keydown.down.stop.prevent=\"$emit('focus-next')\"\n      @keydown.enter.stop.prevent=\"$emit('select-option')\"\n      @keydown=\"handleBackspace\"\n    />\n\n    <slot\n      name=\"hiddenOptionsBadge\"\n      v-bind=\"{\n        amount: hiddenSelectedOptionsAmount,\n        isShown: $props.isAllOptionsShown,\n        toggle: toggleHiddenOptionsState,\n      }\"\n    >\n      <va-badge\n        v-if=\"hiddenSelectedOptionsAmountComputed && !$props.isAllOptionsShown\"\n        class=\"va-select-content__state-icon\"\n        color=\"info\"\n        :text=\"`+${hiddenSelectedOptionsAmountComputed}`\"\n        :tabindex=\"$props.tabindex\"\n        @click.stop=\"toggleHiddenOptionsState\"\n      />\n    </slot>\n\n    <slot\n      name=\"hideOptionsButton\"\n      v-bind=\"{\n        isShown: $props.isAllOptionsShown,\n        toggle: toggleHiddenOptionsState,\n      }\"\n    >\n      <va-icon\n        v-if=\"$props.isAllOptionsShown\"\n        role=\"button\"\n        class=\"va-select-content__state-icon\"\n        size=\"small\"\n        name=\"reply\"\n        :tabindex=\"$props.tabindex\"\n        @click.stop=\"toggleHiddenOptionsState\"\n      />\n    </slot>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref, toRefs, computed, watch, onMounted, type PropType, ComputedRef } from 'vue'\n\nimport { useFormFieldProps, useNumericProp } from '../../../../composables'\n\nimport { VaIcon } from '../../../va-icon'\nimport { VaBadge } from '../../../va-badge'\n\nimport type { SelectOption } from '../../../index'\nimport { isObject } from '../../../../utils/is-object'\n\ndefineOptions({\n  name: 'VaSelectContent',\n})\n\nconst props = defineProps({\n  ...useFormFieldProps,\n\n  ariaAttributes: { type: Object },\n  value: { type: Array as PropType<SelectOption[]>, required: true },\n  valueString: { type: String },\n  separator: { type: String, default: ', ' },\n  placeholder: { type: String, default: '' },\n  tabindex: { type: [String, Number], default: 0 },\n  hiddenSelectedOptionsAmount: { type: [Number, String], default: 0 },\n  isAllOptionsShown: { type: Boolean, default: false },\n  autocomplete: { type: Boolean, default: false },\n  focused: { type: Boolean, default: false },\n  multiple: { type: Boolean, default: false },\n  getText: { type: Function as PropType<(option: SelectOption) => string>, required: true },\n  autocompleteInputValue: { type: String, default: '' },\n})\n\nconst emit = defineEmits(['toggle-hidden', 'autocomplete-input', 'focus-prev', 'focus-next', 'select-option', 'delete-last-selected'])\n\nconst autocompleteInput = ref<HTMLInputElement>()\n\nconst isPlaceholder = computed(() => props.placeholder && !props.valueString)\n\nconst toggleHiddenOptionsState = () => emit('toggle-hidden')\n\nconst { value, focused } = toRefs(props)\n\nconst autocompleteInputValueComputed = computed({\n  get: () => props.autocompleteInputValue,\n  set: (v: string) => emit('autocomplete-input', v),\n})\n\nconst hiddenSelectedOptionsAmountComputed = useNumericProp('hiddenSelectedOptionsAmount') as ComputedRef<number>\n\nonMounted(() => {\n  if (props.multiple) { return }\n  if (!props.autocomplete) { return }\n\n  autocompleteInputValueComputed.value = props.valueString as string\n})\n\nwatch(focused, (newValue) => {\n  if (!props.autocomplete || !newValue) { return }\n\n  if (autocompleteInputValueComputed.value) {\n    // native select method doesn't work in mobile Safari, so we need this instead\n    autocompleteInput.value?.setSelectionRange(0, autocompleteInputValueComputed.value.length)\n  } else {\n    autocompleteInput.value?.focus()\n  }\n})\n\nconst handleBackspace = (e: KeyboardEvent) => {\n  if (props.multiple && value.value.length && e.key === 'Backspace' && !autocompleteInputValueComputed.value) {\n    emit('delete-last-selected')\n  }\n}\n\nconst handleClick = (e: MouseEvent) => {\n  if (props.autocomplete) {\n    autocompleteInput.value?.focus()\n    e.stopPropagation()\n  }\n}\n\nconst getIcon = (option: SelectOption) => isObject(option) ? (option.icon as string) : undefined\n\nconst slotValue = computed(() => {\n  if (props.multiple) { return value.value }\n\n  return value.value[0]\n})\n</script>\n\n<style lang=\"scss\">\n@import '../../variables';\n\n.va-select-content {\n  display: flex;\n  flex-wrap: wrap;\n  flex: 1;\n\n  &__autocomplete {\n    flex: 1 1;\n    margin-left: 0.25rem;\n\n    &:first-child {\n      margin-left: 0;\n    }\n  }\n\n  &__placeholder {\n    overflow: hidden !important;\n    flex: 1;\n    line-height: normal;\n    color: var(--va-input-placeholder-text-color);\n    text-overflow: ellipsis !important;\n    white-space: nowrap !important;\n  }\n\n  &__separator {\n    white-space: pre;\n  }\n\n  &__state-icon {\n    margin-left: var(--va-select-state-icon-margin-left);\n  }\n}\n</style>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4GA,UAAM,QAAQ;AAkBd,UAAM,OAAO;AAEb,UAAM,oBAAoB;AAE1B,UAAM,gBAAgB,SAAS,MAAM,MAAM,eAAe,CAAC,MAAM,WAAW;AAEtE,UAAA,2BAA2B,MAAM,KAAK,eAAe;AAE3D,UAAM,EAAE,OAAO,QAAQ,IAAI,OAAO,KAAK;AAEvC,UAAM,iCAAiC,SAAS;AAAA,MAC9C,KAAK,MAAM,MAAM;AAAA,MACjB,KAAK,CAAC,MAAc,KAAK,sBAAsB,CAAC;AAAA,IAAA,CACjD;AAEK,UAAA,sCAAsC,eAAe,6BAA6B;AAExF,cAAU,MAAM;AACd,UAAI,MAAM,UAAU;AAAE;AAAA,MAAO;AACzB,UAAA,CAAC,MAAM,cAAc;AAAE;AAAA,MAAO;AAElC,qCAA+B,QAAQ,MAAM;AAAA,IAAA,CAC9C;AAEK,UAAA,SAAS,CAAC,aAAa;;AAC3B,UAAI,CAAC,MAAM,gBAAgB,CAAC,UAAU;AAAE;AAAA,MAAO;AAE/C,UAAI,+BAA+B,OAAO;AAExC,gCAAkB,UAAlB,mBAAyB,kBAAkB,GAAG,+BAA+B,MAAM;AAAA,MAAM,OACpF;AACL,gCAAkB,UAAlB,mBAAyB;AAAA,MAC3B;AAAA,IAAA,CACD;AAEK,UAAA,kBAAkB,CAAC,MAAqB;AACxC,UAAA,MAAM,YAAY,MAAM,MAAM,UAAU,EAAE,QAAQ,eAAe,CAAC,+BAA+B,OAAO;AAC1G,aAAK,sBAAsB;AAAA,MAC7B;AAAA,IAAA;AAGI,UAAA,cAAc,CAAC,MAAkB;;AACrC,UAAI,MAAM,cAAc;AACtB,gCAAkB,UAAlB,mBAAyB;AACzB,UAAE,gBAAgB;AAAA,MACpB;AAAA,IAAA;AAGF,UAAM,UAAU,CAAC,WAAyB,SAAS,MAAM,IAAK,OAAO,OAAkB;AAEjF,UAAA,YAAY,SAAS,MAAM;AAC/B,UAAI,MAAM,UAAU;AAAE,eAAO,MAAM;AAAA,MAAM;AAElC,aAAA,MAAM,MAAM,CAAC;AAAA,IAAA,CACrB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}