import { defineComponent, ref, onMounted, onBeforeUnmount, computed, useAttrs, openBlock, createBlock, resolveDynamicComponent, normalizeClass, unref, normalizeStyle, withCtx, renderSlot, createElementBlock, createCommentVNode } from "vue";
import { a as useTranslationProp, u as useTranslation } from "../../composables/useTranslation.js";
import { u as useNumericProp } from "../../composables/useNumericProp.js";
import { u as useColors } from "../../composables/useColors.js";
import { u as useBem } from "../../composables/useBem.js";
const _hoisted_1 = {
  key: 0,
  class: "va-skeleton__wave"
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaSkeleton"
  },
  __name: "VaSkeleton",
  props: {
    color: { type: String, default: "backgroundElement" },
    delay: { type: [Number, String], default: 100 },
    tag: { type: String, default: "div" },
    animation: { type: String, default: "pulse" },
    lines: { type: [String, Number], default: 1 },
    height: { type: [String], default: "5em" },
    width: { type: [String], default: "100%" },
    lineGap: { type: String, default: "8px" },
    lastLineWidth: { type: [String], default: "75%" },
    variant: { type: String, default: "squared" },
    ariaLabel: useTranslationProp("$t:loading")
  },
  setup(__props) {
    const props = __props;
    const doShow = ref(false);
    const delayComputed = useNumericProp("delay");
    let timeoutId;
    onMounted(() => {
      clearTimeout(timeoutId);
      setTimeout(() => {
        doShow.value = true;
      }, delayComputed.value);
    });
    onBeforeUnmount(() => {
      clearTimeout(timeoutId);
    });
    const heightComputed = computed(() => {
      if (props.variant === "text") {
        return `${props.lines}em`;
      }
      return props.height;
    });
    const widthComputed = computed(() => {
      if (props.variant === "circle") {
        return heightComputed.value;
      }
      return props.width;
    });
    const { getColor } = useColors();
    const colorComputed = computed(() => getColor(props.color));
    computed(() => `-${props.lineGap}`);
    const bem = useBem("va-skeleton", () => ({
      lines: Number(props.lines) > 1,
      text: props.variant === "text",
      circle: props.variant === "circle",
      hidden: !doShow.value,
      pulse: props.animation === "pulse",
      wave: props.animation === "wave"
    }));
    const borderRadius = computed(() => {
      if (props.variant === "circle") {
        return "50%";
      }
      if (props.variant === "rounded") {
        return `var(--va-skeleton-border-radius, calc(${heightComputed.value} / 5))`;
      }
      return "0px";
    });
    const { tp } = useTranslation();
    const attrs = useAttrs();
    const classes = computed(() => [
      ...Object.keys(bem),
      attrs.class
    ]);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(__props.tag), {
        class: normalizeClass(["va-skeleton", classes.value]),
        role: "status",
        "aria-live": "polite",
        "aria-label": unref(tp)(_ctx.$props.ariaLabel),
        "aria-atomic": "true",
        style: normalizeStyle(`--va-color-computed: ${String(colorComputed.value)};--va-height-computed: ${String(heightComputed.value)};--va-width-computed: ${String(widthComputed.value)};--va-border-radius: ${String(borderRadius.value)};--va-line-gap: ${String(__props.lineGap)};--va-last-line-width: ${String(__props.lastLineWidth)}`)
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default"),
          __props.animation === "wave" ? (openBlock(), createElementBlock("div", _hoisted_1)) : createCommentVNode("", true)
        ]),
        _: 3
      }, 8, ["aria-label", "class", "style"]);
    };
  }
});
export {
  _sfc_main as _
};

import '../../../VaSkeleton.css';
//# sourceMappingURL=VaSkeleton.vue_vue_type_script_setup_true_lang.js.map
