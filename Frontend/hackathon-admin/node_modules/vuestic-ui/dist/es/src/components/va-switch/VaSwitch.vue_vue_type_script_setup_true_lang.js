import { defineComponent, shallowRef, computed, useSlots, openBlock, createBlock, unref, normalizeClass, normalizeStyle, withCtx, createElementVNode, mergeProps, toHandlers, withKeys, createElementBlock, renderSlot, createTextVNode, toDisplayString, createCommentVNode, normalizeProps, guardReactiveProps, withModifiers } from "vue";
import { p as pick } from "../../../vendor.js";
import { V as VaProgressCircle } from "../va-progress-circle/index.js";
import { u as useComponentUuid } from "../../composables/useComponentUuid.js";
import { _ as _sfc_main$1 } from "../va-message-list/VaMessageListWrapper.vue_vue_type_script_setup_true_lang.js";
import { u as useSelectableProps, a as useSelectableEmits, b as useSelectable } from "../../composables/useSelectable.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { a as useTranslationProp } from "../../composables/useTranslation.js";
import { u as useColors } from "../../composables/useColors.js";
import { u as useKeyboardOnlyFocus } from "../../composables/useKeyboardOnlyFocus.js";
import { u as useTextColor } from "../../composables/useTextColor.js";
import { u as useBem } from "../../composables/useBem.js";
const _hoisted_1 = { class: "va-switch__inner" };
const _hoisted_2 = { class: "va-switch__checker-wrapper" };
const _hoisted_3 = { class: "va-switch__checker" };
const _hoisted_4 = { class: "va-switch__checker-circle" };
const _hoisted_5 = ["id"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaSwitch"
  },
  __name: "VaSwitch",
  props: {
    ...useSelectableProps,
    ...useComponentPresetProp,
    id: { type: String, default: "" },
    name: { type: String, default: "" },
    modelValue: {
      type: [Number, Boolean, Array, String, Object],
      default: false
    },
    trueLabel: { type: String, default: null },
    falseLabel: { type: String, default: null },
    trueInnerLabel: { type: String, default: null },
    falseInnerLabel: { type: String, default: null },
    ariaLabel: useTranslationProp("$t:switch"),
    color: { type: String, default: "primary" },
    offColor: { type: String, default: "background-element" },
    size: {
      type: String,
      default: "medium",
      validator: (value) => ["medium", "small", "large"].includes(value)
    }
  },
  emits: [
    ...useSelectableEmits,
    "focus",
    "blur",
    "update:modelValue"
  ],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const elements = {
      container: shallowRef(),
      input: shallowRef(),
      label: shallowRef()
    };
    const { getColor } = useColors();
    const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus();
    const {
      isChecked,
      computedError,
      isIndeterminate,
      computedErrorMessages,
      validationAriaAttributes,
      toggleSelection,
      onBlur,
      onFocus,
      reset,
      focus,
      isDirty,
      isTouched,
      isLoading,
      isError
    } = useSelectable(props, emit, elements);
    const computedBackground = computed(() => getColor(isChecked.value ? props.color : props.offColor));
    const { textColorComputed } = useTextColor(computedBackground);
    const computedInnerLabel = computed(() => {
      if (props.trueInnerLabel && isChecked.value) {
        return props.trueInnerLabel;
      }
      if (props.falseInnerLabel && !isChecked.value) {
        return props.falseInnerLabel;
      }
      return "";
    });
    const computedLabel = computed(() => {
      if (props.trueLabel && isChecked.value) {
        return props.trueLabel;
      }
      if (props.falseLabel && !isChecked.value) {
        return props.falseLabel;
      }
      return props.label;
    });
    const computedClass = useBem("va-switch", () => ({
      ...pick(props, ["readonly", "disabled", "leftLabel"]),
      checked: isChecked.value,
      indeterminate: isIndeterminate.value,
      small: props.size === "small",
      large: props.size === "large",
      error: computedError.value,
      keyboardFocus: hasKeyboardFocus.value
    }));
    const styleComputed = computed(() => ({
      lineHeight: computedErrorMessages.value.length ? 1 : 0
    }));
    const progressCircleSize = computed(() => {
      const size = { small: "15px", medium: "20px", large: "25px" };
      return size[props.size];
    });
    const trackStyle = computed(() => ({
      borderColor: computedError.value ? getColor("danger") : "",
      backgroundColor: computedBackground.value
    }));
    const labelStyle = computed(() => ({
      color: computedError.value ? getColor("danger") : ""
    }));
    const trackLabelStyle = computed(() => ({
      color: textColorComputed.value,
      "text-align": isChecked.value ? "left" : "right"
    }));
    const slots = useSlots();
    const componentId = useComponentUuid();
    const ariaLabelIdComputed = computed(() => `aria-label-id-${componentId}`);
    const inputAttributesComputed = computed(() => ({
      id: props.id || void 0,
      name: props.name || void 0,
      disabled: props.disabled,
      readonly: props.readonly,
      "aria-disabled": props.disabled,
      "aria-readonly": props.readonly,
      "aria-checked": !!props.modelValue,
      "aria-label": !slots.default ? props.ariaLabel : void 0,
      "aria-labelledby": computedLabel.value || slots.default ? ariaLabelIdComputed.value : void 0,
      tabindex: props.disabled ? -1 : 0,
      checked: isChecked.value,
      ...validationAriaAttributes.value
    }));
    const onEnterKeyPress = () => {
      var _a;
      (_a = elements.input.value) == null ? void 0 : _a.click();
    };
    const input = elements.input;
    __expose({
      focus,
      reset,
      isDirty,
      isTouched,
      isLoading,
      isError
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1), {
        class: normalizeClass(["va-switch", unref(computedClass)]),
        style: normalizeStyle(styleComputed.value),
        disabled: _ctx.$props.disabled,
        success: _ctx.$props.success,
        messages: _ctx.$props.messages,
        error: unref(computedError),
        "error-messages": unref(computedErrorMessages),
        "error-count": _ctx.$props.errorCount
      }, {
        default: withCtx(() => [
          createElementVNode("div", {
            ref: "container",
            class: "va-switch__container",
            tabindex: "-1",
            onBlur: _cache[5] || (_cache[5] = //@ts-ignore
            (...args) => unref(onBlur) && unref(onBlur)(...args)),
            onClick: _cache[6] || (_cache[6] = //@ts-ignore
            (...args) => unref(toggleSelection) && unref(toggleSelection)(...args))
          }, [
            createElementVNode("div", _hoisted_1, [
              createElementVNode("input", mergeProps({
                ref_key: "input",
                ref: input,
                type: "checkbox",
                class: "va-switch__input",
                role: "switch"
              }, inputAttributesComputed.value, toHandlers(unref(keyboardFocusListeners), true), {
                onFocus: _cache[0] || (_cache[0] = //@ts-ignore
                (...args) => unref(onFocus) && unref(onFocus)(...args)),
                onBlur: _cache[1] || (_cache[1] = //@ts-ignore
                (...args) => unref(onBlur) && unref(onBlur)(...args)),
                onKeypress: withKeys(onEnterKeyPress, ["enter"])
              }), null, 16),
              createElementVNode("div", {
                class: "va-switch__track",
                "aria-hidden": "true",
                style: normalizeStyle(trackStyle.value)
              }, [
                computedInnerLabel.value || _ctx.$slots.innerLabel ? (openBlock(), createElementBlock("div", {
                  key: 0,
                  class: "va-switch__track-label",
                  style: normalizeStyle(trackLabelStyle.value)
                }, [
                  renderSlot(_ctx.$slots, "innerLabel", {}, () => [
                    createTextVNode(toDisplayString(computedInnerLabel.value), 1)
                  ])
                ], 4)) : createCommentVNode("", true),
                createElementVNode("div", _hoisted_2, [
                  createElementVNode("div", _hoisted_3, [
                    renderSlot(_ctx.$slots, "checker", normalizeProps(guardReactiveProps({ value: unref(isChecked) })), () => [
                      createElementVNode("div", _hoisted_4, [
                        _ctx.$props.loading ? (openBlock(), createBlock(unref(VaProgressCircle), {
                          key: 0,
                          indeterminate: "",
                          size: progressCircleSize.value,
                          color: trackStyle.value.backgroundColor
                        }, null, 8, ["size", "color"])) : createCommentVNode("", true)
                      ])
                    ])
                  ])
                ])
              ], 4)
            ]),
            computedLabel.value || _ctx.$slots.default ? (openBlock(), createElementBlock("div", {
              key: 0,
              ref: "label",
              class: "va-switch__label",
              style: normalizeStyle(labelStyle.value),
              id: ariaLabelIdComputed.value,
              onBlur: _cache[2] || (_cache[2] = //@ts-ignore
              (...args) => unref(onBlur) && unref(onBlur)(...args)),
              onClick: _cache[3] || (_cache[3] = //@ts-ignore
              (...args) => unref(toggleSelection) && unref(toggleSelection)(...args)),
              onKeydown: _cache[4] || (_cache[4] = withKeys(withModifiers(
                //@ts-ignore
                (...args) => unref(toggleSelection) && unref(toggleSelection)(...args),
                ["stop"]
              ), ["enter"]))
            }, [
              renderSlot(_ctx.$slots, "default", {}, () => [
                createTextVNode(toDisplayString(computedLabel.value), 1)
              ])
            ], 44, _hoisted_5)) : createCommentVNode("", true)
          ], 544)
        ]),
        _: 3
      }, 8, ["class", "style", "disabled", "success", "messages", "error", "error-messages", "error-count"]);
    };
  }
});
export {
  _sfc_main as _
};

import '../../../VaSwitch.css';
//# sourceMappingURL=VaSwitch.vue_vue_type_script_setup_true_lang.js.map
