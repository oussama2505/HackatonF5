import { defineComponent, ref, computed, openBlock, createElementBlock, normalizeClass, normalizeStyle, unref, Fragment, renderList, createBlock, withKeys, withModifiers } from "vue";
import { u as useTimePicker } from "./hooks/useTimePicker.js";
import { V as VaTimePickerColumn } from "./components/VaTimePickerColumn/index.js";
import { u as useCSSVariables } from "../../composables/useCSSVariables.js";
import { u as useStatefulProps, a as useStatefulEmits, b as useStateful } from "../../composables/useStateful.js";
import { u as useFormFieldProps, a as useFormField } from "../../composables/useFormField.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { u as useNumericProp } from "../../composables/useNumericProp.js";
import { u as useArrayRefs } from "../../composables/useArrayRefs.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaTimePicker"
  },
  __name: "VaTimePicker",
  props: {
    ...useStatefulProps,
    ...useFormFieldProps,
    ...useComponentPresetProp,
    modelValue: { type: Date, required: false },
    ampm: { type: Boolean, default: false },
    hidePeriodSwitch: { type: Boolean, default: false },
    periodUpdatesModelValue: { type: Boolean, default: true },
    // Update model value when switching period automatically
    view: { type: String, default: "minutes" },
    hoursFilter: { type: Function },
    minutesFilter: { type: Function },
    secondsFilter: { type: Function },
    framed: { type: Boolean, default: false },
    cellHeight: { type: [Number, String], default: 30 },
    visibleCellsCount: { type: [Number, String], default: 7 }
  },
  emits: [...useStatefulEmits],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const { valueComputed } = useStateful(props, emit);
    const { columns, isPM } = useTimePicker(props, valueComputed);
    const cellHeightComputed = useNumericProp("cellHeight");
    const visibleCellsCountComputed = useNumericProp("visibleCellsCount");
    const { setItemRef, itemRefs: pickers } = useArrayRefs();
    const activeColumnIndex = ref();
    const focus = (idx = 0) => {
      var _a;
      (_a = pickers.value[idx]) == null ? void 0 : _a.focus();
    };
    const blur = (idx) => {
      var _a;
      idx ? (_a = pickers.value[idx]) == null ? void 0 : _a.blur() : pickers.value.forEach((el) => el == null ? void 0 : el.blur());
    };
    const { computedClasses: computedFormClasses } = useFormField("va-time-picker", props);
    const focusNext = () => {
      const nextIndex = ((activeColumnIndex == null ? void 0 : activeColumnIndex.value) || 0) + 1;
      activeColumnIndex.value = nextIndex % columns.value.length;
      focus(activeColumnIndex.value);
    };
    const focusPrev = () => {
      const nextIndex = ((activeColumnIndex == null ? void 0 : activeColumnIndex.value) || 0) - 1 + columns.value.length;
      activeColumnIndex.value = nextIndex % columns.value.length;
      focus(activeColumnIndex.value);
    };
    const computedClasses = computed(() => ({
      ...computedFormClasses,
      "va-time-picker--framed": props.framed
    }));
    const computedStyles = useCSSVariables("va-time-picker", () => {
      const gapHeight = (visibleCellsCountComputed.value - 1) / 2 * cellHeightComputed.value;
      return {
        height: `${cellHeightComputed.value * visibleCellsCountComputed.value}px`,
        "cell-height": `${cellHeightComputed.value}px`,
        "column-gap-height": `${gapHeight}px`
      };
    });
    __expose({
      focus,
      blur,
      focusNext,
      focusPrev
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(["va-time-picker", computedClasses.value]),
        style: normalizeStyle(unref(computedStyles))
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(columns), (column, idx) => {
          return openBlock(), createBlock(unref(VaTimePickerColumn), {
            key: idx,
            ref_for: true,
            ref: unref(setItemRef),
            items: column.items,
            tabindex: _ctx.disabled ? -1 : 0,
            "cell-height": unref(cellHeightComputed),
            activeItemIndex: column.activeItem.value,
            "onUpdate:activeItemIndex": ($event) => column.activeItem.value = $event,
            onKeydown: [
              _cache[0] || (_cache[0] = withKeys(withModifiers(($event) => focusNext(), ["stop", "prevent"]), ["right"])),
              _cache[1] || (_cache[1] = withKeys(withModifiers(($event) => focusNext(), ["exact", "stop", "prevent"]), ["tab"])),
              _cache[2] || (_cache[2] = withKeys(withModifiers(($event) => focusPrev(), ["stop", "prevent"]), ["left"])),
              _cache[3] || (_cache[3] = withKeys(withModifiers(($event) => focusPrev(), ["shift", "stop", "prevent"]), ["tab"]))
            ],
            onFocus: ($event) => activeColumnIndex.value = idx
          }, null, 8, ["items", "tabindex", "cell-height", "activeItemIndex", "onUpdate:activeItemIndex", "onFocus"]);
        }), 128))
      ], 6);
    };
  }
});
export {
  _sfc_main as _
};

import '../../../VaTimePicker.css';
//# sourceMappingURL=VaTimePicker.vue_vue_type_script_setup_true_lang.js.map
