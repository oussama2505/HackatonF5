import { defineComponent, shallowRef, watch, onMounted, nextTick, openBlock, createElementBlock, withKeys, withModifiers, Fragment, renderList, createBlock, unref, withCtx, createElementVNode, normalizeClass, renderSlot, normalizeProps, guardReactiveProps, createTextVNode, toDisplayString } from "vue";
import { _ as _sfc_main$1 } from "../VaTimePickerColumnCell.vue_vue_type_script_setup_true_lang.js";
import { d as debounce } from "../../../../../vendor.js";
import { a as useFocusEmits, u as useFocus } from "../../../../composables/useFocus.js";
import { u as useSyncProp } from "../../../../composables/useSyncProp.js";
import { u as useNumericProp } from "../../../../composables/useNumericProp.js";
const _hoisted_1 = ["onClick"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaTimePickerColumn"
  },
  __name: "VaTimePickerColumn",
  props: {
    items: { type: Array, default: () => [] },
    activeItemIndex: { type: Number, default: 0 },
    cellHeight: { type: [Number, String], default: 30 }
  },
  emits: ["item-selected", "update:activeItemIndex", ...useFocusEmits],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const rootElement = shallowRef();
    const { focus, blur } = useFocus(rootElement, emit);
    const [syncActiveItemIndex] = useSyncProp("activeItemIndex", props, emit);
    const cellHeightComputed = useNumericProp("cellHeight");
    watch(syncActiveItemIndex, (newVal) => {
      scrollTo(newVal);
    });
    onMounted(() => scrollTo(syncActiveItemIndex.value, false));
    const scrollTo = (index, animated = true) => {
      nextTick(() => {
        var _a, _b;
        (_b = (_a = rootElement.value) == null ? void 0 : _a.scrollTo) == null ? void 0 : _b.call(_a, {
          behavior: animated ? "smooth" : "auto",
          top: index * cellHeightComputed.value
        });
      });
    };
    const makeActiveNext = (times) => {
      syncActiveItemIndex.value = (syncActiveItemIndex.value + (times || 1)) % props.items.length;
      nextTick(() => scrollTo(syncActiveItemIndex.value));
    };
    const makeActivePrev = (times) => {
      syncActiveItemIndex.value = (syncActiveItemIndex.value - (times || 1) + props.items.length) % props.items.length;
      nextTick(() => scrollTo(syncActiveItemIndex.value));
    };
    const onCellClick = (index) => {
      syncActiveItemIndex.value = index;
    };
    const formatCell = (n) => {
      if (!Number.isInteger(n)) {
        return n;
      }
      return Number(n) < 10 ? `0${n}` : `${n}`;
    };
    const getIndex = () => {
      const scrollTop = rootElement.value.scrollTop;
      const calculatedIndex = Math.max(
        (scrollTop - scrollTop % cellHeightComputed.value) / cellHeightComputed.value,
        scrollTop / cellHeightComputed.value
      );
      if (calculatedIndex >= props.items.length) {
        return props.items.length - 1;
      }
      if (calculatedIndex < 0) {
        return 0;
      }
      if (syncActiveItemIndex.value * cellHeightComputed.value < scrollTop) {
        return Math.ceil(calculatedIndex);
      } else if (syncActiveItemIndex.value * cellHeightComputed.value > scrollTop) {
        return Math.floor(calculatedIndex);
      } else {
        return Math.round(calculatedIndex);
      }
    };
    const onScroll = debounce(() => {
      if (rootElement.value && syncActiveItemIndex.value !== -1) {
        syncActiveItemIndex.value = getIndex();
      }
    }, 200);
    __expose({
      focus,
      blur
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref_key: "rootElement",
        ref: rootElement,
        tabindex: "0",
        class: "va-time-picker-column",
        onKeydown: [
          _cache[0] || (_cache[0] = withKeys(withModifiers(($event) => makeActiveNext(), ["stop", "prevent"]), ["down"])),
          _cache[1] || (_cache[1] = withKeys(withModifiers(($event) => makeActiveNext(5), ["stop", "prevent"]), ["space"])),
          _cache[2] || (_cache[2] = withKeys(withModifiers(($event) => makeActivePrev(), ["stop", "prevent"]), ["up"]))
        ]
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(__props.items, (item, index) => {
          return openBlock(), createBlock(_sfc_main$1, {
            key: item,
            onScrollPassive: unref(onScroll),
            onTouchmovePassive: unref(onScroll),
            onMousewheelPassive: unref(onScroll)
          }, {
            default: withCtx(() => [
              createElementVNode("div", {
                class: normalizeClass(["va-time-picker-cell", { "va-time-picker-cell--active": index === _ctx.$props.activeItemIndex }]),
                onClick: ($event) => onCellClick(index)
              }, [
                renderSlot(_ctx.$slots, "cell", normalizeProps(guardReactiveProps({ item, index, activeItemIndex: __props.activeItemIndex, items: __props.items, formattedItem: formatCell(item) })), () => [
                  createTextVNode(toDisplayString(formatCell(item)), 1)
                ])
              ], 10, _hoisted_1)
            ]),
            _: 2
          }, 1032, ["onScrollPassive", "onTouchmovePassive", "onMousewheelPassive"]);
        }), 128))
      ], 544);
    };
  }
});
export {
  _sfc_main as _
};

import '../../../../../VaTimePickerColumn.css';
//# sourceMappingURL=VaTimePickerColumn.vue_vue_type_script_setup_true_lang.js.map
