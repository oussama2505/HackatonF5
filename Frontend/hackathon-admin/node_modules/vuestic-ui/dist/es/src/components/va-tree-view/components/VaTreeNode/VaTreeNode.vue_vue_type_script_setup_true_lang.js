import { defineComponent, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, unref, withKeys, withModifiers, createElementVNode, renderSlot, normalizeProps, guardReactiveProps, createVNode, createCommentVNode, createTextVNode, toDisplayString, withDirectives, Fragment, renderList, createBlock, createSlots, withCtx, vShow } from "vue";
import { T as TreeViewKey } from "../../types.js";
import { u as useStrictInject } from "../../../../composables/useStrictInject.js";
import { V as VaCheckbox } from "../../../va-checkbox/index.js";
import { u as useBem } from "../../../../composables/useBem.js";
import { V as VaIcon } from "../../../va-icon/index.js";
const _hoisted_1 = ["role", "aria-expanded", "aria-disabled", "aria-checked", "tabindex"];
const _hoisted_2 = { class: "va-tree-node-root" };
const _hoisted_3 = {
  key: 2,
  class: "va-tree-node-content__item"
};
const _hoisted_4 = ["aria-hidden"];
const INJECTION_ERROR_MESSAGE = "The VaTreeNode component should be used in the context of VaTreeView component";
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaTreeNode"
  },
  __name: "VaTreeNode",
  props: {
    node: {
      type: Object,
      required: true
    }
  },
  setup(__props) {
    const props = __props;
    const {
      iconBy,
      selectable,
      expandNodeBy,
      colorComputed,
      selectedNodeComputed,
      getText,
      getTrackBy,
      toggleNode,
      toggleCheckbox,
      getNodeProperty,
      handleKeyboardNavigation
    } = useStrictInject(TreeViewKey, INJECTION_ERROR_MESSAGE);
    const labelComputed = computed(() => getText(props.node) || "");
    const isExpandedComputed = computed(() => props.node.hasChildren ? !!props.node.expanded : void 0);
    const iconComputed = computed(() => getNodeProperty(props.node, iconBy));
    const roleComputed = computed(() => props.node.hasChildren ? "group" : "treeitem");
    const treeNodeClassComputed = useBem("va-tree-node", () => ({
      disabled: Boolean(props.node.disabled),
      checked: Boolean(props.node.checked),
      hasChildren: Boolean(props.node.hasChildren),
      [`level-${props.node.level}`]: true,
      [`expand-by-${expandNodeBy}`]: true
    }));
    const expandedClassComputed = useBem("va-tree-node-children", () => ({
      expanded: !!isExpandedComputed.value
    }));
    const indentClassComputed = useBem("va-tree-node-content", () => ({
      indent: props.node.hasChildren === false
    }));
    const cursorClassComputed = useBem("va-tree-node-content", () => ({
      clickable: props.node.hasChildren === true && expandNodeBy === "node"
    }));
    const tabIndexComputed = computed(() => props.node.disabled ? -1 : 0);
    const onNodeClick = (type) => {
      const nodeType = expandNodeBy === "node" && type === "leaf" ? "node" : type;
      if (expandNodeBy === nodeType) {
        toggleNode(props.node);
      }
      selectedNodeComputed.value = props.node;
    };
    return (_ctx, _cache) => {
      const _component_va_tree_node = resolveComponent("va-tree-node", true);
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(["va-tree-node", unref(treeNodeClassComputed)]),
        role: roleComputed.value,
        "aria-expanded": isExpandedComputed.value,
        "aria-disabled": _ctx.$props.node.disabled,
        "aria-checked": !!_ctx.$props.node.checked,
        tabindex: tabIndexComputed.value,
        onKeydown: [
          _cache[4] || (_cache[4] = withKeys(withModifiers(($event) => unref(handleKeyboardNavigation)($event, _ctx.$props.node), ["stop", "prevent"]), ["up"])),
          _cache[5] || (_cache[5] = withKeys(withModifiers(($event) => unref(handleKeyboardNavigation)($event, _ctx.$props.node), ["stop", "prevent"]), ["right"])),
          _cache[6] || (_cache[6] = withKeys(withModifiers(($event) => unref(handleKeyboardNavigation)($event, _ctx.$props.node), ["stop", "prevent"]), ["down"])),
          _cache[7] || (_cache[7] = withKeys(withModifiers(($event) => unref(handleKeyboardNavigation)($event, _ctx.$props.node), ["stop", "prevent"]), ["left"])),
          _cache[8] || (_cache[8] = withKeys(withModifiers(($event) => unref(handleKeyboardNavigation)($event, _ctx.$props.node), ["stop", "prevent"]), ["space"])),
          _cache[9] || (_cache[9] = withKeys(withModifiers(($event) => unref(handleKeyboardNavigation)($event, _ctx.$props.node), ["stop", "prevent"]), ["esc"]))
        ]
      }, [
        createElementVNode("div", _hoisted_2, [
          createElementVNode("div", {
            class: normalizeClass(["va-tree-node-content", unref(indentClassComputed)]),
            onClick: _cache[3] || (_cache[3] = ($event) => onNodeClick("node"))
          }, [
            _ctx.$props.node.hasChildren ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: "va-tree-node-content__item va-tree-node-content__item--leaf",
              onClick: _cache[0] || (_cache[0] = withModifiers(($event) => onNodeClick("leaf"), ["stop"]))
            }, [
              renderSlot(_ctx.$slots, "icon-toggle", normalizeProps(guardReactiveProps(_ctx.$props.node)), () => [
                createVNode(unref(VaIcon), {
                  name: isExpandedComputed.value ? "keyboard_arrow_down" : "keyboard_arrow_right",
                  size: "20px"
                }, null, 8, ["name"])
              ])
            ])) : createCommentVNode("", true),
            unref(selectable) ? (openBlock(), createElementBlock("div", {
              key: 1,
              class: "va-tree-node-content__item",
              onClick: _cache[2] || (_cache[2] = withModifiers(() => {
              }, ["stop"]))
            }, [
              renderSlot(_ctx.$slots, "checkbox", normalizeProps(guardReactiveProps(_ctx.$props.node)), () => [
                createVNode(unref(VaCheckbox), {
                  "model-value": _ctx.$props.node.checked,
                  color: unref(colorComputed),
                  indeterminate: "",
                  "onUpdate:modelValue": _cache[1] || (_cache[1] = (v) => unref(toggleCheckbox)(_ctx.$props.node, v)),
                  class: "va-tree-node__checkbox"
                }, null, 8, ["model-value", "color"])
              ])
            ])) : createCommentVNode("", true),
            iconComputed.value ? (openBlock(), createElementBlock("div", _hoisted_3, [
              renderSlot(_ctx.$slots, "icon", normalizeProps(guardReactiveProps(_ctx.$props.node)), () => [
                createVNode(unref(VaIcon), {
                  name: iconComputed.value,
                  size: "small"
                }, null, 8, ["name"])
              ])
            ])) : createCommentVNode("", true),
            createElementVNode("div", {
              class: normalizeClass(["va-tree-node-content__body", unref(cursorClassComputed)])
            }, [
              renderSlot(_ctx.$slots, "content", normalizeProps(guardReactiveProps(_ctx.$props.node)), () => [
                createTextVNode(toDisplayString(labelComputed.value), 1)
              ])
            ], 2)
          ], 2)
        ]),
        withDirectives(createElementVNode("div", {
          "aria-hidden": !_ctx.$props.node.expanded,
          class: normalizeClass(["va-tree-node-children", unref(expandedClassComputed)])
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$props.node.children, (childNode) => {
            return openBlock(), createBlock(_component_va_tree_node, {
              key: unref(getTrackBy)(childNode),
              node: childNode
            }, createSlots({ _: 2 }, [
              renderList(_ctx.$slots, (_, name) => {
                return {
                  name,
                  fn: withCtx((slotScope) => [
                    renderSlot(_ctx.$slots, name, normalizeProps(guardReactiveProps(slotScope)))
                  ])
                };
              })
            ]), 1032, ["node"]);
          }), 128))
        ], 10, _hoisted_4), [
          [vShow, _ctx.$props.node.hasChildren]
        ])
      ], 42, _hoisted_1);
    };
  }
});
export {
  _sfc_main as _
};

import '../../../../../VaTreeNode.css';
//# sourceMappingURL=VaTreeNode.vue_vue_type_script_setup_true_lang.js.map
