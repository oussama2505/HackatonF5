import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, unref, Fragment, renderList, createBlock, mergeProps, renderSlot, normalizeProps, createVNode, withCtx, createTextVNode, toDisplayString, createCommentVNode } from "vue";
import { V as VaAvatar } from "../va-avatar/index.mjs";
import { p as pick } from "../../../vendor.mjs";
import { e as extractComponentProps } from "../../utils/component-options/extract-component-options.mjs";
import { u as useSizeProps, a as useSize } from "../../composables/useSize.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.mjs";
import { u as useNumericProp } from "../../composables/useNumericProp.mjs";
import { u as useBem } from "../../composables/useBem.mjs";
import { f as filterComponentProps } from "../../utils/component-options/filter-props.mjs";
const VaAvatarProps = extractComponentProps(VaAvatar);
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaAvatarGroup"
  },
  __name: "VaAvatarGroup",
  props: {
    ...useSizeProps,
    ...useComponentPresetProp,
    ...VaAvatarProps,
    max: {
      type: [Number, String],
      default: 0
    },
    vertical: {
      type: Boolean,
      default: false
    },
    options: {
      type: Array,
      default: () => []
    },
    /** If there are more avatars that can be displayed we show rest number. This prop changes color of rest indicator. */
    restColor: {
      type: String,
      default: "secondary"
    }
  },
  setup(__props) {
    const props = __props;
    const maxComputed = useNumericProp("max");
    const classComputed = useBem("va-avatar-group", () => ({
      ...pick(props, ["vertical"])
    }));
    const maxOptions = computed(() => maxComputed.value && maxComputed.value <= props.options.length ? props.options.slice(0, maxComputed.value) : props.options);
    const restOptionsCount = computed(() => {
      const hasOptions = props.options.length > 0;
      const canAddMoreOptions = maxOptions.value.length < props.options.length;
      const remainingOptions = props.options.length - (maxComputed.value || 0);
      return hasOptions && canAddMoreOptions ? remainingOptions : 0;
    });
    const { sizeComputed, fontSizeComputed } = useSize(props, "VaAvatarGroup");
    const filteredAvatarProps = filterComponentProps(VaAvatarProps);
    const avatarProps = computed(() => ({
      ...filteredAvatarProps.value,
      fontSize: fontSizeComputed.value,
      size: sizeComputed.value
    }));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(["va-avatar-group", unref(classComputed)]),
        role: "list"
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(maxOptions.value, (option, idx) => {
          return openBlock(), createBlock(unref(VaAvatar), mergeProps({ key: idx }, { ...avatarProps.value, ...option }, { role: "listitem" }), null, 16);
        }), 128)),
        restOptionsCount.value > 0 ? renderSlot(_ctx.$slots, "rest", normalizeProps(mergeProps({ key: 0 }, avatarProps.value)), () => [
          createVNode(unref(VaAvatar), mergeProps(avatarProps.value, {
            color: __props.restColor,
            class: "va-avatar-group__rest",
            role: "listitem"
          }), {
            default: withCtx(() => [
              createTextVNode(" +" + toDisplayString(restOptionsCount.value), 1)
            ]),
            _: 1
          }, 16, ["color"])
        ]) : createCommentVNode("", true)
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaAvatarGroup.vue_vue_type_script_setup_true_lang.mjs.map
