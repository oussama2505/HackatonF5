{"version":3,"file":"VaAvatarGroup.vue_vue_type_script_setup_true_lang.mjs","sources":["../../../../../src/components/va-avatar-group/VaAvatarGroup.vue"],"sourcesContent":["<template>\n  <div\n    class=\"va-avatar-group\"\n    :class=\"classComputed\"\n    role=\"list\"\n  >\n    <va-avatar\n      v-for=\"(option, idx) in maxOptions\"\n      :key=\"idx\"\n      v-bind=\"{ ...avatarProps, ...option }\"\n      role=\"listitem\"\n    />\n    <slot v-if=\"restOptionsCount > 0\" name=\"rest\" v-bind=\"avatarProps\">\n      <va-avatar\n        v-bind=\"avatarProps\"\n        :color=\"restColor\"\n        class=\"va-avatar-group__rest\"\n        role=\"listitem\"\n      >\n        +{{ restOptionsCount }}\n      </va-avatar>\n    </slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, PropType } from 'vue'\n\nimport { VaAvatar } from '../va-avatar'\n\nimport pick from 'lodash/pick.js'\nimport { extractComponentProps, filterComponentProps } from '../../utils/component-options'\nimport { useBem, useComponentPresetProp, useSize, useSizeProps, useNumericProp } from '../../composables'\n\nconst VaAvatarProps = extractComponentProps(VaAvatar)\n</script>\n\n<script lang=\"ts\" setup>\n\ndefineOptions({\n  name: 'VaAvatarGroup',\n})\n\nconst props = defineProps({\n  ...useSizeProps,\n  ...useComponentPresetProp,\n  ...VaAvatarProps,\n\n  max: {\n    type: [Number, String],\n    default: 0,\n  },\n  vertical: {\n    type: Boolean,\n    default: false,\n  },\n  options: {\n    type: Array as PropType<Record<string, unknown>[]>,\n    default: () => [],\n  },\n    /** If there are more avatars that can be displayed we show rest number. This prop changes color of rest indicator. */\n  restColor: {\n    type: String,\n    default: 'secondary',\n  },\n})\n\nconst maxComputed = useNumericProp('max')\nconst classComputed = useBem('va-avatar-group', () => ({\n  ...pick(props, ['vertical']),\n}))\n\nconst maxOptions = computed(() => maxComputed.value && maxComputed.value <= props.options.length ? props.options.slice(0, maxComputed.value) : props.options)\nconst restOptionsCount = computed(() => {\n  const hasOptions = props.options.length > 0\n  const canAddMoreOptions = maxOptions.value.length < props.options.length\n  const remainingOptions = props.options.length - (maxComputed.value || 0)\n\n  return hasOptions && canAddMoreOptions ? remainingOptions : 0\n})\nconst { sizeComputed, fontSizeComputed } = useSize(props, 'VaAvatarGroup')\n\nconst filteredAvatarProps = filterComponentProps(VaAvatarProps)\nconst avatarProps = computed(() => ({\n  ...filteredAvatarProps.value,\n  fontSize: fontSizeComputed.value,\n  size: sizeComputed.value,\n}))\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n\n.va-avatar-group {\n  display: flex;\n  flex-wrap: nowrap;\n\n  .va-avatar + .va-avatar {\n    margin-left: var(--va-avatar-group-gap);\n  }\n\n  &--vertical {\n    flex-direction: column;\n\n    .va-avatar + .va-avatar {\n      margin-left: 0;\n      margin-top: var(--va-avatar-group-gap);\n    }\n  }\n}\n</style>\n"],"names":[],"mappings":";;;;;;;;;AAkCA,MAAM,gBAAgB,sBAAsB,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASpD,UAAM,QAAQ;AAwBR,UAAA,cAAc,eAAe,KAAK;AAClC,UAAA,gBAAgB,OAAO,mBAAmB,OAAO;AAAA,MACrD,GAAG,KAAK,OAAO,CAAC,UAAU,CAAC;AAAA,IAC3B,EAAA;AAEF,UAAM,aAAa,SAAS,MAAM,YAAY,SAAS,YAAY,SAAS,MAAM,QAAQ,SAAS,MAAM,QAAQ,MAAM,GAAG,YAAY,KAAK,IAAI,MAAM,OAAO;AACtJ,UAAA,mBAAmB,SAAS,MAAM;AAChC,YAAA,aAAa,MAAM,QAAQ,SAAS;AAC1C,YAAM,oBAAoB,WAAW,MAAM,SAAS,MAAM,QAAQ;AAClE,YAAM,mBAAmB,MAAM,QAAQ,UAAU,YAAY,SAAS;AAE/D,aAAA,cAAc,oBAAoB,mBAAmB;AAAA,IAAA,CAC7D;AACD,UAAM,EAAE,cAAc,iBAAA,IAAqB,QAAQ,OAAO,eAAe;AAEnE,UAAA,sBAAsB,qBAAqB,aAAa;AACxD,UAAA,cAAc,SAAS,OAAO;AAAA,MAClC,GAAG,oBAAoB;AAAA,MACvB,UAAU,iBAAiB;AAAA,MAC3B,MAAM,aAAa;AAAA,IACnB,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;"}