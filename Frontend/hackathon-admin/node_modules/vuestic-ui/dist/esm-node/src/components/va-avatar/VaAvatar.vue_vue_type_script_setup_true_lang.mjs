import { defineComponent, computed, ref, watch, openBlock, createElementBlock, normalizeClass, unref, normalizeStyle, createBlock, renderSlot, normalizeProps, mergeProps, createVNode } from "vue";
import { p as pick } from "../../../vendor.mjs";
import { V as VaProgressCircle } from "../va-progress-circle/index.mjs";
import { V as VaFallback } from "../va-fallback/index.mjs";
import { V as VaIcon } from "../va-icon/index.mjs";
import { e as extractComponentProps } from "../../utils/component-options/extract-component-options.mjs";
import { u as useLoadingProps } from "../../composables/useLoading.mjs";
import { u as useSizeProps, a as useSize } from "../../composables/useSize.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.mjs";
import { u as useColors } from "../../composables/useColors.mjs";
import { u as useTextColor } from "../../composables/useTextColor.mjs";
import { u as useBem } from "../../composables/useBem.mjs";
import { f as filterComponentProps } from "../../utils/component-options/filter-props.mjs";
const _hoisted_1 = ["src", "alt"];
const VaFallbackPropsDeclaration = extractComponentProps(VaFallback);
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaAvatar"
  },
  __name: "VaAvatar",
  props: {
    ...useLoadingProps,
    ...useSizeProps,
    ...useComponentPresetProp,
    ...VaFallbackPropsDeclaration,
    color: { type: String, default: "primary" },
    textColor: { type: String },
    square: { type: Boolean, default: false },
    fontSize: { type: String, default: "" },
    src: { type: String, default: null },
    icon: { type: String, default: "" },
    alt: { type: String, default: "" }
  },
  emits: ["error", "fallback"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const { getColor } = useColors();
    const colorComputed = computed(() => getColor(props.color));
    const backgroundColorComputed = computed(() => {
      if (props.loading || props.src && !hasLoadError.value) {
        return void 0;
      }
      return colorComputed.value;
    });
    const { sizeComputed, fontSizeComputed } = useSize(props, "VaAvatar");
    const { textColorComputed } = useTextColor(backgroundColorComputed);
    const computedStyle = computed(() => ({
      fontSize: props.fontSize || fontSizeComputed.value
    }));
    const classesComputed = useBem("va-avatar", () => ({
      ...pick(props, ["square"])
    }));
    const hasLoadError = ref(false);
    const onLoadError = (event) => {
      hasLoadError.value = true;
      emit("error", event);
    };
    watch(() => props.src, () => {
      hasLoadError.value = false;
    });
    const avatarOptions = computed(() => ({
      hasError: hasLoadError.value,
      onError: onLoadError
    }));
    const VaFallbackProps = filterComponentProps(VaFallbackPropsDeclaration);
    __expose({
      hasLoadError
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(["va-avatar", unref(classesComputed)]),
        style: normalizeStyle([computedStyle.value, `--va-background-color-computed: ${String(backgroundColorComputed.value)};--va-text-color-computed: ${String(unref(textColorComputed))};--va-size-computed: ${String(unref(sizeComputed))}`])
      }, [
        _ctx.$props.loading ? (openBlock(), createBlock(unref(VaProgressCircle), {
          key: 0,
          size: unref(sizeComputed),
          color: colorComputed.value,
          indeterminate: ""
        }, null, 8, ["size", "color"])) : renderSlot(_ctx.$slots, "default", normalizeProps(mergeProps({ key: 1 }, avatarOptions.value)), () => [
          _ctx.$props.src && !hasLoadError.value ? (openBlock(), createElementBlock("img", {
            key: 0,
            src: _ctx.$props.src,
            alt: _ctx.$props.alt,
            onError: onLoadError
          }, null, 40, _hoisted_1)) : hasLoadError.value && _ctx.$props.src ? renderSlot(_ctx.$slots, "fallback", { key: 1 }, () => [
            createVNode(unref(VaFallback), mergeProps(unref(VaFallbackProps), {
              onFallback: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("fallback"))
            }), null, 16)
          ]) : _ctx.$props.icon ? (openBlock(), createBlock(unref(VaIcon), {
            key: 2,
            name: _ctx.$props.icon
          }, null, 8, ["name"])) : renderSlot(_ctx.$slots, "fallback", { key: 3 }, () => [
            createVNode(unref(VaFallback), mergeProps(unref(VaFallbackProps), {
              onFallback: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("fallback"))
            }), null, 16)
          ])
        ])
      ], 6);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaAvatar.vue_vue_type_script_setup_true_lang.mjs.map
