import { defineComponent, computed, openBlock, createBlock, resolveDynamicComponent, unref, normalizeClass, withCtx, renderSlot, createTextVNode, toDisplayString } from "vue";
import { u as useRouterLinkProps, a as useRouterLink } from "../../../composables/useRouterLink.mjs";
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaBreadcrumbsItem"
  },
  __name: "VaBreadcrumbsItem",
  props: {
    ...useRouterLinkProps,
    disabled: { type: Boolean, default: false },
    label: { type: String, default: "" }
  },
  setup(__props) {
    const props = __props;
    const { tagComputed, hrefComputed, isLinkTag } = useRouterLink(props);
    const classComputed = computed(() => ({
      "va-breadcrumb-item--link": isLinkTag.value
    }));
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(unref(tagComputed)), {
        class: normalizeClass(["va-breadcrumb-item", classComputed.value]),
        "active-class": _ctx.$props.activeClass,
        href: unref(hrefComputed),
        to: _ctx.$props.to,
        target: _ctx.$props.target,
        replace: _ctx.$props.replace,
        append: _ctx.$props.append,
        exact: _ctx.$props.exact,
        "exact-active-class": _ctx.$props.exactActiveClass
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default", {}, () => [
            createTextVNode(toDisplayString(__props.label), 1)
          ])
        ]),
        _: 3
      }, 8, ["class", "active-class", "href", "to", "target", "replace", "append", "exact", "exact-active-class"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaBreadcrumbsItem.vue_vue_type_script_setup_true_lang.mjs.map
