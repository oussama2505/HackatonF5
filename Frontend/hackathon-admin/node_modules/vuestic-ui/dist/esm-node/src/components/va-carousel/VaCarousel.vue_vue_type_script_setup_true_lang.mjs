import { defineComponent, computed, shallowRef, openBlock, createElementBlock, normalizeClass, normalizeStyle, unref, Fragment, withKeys, withModifiers, renderSlot, createVNode, withCtx, createCommentVNode, renderList, mergeProps, normalizeProps, guardReactiveProps, createTextVNode, toDisplayString, createElementVNode } from "vue";
import { u as useCarousel } from "./hooks/useCarousel.mjs";
import { u as useCarouselAnimation } from "./hooks/useCarouselAnimation.mjs";
import { u as useCarouselColor } from "./hooks/useCarouselColors.mjs";
import { V as VaImage } from "../va-image/index.mjs";
import { V as VaButton } from "../va-button/index.mjs";
import { V as VaHover } from "../va-hover/index.mjs";
import { u as useSwipeProps, a as useSwipe } from "../../composables/useSwipe.mjs";
import { e as extractComponentProps } from "../../utils/component-options/extract-component-options.mjs";
import { u as useStatefulProps, a as useStatefulEmits, b as useStateful } from "../../composables/useStateful.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.mjs";
import { a as useTranslationProp, u as useTranslation } from "../../composables/useTranslation.mjs";
import { u as useNumericProp } from "../../composables/useNumericProp.mjs";
import { f as filterComponentProps } from "../../utils/component-options/filter-props.mjs";
const _hoisted_1 = ["aria-label"];
const _hoisted_2 = {
  key: 1,
  class: "va-carousel__indicators"
};
const _hoisted_3 = { class: "va-carousel__content" };
const _hoisted_4 = ["aria-hidden", "aria-current", "aria-label"];
const VaImageProps = extractComponentProps(VaImage, ["src", "alt"]);
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaCarousel"
  },
  __name: "VaCarousel",
  props: {
    ...useSwipeProps,
    ...useStatefulProps,
    ...useComponentPresetProp,
    ...VaImageProps,
    stateful: { type: Boolean, default: true },
    modelValue: { type: Number, default: 0 },
    items: { type: Array, required: true },
    // Animations
    autoscroll: { type: Boolean, default: false },
    autoscrollInterval: { type: [Number, String], default: 5e3 },
    autoscrollPauseDuration: { type: [Number, String], default: 2e3 },
    infinite: { type: Boolean, default: true },
    fadeKeyframe: { type: String, default: "va-carousel-fade-appear 1s" },
    // Visual
    arrows: { type: Boolean, default: true },
    indicators: { type: Boolean, default: true },
    indicatorTrigger: {
      type: String,
      default: "click",
      validator: (value) => ["click", "hover", "none"].includes(value)
    },
    vertical: { type: Boolean, default: false },
    height: { type: String, default: "300px" },
    effect: {
      type: String,
      default: "transition",
      validator: (value) => ["fade", "transition"].includes(value)
    },
    color: { type: String, default: "primary" },
    ratio: { type: [Number, String] },
    ariaLabel: useTranslationProp("$t:carousel"),
    ariaPreviousLabel: useTranslationProp("$t:goPreviousSlide"),
    ariaNextLabel: useTranslationProp("$t:goNextSlide"),
    ariaGoToSlideLabel: useTranslationProp("$t:goSlide"),
    ariaSlideOfLabel: useTranslationProp("$t:slideOf")
  },
  emits: [...useStatefulEmits],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const { valueComputed: currentSlide } = useStateful(props, emit, "modelValue");
    const autoscrollIntervalComputed = useNumericProp("autoscrollInterval");
    const autoscrollPauseDurationComputed = useNumericProp("autoscrollPauseDuration");
    const ratioComputed = useNumericProp("ratio");
    const {
      goTo,
      next,
      prev,
      doShowNextButton,
      doShowPrevButton,
      doShowDirectionButtons
    } = useCarousel(props, currentSlide);
    const { withPause, computedSlidesStyle, slides } = useCarouselAnimation({
      items: props.items,
      autoscrollInterval: autoscrollIntervalComputed.value,
      autoscrollPauseDuration: autoscrollPauseDurationComputed.value,
      autoscroll: props.autoscroll,
      infinite: props.infinite,
      effect: props.effect,
      vertical: props.vertical,
      fadeKeyframe: props.fadeKeyframe
    }, currentSlide);
    const isObjectSlides = computed(() => {
      return props.items.length && props.items.every((el) => !!el && typeof el === "object" && !!(el == null ? void 0 : el.src));
    });
    const isCurrentSlide = (index) => index === currentSlide.value;
    const slideStyleComputed = computed(() => ({
      animation: props.effect === "fade" ? "fadeKeyframe" : void 0
    }));
    const slidesContainer = shallowRef();
    const onSwipe = (state) => {
      switch (state.direction) {
        case "right":
        case "up":
          doShowPrevButton.value && prev();
          break;
        case "left":
        case "down":
          doShowNextButton.value && next();
      }
    };
    useSwipe(props, slidesContainer, onSwipe);
    const getIndicatorEvents = (index) => {
      if (props.indicatorTrigger === "hover") {
        return { onmouseover: () => goTo(index) };
      }
      if (props.indicatorTrigger === "click") {
        return { onclick: () => goTo(index) };
      }
      return {};
    };
    const { tp, t } = useTranslation();
    const {
      computedActiveColor,
      computedColor,
      computedHoverColor
    } = useCarouselColor();
    const vaImageProps = filterComponentProps(VaImageProps);
    const goToWithPause = withPause(goTo);
    const prevWithPause = withPause(prev);
    const nextWithPause = withPause(next);
    __expose({
      currentSlide,
      goTo,
      next,
      prev,
      goToWithPause,
      prevWithPause,
      nextWithPause
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(["va-carousel", {
          "va-carousel--vertical": _ctx.$props.vertical,
          [`va-carousel--${_ctx.$props.effect}`]: true
        }]),
        style: normalizeStyle({ height: unref(ratioComputed) ? "auto" : __props.height }),
        role: "region",
        "aria-label": unref(tp)(_ctx.$props.ariaLabel)
      }, [
        _ctx.$props.arrows && unref(doShowDirectionButtons) ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
          unref(doShowPrevButton) ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: "va-carousel__arrow va-carousel__arrow--left",
            onClick: _cache[0] || (_cache[0] = //@ts-ignore
            (...args) => unref(prevWithPause) && unref(prevWithPause)(...args)),
            onKeydown: _cache[1] || (_cache[1] = withKeys(withModifiers(
              //@ts-ignore
              (...args) => unref(prevWithPause) && unref(prevWithPause)(...args),
              ["stop"]
            ), ["enter"]))
          }, [
            renderSlot(_ctx.$slots, "prev-arrow", {}, () => [
              createVNode(unref(VaHover), { stateful: "" }, {
                default: withCtx(({ hover }) => [
                  createVNode(unref(VaButton), {
                    color: hover ? unref(computedHoverColor) : unref(computedColor),
                    icon: __props.vertical ? "va-arrow-up" : "va-arrow-left",
                    "aria-label": unref(tp)(_ctx.$props.ariaPreviousLabel)
                  }, null, 8, ["color", "icon", "aria-label"])
                ]),
                _: 1
              })
            ])
          ], 32)) : createCommentVNode("", true),
          unref(doShowNextButton) ? (openBlock(), createElementBlock("div", {
            key: 1,
            class: "va-carousel__arrow va-carousel__arrow--right",
            onClick: _cache[2] || (_cache[2] = //@ts-ignore
            (...args) => unref(nextWithPause) && unref(nextWithPause)(...args)),
            onKeydown: _cache[3] || (_cache[3] = withKeys(withModifiers(
              //@ts-ignore
              (...args) => unref(nextWithPause) && unref(nextWithPause)(...args),
              ["stop"]
            ), ["enter"]))
          }, [
            renderSlot(_ctx.$slots, "next-arrow", {}, () => [
              createVNode(unref(VaHover), { stateful: "" }, {
                default: withCtx(({ hover }) => [
                  createVNode(unref(VaButton), {
                    color: hover ? unref(computedHoverColor) : unref(computedColor),
                    icon: __props.vertical ? "va-arrow-down" : "va-arrow-right",
                    "aria-label": unref(tp)(_ctx.$props.ariaNextLabel)
                  }, null, 8, ["color", "icon", "aria-label"])
                ]),
                _: 1
              })
            ])
          ], 32)) : createCommentVNode("", true)
        ], 64)) : createCommentVNode("", true),
        _ctx.$props.indicators ? (openBlock(), createElementBlock("div", _hoisted_2, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$props.items, (item, index) => {
            return openBlock(), createElementBlock("div", mergeProps({
              class: ["va-carousel__indicator", { "va-carousel__indicator--active": isCurrentSlide(index) }],
              key: index
            }, getIndicatorEvents(index)), [
              renderSlot(_ctx.$slots, "indicator", normalizeProps(guardReactiveProps({ item, index, goTo: unref(goToWithPause), isActive: isCurrentSlide(index) })), () => [
                createVNode(unref(VaHover), { stateful: "" }, {
                  default: withCtx(({ hover }) => [
                    createVNode(unref(VaButton), {
                      "aria-label": unref(tp)(_ctx.$props.ariaGoToSlideLabel, { index: index + 1 }),
                      round: "",
                      color: isCurrentSlide(index) ? unref(computedActiveColor) : hover ? unref(computedHoverColor) : unref(computedColor)
                    }, {
                      default: withCtx(() => [
                        createTextVNode(toDisplayString(index + 1), 1)
                      ]),
                      _: 2
                    }, 1032, ["aria-label", "color"])
                  ]),
                  _: 2
                }, 1024)
              ])
            ], 16);
          }), 128))
        ])) : createCommentVNode("", true),
        createElementVNode("div", _hoisted_3, [
          createElementVNode("div", {
            ref_key: "slidesContainer",
            ref: slidesContainer,
            class: "va-carousel__slides",
            style: normalizeStyle(unref(computedSlidesStyle)),
            role: "list"
          }, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(slides), (item, index) => {
              return openBlock(), createElementBlock("div", {
                key: item,
                role: "listitem",
                class: "va-carousel__slide",
                style: normalizeStyle(slideStyleComputed.value),
                "aria-hidden": !isCurrentSlide(index),
                "aria-current": isCurrentSlide(index),
                "aria-label": unref(tp)(_ctx.$props.ariaSlideOfLabel, { index: index + 1, length: unref(slides).length })
              }, [
                renderSlot(_ctx.$slots, "default", normalizeProps(guardReactiveProps({ item, index, goTo: unref(goToWithPause), isActive: isCurrentSlide(index) })), () => [
                  createVNode(unref(VaImage), mergeProps(unref(vaImageProps), {
                    src: isObjectSlides.value ? item.src : item,
                    alt: isObjectSlides.value ? item.alt : "",
                    draggable: false
                  }), null, 16, ["src", "alt"])
                ])
              ], 12, _hoisted_4);
            }), 128))
          ], 4)
        ])
      ], 14, _hoisted_1);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaCarousel.vue_vue_type_script_setup_true_lang.mjs.map
