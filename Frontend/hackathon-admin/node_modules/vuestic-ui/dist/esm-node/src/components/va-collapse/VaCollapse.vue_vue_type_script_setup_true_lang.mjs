import { defineComponent, shallowRef, computed, ref, watch, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, withKeys, renderSlot, normalizeProps, guardReactiveProps, mergeProps, createBlock, createCommentVNode, toDisplayString, createVNode, normalizeStyle } from "vue";
import { i as isNil, p as pick } from "../../../vendor.mjs";
import { a as useAccordionItem } from "../va-accordion/hooks/useAccordion.mjs";
import { u as useComponentUuid } from "../../composables/useComponentUuid.mjs";
import { V as VaIcon } from "../va-icon/index.mjs";
import { a as useSelectableEmits } from "../../composables/useSelectable.mjs";
import { u as useResizeObserver } from "../../composables/useResizeObserver.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.mjs";
import { u as useStatefulProps, b as useStateful } from "../../composables/useStateful.mjs";
import { u as useColors } from "../../composables/useColors.mjs";
import { u as useBem } from "../../composables/useBem.mjs";
import { u as useTextColor } from "../../composables/useTextColor.mjs";
const _hoisted_1 = { class: "va-collapse__header__text" };
const _hoisted_2 = ["id", "aria-labelledby"];
const _hoisted_3 = { class: "va-collapse__content" };
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaCollapse"
  },
  __name: "VaCollapse",
  props: {
    ...useComponentPresetProp,
    ...useStatefulProps,
    modelValue: { type: Boolean, default: false },
    disabled: { type: Boolean, default: false },
    header: { type: String, default: "" },
    icon: { type: String, default: "" },
    color: { type: String, default: void 0 },
    bodyColor: { type: String, default: void 0 },
    textColor: { type: String, default: "" },
    bodyTextColor: { type: String, default: "" },
    iconColor: { type: String, default: "secondary" },
    colorAll: { type: Boolean, default: false },
    stateful: { type: Boolean, default: true }
  },
  emits: ["update:modelValue", ...useSelectableEmits],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const body = shallowRef();
    const { valueComputed } = useStateful(props, emit, "modelValue");
    const { getColor, getTextColor, setHSLAColor } = useColors();
    const { accordionProps, accordionItemValue } = useAccordionItem();
    const computedModelValue = computed({
      get() {
        if (valueComputed.userProvided) {
          return valueComputed.value;
        }
        if (!isNil(accordionItemValue)) {
          return accordionItemValue.value;
        }
        return valueComputed.value;
      },
      set(v) {
        if (!isNil(accordionItemValue)) {
          accordionItemValue.value = v;
        }
        valueComputed.value = v;
      }
    });
    if (valueComputed.userProvided && !isNil(accordionItemValue)) {
      accordionItemValue.value = valueComputed.value;
    }
    const bodyHeight = ref();
    useResizeObserver([body], ([body2]) => {
      bodyHeight.value = body2.contentRect.height ?? 0;
    });
    const height = computed(() => computedModelValue.value ? bodyHeight.value : 0);
    const getTransition = () => {
      const duration = height.value / 1e3 * 0.2;
      return `${duration > 0.2 ? duration : 0.2}s`;
    };
    const contentBackground = computed(() => {
      if (props.bodyColor) {
        return getColor(props.bodyColor);
      }
      return props.color && props.colorAll ? setHSLAColor(getColor(props.color), { a: 0.07 }) : void 0;
    });
    const headerBackground = computed(() => {
      return props.color ? getColor(props.color) : void 0;
    });
    const uniqueId = useComponentUuid();
    const headerIdComputed = computed(() => `header-${uniqueId}`);
    const panelIdComputed = computed(() => `panel-${uniqueId}`);
    const tabIndexComputed = computed(() => props.disabled ? -1 : 0);
    const headerAttributes = computed(() => ({
      id: headerIdComputed.value,
      tabindex: tabIndexComputed.value,
      "aria-controls": panelIdComputed.value,
      "aria-expanded": computedModelValue.value,
      "aria-disabled": props.disabled,
      role: "button"
    }));
    const isHeightChanging = ref(false);
    watch(height, (newValue, oldValue) => {
      if (oldValue === void 0) {
        return;
      }
      if (isHeightChanging.value === true) {
        return;
      }
      isHeightChanging.value = true;
    });
    const onTransitionEnd = (e) => {
      if (e.propertyName === "height" && e.target === e.currentTarget) {
        isHeightChanging.value = false;
      }
    };
    const computedClasses = useBem("va-collapse", () => ({
      ...pick(props, ["disabled"]),
      expanded: computedModelValue.value,
      active: computedModelValue.value,
      popout: !!(accordionProps.value.popout && computedModelValue.value),
      inset: !!(accordionProps.value.inset && computedModelValue.value),
      "height-changing": isHeightChanging.value,
      "colored-body": Boolean(contentBackground.value),
      "colored-header": Boolean(headerBackground.value)
    }));
    const toggle = () => {
      if (props.disabled) {
        return;
      }
      computedModelValue.value = !computedModelValue.value;
    };
    const { textColorComputed } = useTextColor(headerBackground);
    const headerStyle = computed(() => ({
      color: textColorComputed.value,
      backgroundColor: headerBackground.value
    }));
    const doRenderBody = computed(() => {
      if (computedModelValue.value) {
        return true;
      }
      if (isHeightChanging.value) {
        return true;
      }
      return false;
    });
    const contentStyle = computed(() => {
      return {
        height: `${height.value}px`,
        transitionDuration: getTransition(),
        background: computedModelValue.value ? contentBackground.value : "",
        color: props.bodyTextColor ? getColor(props.bodyTextColor) : contentBackground.value ? getColor(getTextColor(contentBackground.value)) : "currentColor"
      };
    });
    __expose({
      toggle
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(["va-collapse", unref(computedClasses)])
      }, [
        createElementVNode("div", {
          class: "va-collapse__header-wrapper",
          onClick: toggle,
          onKeydown: [
            withKeys(toggle, ["enter"]),
            withKeys(toggle, ["space"])
          ]
        }, [
          renderSlot(_ctx.$slots, "header", normalizeProps(guardReactiveProps({
            value: computedModelValue.value,
            bind: headerAttributes.value,
            attributes: headerAttributes.value,
            attrs: headerAttributes.value,
            iconAttrs: {
              class: [
                "va-collapse__expand-icon",
                computedModelValue.value ? "a-collapse__expand-icon--expanded" : "a-collapse__expand-icon--collapsed"
              ]
            },
            text: __props.header
          })), () => [
            createElementVNode("div", mergeProps(headerAttributes.value, {
              class: "va-collapse__header",
              style: headerStyle.value
            }), [
              __props.icon ? (openBlock(), createBlock(unref(VaIcon), {
                key: 0,
                class: "va-collapse__header__icon",
                name: __props.icon
              }, null, 8, ["name"])) : createCommentVNode("", true),
              renderSlot(_ctx.$slots, "header-content", normalizeProps(guardReactiveProps({ header: __props.header })), () => [
                createElementVNode("div", _hoisted_1, toDisplayString(__props.header), 1)
              ]),
              renderSlot(_ctx.$slots, "expand-icon", {}, () => [
                createVNode(unref(VaIcon), {
                  class: normalizeClass(["va-collapse__expand-icon", computedModelValue.value ? "va-collapse__expand-icon--expanded" : "va-collapse__expand-icon--collapsed"]),
                  name: "va-arrow-down"
                }, null, 8, ["class"])
              ])
            ], 16)
          ])
        ], 32),
        createElementVNode("div", {
          class: normalizeClass(["va-collapse__body-wrapper", {
            "va-collapse__body-wrapper--bordered": !_ctx.$slots.body && !_ctx.$slots.header
          }]),
          style: normalizeStyle(contentStyle.value),
          onTransitionend: onTransitionEnd
        }, [
          doRenderBody.value ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: "va-collapse__body",
            ref_key: "body",
            ref: body,
            role: "region",
            id: panelIdComputed.value,
            "aria-labelledby": headerIdComputed.value
          }, [
            renderSlot(_ctx.$slots, "body", {}, () => [
              createElementVNode("div", _hoisted_3, [
                renderSlot(_ctx.$slots, "default", {}, () => [
                  renderSlot(_ctx.$slots, "content")
                ])
              ])
            ])
          ], 8, _hoisted_2)) : createCommentVNode("", true)
        ], 38)
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaCollapse.vue_vue_type_script_setup_true_lang.mjs.map
