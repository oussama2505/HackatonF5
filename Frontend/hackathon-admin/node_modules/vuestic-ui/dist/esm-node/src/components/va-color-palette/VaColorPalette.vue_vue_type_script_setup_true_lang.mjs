import { defineComponent, openBlock, createElementBlock, unref, Fragment, renderList, createBlock } from "vue";
import { V as VaColorIndicator } from "../va-color-indicator/index.mjs";
import { u as useStatefulProps, a as useStatefulEmits, b as useStateful } from "../../composables/useStateful.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.mjs";
import { a as useTranslationProp, u as useTranslation } from "../../composables/useTranslation.mjs";
const _hoisted_1 = ["aria-label"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaColorPalette"
  },
  __name: "VaColorPalette",
  props: {
    ...useStatefulProps,
    ...useComponentPresetProp,
    modelValue: { type: String, default: null },
    palette: { type: Array, default: () => [] },
    indicator: {
      type: String,
      default: "dot",
      validator: (value) => ["dot", "square"].includes(value)
    },
    ariaLabel: useTranslationProp("$t:colorSelection"),
    ariaIndicatorLabel: useTranslationProp("$t:color")
  },
  emits: [...useStatefulEmits],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const { valueComputed } = useStateful(props, emit);
    const isSelected = (color) => valueComputed.value === color;
    const { tp } = useTranslation();
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("ul", {
        class: "va-color-palette",
        role: "listbox",
        "aria-label": unref(tp)(_ctx.$props.ariaLabel)
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(__props.palette, (color, index) => {
          return openBlock(), createBlock(unref(VaColorIndicator), {
            key: index,
            role: "option",
            "aria-label": unref(tp)(_ctx.$props.ariaIndicatorLabel, { color }),
            "aria-selected": isSelected(color),
            tabindex: "0",
            modelValue: isSelected(color),
            color,
            square: __props.indicator === "square",
            "onUpdate:modelValue": ($event) => valueComputed.value = color
          }, null, 8, ["aria-label", "aria-selected", "modelValue", "color", "square", "onUpdate:modelValue"]);
        }), 128))
      ], 8, _hoisted_1);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaColorPalette.vue_vue_type_script_setup_true_lang.mjs.map
