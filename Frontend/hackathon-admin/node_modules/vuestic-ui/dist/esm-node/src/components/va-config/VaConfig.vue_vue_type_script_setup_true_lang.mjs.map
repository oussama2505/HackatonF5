{"version":3,"file":"VaConfig.vue_vue_type_script_setup_true_lang.mjs","sources":["../../../../../src/components/va-config/VaConfig.vue"],"sourcesContent":["<template>\n  <CssVarsRenderer v-if=\"doRenderCssVars\" v-bind=\"$attrs\">\n    <slot />\n  </CssVarsRenderer>\n  <slot v-else />\n</template>\n\n<script lang=\"ts\">\nimport { computed, PropType, h, Fragment, defineComponent } from 'vue'\nimport { useComponentPresetProp } from '../../composables/useComponentPreset'\nimport { ComponentConfig } from '../../services/component-config'\n\nimport { provideLocalConfig, useLocalConfig } from '../../composables/useLocalConfig'\nimport { useGlobalConfigProvider } from './hooks/useGlobalConfigProvider'\nimport { PartialGlobalConfig } from '../../services/global-config'\nimport { renderSlotNodes } from '../../utils/headless'\nimport { useColors } from '../../composables'\n\nconst CssVarsRenderer = defineComponent({\n  name: 'VaCssVarsRenderer',\n\n  inheritAttrs: false,\n\n  setup (props, { slots, attrs }) {\n    const { colorsToCSSVariable, colors } = useColors()\n\n    const style = computed(() => {\n      return colorsToCSSVariable(colors)\n    })\n\n    return () => h(Fragment, attrs, renderSlotNodes(slots.default, {}, {\n      style: style.value,\n    }) || undefined)\n  },\n})\n</script>\n\n<script lang=\"ts\" setup>\n\ndefineOptions({\n  name: 'VaConfig',\n  inheritAttrs: false,\n})\n\nconst props = defineProps({\n  ...useComponentPresetProp,\n  components: { type: Object as PropType<ComponentConfig>, default: () => ({}) },\n  colors: { type: Object as PropType<PartialGlobalConfig['colors']> },\n  i18n: { type: Object as PropType<PartialGlobalConfig['i18n']> },\n})\n\nconst prevChain = useLocalConfig()\n// We want it to be an array and not a merged object for optimization purposes\nconst nextChain = computed(() => [...prevChain.value, props.components])\n\nprovideLocalConfig(nextChain)\n\nconst newConfig = useGlobalConfigProvider(computed(() => {\n  const config = {} as any\n\n  if (props.colors) {\n    config.colors = props.colors\n  }\n\n  if (props.i18n) {\n    config.i18n = props.i18n\n  }\n\n  return config\n}))\n\nconst doRenderCssVars = computed(() => {\n  return Boolean(props.colors)\n})\n</script>\n"],"names":[],"mappings":";;;;;;AAkBA,MAAM,kBAAkB,gBAAgB;AAAA,EACtC,MAAM;AAAA,EAEN,cAAc;AAAA,EAEd,MAAO,OAAO,EAAE,OAAO,SAAS;AAC9B,UAAM,EAAE,qBAAqB,OAAO,IAAI,UAAU;AAE5C,UAAA,QAAQ,SAAS,MAAM;AAC3B,aAAO,oBAAoB,MAAM;AAAA,IAAA,CAClC;AAEM,WAAA,MAAM,EAAE,UAAU,OAAO,gBAAgB,MAAM,SAAS,IAAI;AAAA,MACjE,OAAO,MAAM;AAAA,IAAA,CACd,KAAK,MAAS;AAAA,EACjB;AACF,CAAC;;;;;;;;;;;;;;AAUD,UAAM,QAAQ;AAOd,UAAM,YAAY;AAEZ,UAAA,YAAY,SAAS,MAAM,CAAC,GAAG,UAAU,OAAO,MAAM,UAAU,CAAC;AAEvE,uBAAmB,SAAS;AAEV,4BAAwB,SAAS,MAAM;AACvD,YAAM,SAAS,CAAA;AAEf,UAAI,MAAM,QAAQ;AAChB,eAAO,SAAS,MAAM;AAAA,MACxB;AAEA,UAAI,MAAM,MAAM;AACd,eAAO,OAAO,MAAM;AAAA,MACtB;AAEO,aAAA;AAAA,IAAA,CACR,CAAC;AAEI,UAAA,kBAAkB,SAAS,MAAM;AAC9B,aAAA,QAAQ,MAAM,MAAM;AAAA,IAAA,CAC5B;;;;;;;;;;;"}