import { defineComponent, computed, useAttrs, openBlock, createBlock, unref, mergeProps, withCtx, createVNode, normalizeStyle, createElementBlock, createCommentVNode, createElementVNode, renderSlot, normalizeProps, guardReactiveProps, normalizeClass, createSlots, renderList, TransitionGroup, Fragment, withModifiers, toDisplayString, createTextVNode } from "vue";
import { p as pick, o as omit } from "../../../vendor.mjs";
import { u as useColumnsProps, a as useColumns } from "./hooks/useColumns.mjs";
import { u as usePaginatedRowsProps, a as usePaginatedRows } from "./hooks/usePaginatedRows.mjs";
import { u as useSelectableProps, a as useSelectableRow } from "./hooks/useSelectableRow.mjs";
import { u as useStylableProps, a as useStylable } from "./hooks/useStylable.mjs";
import { u as useBindingProps, a as useBinding } from "./hooks/useBinding.mjs";
import { u as useAnimationNameProps, a as useAnimationName } from "./hooks/useAnimationName.mjs";
import { c as createRowsProps, u as useRows } from "./hooks/useRows.mjs";
import { u as useFilterableProps, a as useFilterable } from "./hooks/useFilterable.mjs";
import { u as useSortableProps, a as useSortable } from "./hooks/useSortable.mjs";
import { u as useTableScrollProps, a as useTableScrollEmits, b as useTableScroll } from "./hooks/useTableScroll.mjs";
import { V as VaDataTableThRow } from "./components/index.mjs";
import { V as VaVirtualScroller } from "../va-virtual-scroller/index.mjs";
import { V as VaInnerLoading } from "../va-inner-loading/index.mjs";
import { V as VaCheckbox } from "../va-checkbox/index.mjs";
import { e as extractComponentProps } from "../../utils/component-options/extract-component-options.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.mjs";
import { u as useThrottleProps } from "../../composables/useThrottle.mjs";
import { a as useTranslationProp, u as useTranslation } from "../../composables/useTranslation.mjs";
import { f as filterComponentProps } from "../../utils/component-options/filter-props.mjs";
const _hoisted_1 = { key: 0 };
const _hoisted_2 = {
  ref: "list",
  class: "va-data-table__table-tbody"
};
const _hoisted_3 = {
  key: "showNoDataHtml",
  class: "va-data-table__table-tr"
};
const _hoisted_4 = {
  class: "va-data-table__table-td no-data",
  colspan: "99999"
};
const _hoisted_5 = ["innerHTML"];
const _hoisted_6 = {
  key: "showNoDataFilteredHtml",
  class: "va-data-table__table-tr"
};
const _hoisted_7 = {
  class: "va-data-table__table-td no-data",
  colspan: "99999"
};
const _hoisted_8 = ["innerHTML"];
const _hoisted_9 = ["onClick", "onDblclick", "onContextmenu"];
const _hoisted_10 = {
  key: 0,
  class: "va-data-table__grid-column-header"
};
const _hoisted_11 = {
  key: 0,
  class: "va-data-table__table-tr"
};
const VaVirtualScrollerProps = extractComponentProps(VaVirtualScroller, ["items", "trackBy", "horizontal", "disabled", "table"]);
const VaDataTableThRowProps = extractComponentProps(VaDataTableThRow);
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaDataTable",
    inheritAttrs: false
  },
  __name: "VaDataTable",
  props: {
    ...useComponentPresetProp,
    ...VaVirtualScrollerProps,
    ...useAnimationNameProps,
    ...useBindingProps,
    ...useTableScrollProps,
    ...useSortableProps,
    ...useStylableProps,
    ...useColumnsProps,
    ...useFilterableProps,
    ...usePaginatedRowsProps,
    ...createRowsProps(),
    ...useSelectableProps,
    ...useThrottleProps,
    ...pick(VaDataTableThRowProps, ["ariaSelectAllRowsLabel", "ariaSortColumnByLabel"]),
    hoverable: { type: Boolean, default: false },
    clickable: { type: Boolean, default: false },
    loading: { type: Boolean, default: false },
    loadingColor: { type: String, default: "primary" },
    noDataHtml: { type: String, default: "No items" },
    noDataFilteredHtml: { type: String, default: "No items match the provided filtering condition" },
    hideDefaultHeader: { type: Boolean, default: false },
    footerClone: { type: Boolean, default: false },
    striped: { type: Boolean, default: false },
    virtualScroller: { type: Boolean, default: false },
    virtualTrackBy: { type: [String, Number], default: "initialIndex" },
    grid: { type: Boolean, default: false },
    gridColumns: { type: [Number, String], default: 0 },
    wrapperSize: { type: [Number, String], default: "auto" },
    ariaSelectRowLabel: useTranslationProp("$t:selectRowByIndex")
  },
  emits: [
    "update:modelValue",
    // `modelValue` is selectedItems
    "update:sortBy",
    "update:sortingOrder",
    "filtered",
    "sorted",
    "selectionChange",
    "row:click",
    "row:dblclick",
    "row:contextmenu",
    "columnSorted",
    ...useTableScrollEmits
  ],
  setup(__props, { emit: __emit }) {
    const { tp } = useTranslation();
    const props = __props;
    const emit = __emit;
    const { columnsComputed } = useColumns(props);
    const { rowsComputed } = useRows(columnsComputed, props);
    const { filteredRows } = useFilterable(rowsComputed, props, emit);
    const {
      sortBySync,
      sortingOrderSync,
      toggleSorting,
      sortedRows,
      sortingOrderIconName
    } = useSortable(columnsComputed, filteredRows, props, emit);
    const { paginatedRows } = usePaginatedRows(sortedRows, props);
    const {
      ctrlSelectRow,
      shiftSelectRows,
      toggleBulkSelection,
      isRowSelected,
      severalRowsSelected,
      allRowsSelected,
      toggleRowSelection
    } = useSelectableRow(paginatedRows, props, emit);
    const {
      CSSVariables,
      getCellCSSVariables,
      getClass,
      getStyle
    } = useStylable(props);
    const { getRowBind, getCellBind } = useBinding(props);
    const animationName = useAnimationName(props, paginatedRows);
    const showNoDataHtml = computed(() => props.items.length === 0);
    const showNoDataFilteredHtml = computed(() => paginatedRows.value.length === 0);
    const onRowClickHandler = (name, event, row) => {
      emit(name, {
        event,
        item: row.source,
        itemIndex: row.initialIndex,
        row
      });
      if (props.selectable && props.grid) {
        toggleRowSelection(row);
      }
    };
    const computedTableAttributes = computed(() => ({
      ...omit(attrs, ["class", "style"]),
      class: pick(props, ["striped", "selectable", "hoverable", "clickable"])
    }));
    const filteredVirtualScrollerProps = filterComponentProps(VaVirtualScrollerProps);
    const virtualScrollerPropsComputed = computed(() => ({
      ...filteredVirtualScrollerProps.value,
      items: paginatedRows.value,
      trackBy: props.virtualTrackBy,
      disabled: !props.virtualScroller,
      table: true
    }));
    const attrs = useAttrs();
    const computedAttributes = computed(() => ({
      class: [
        { "va-data-table--sticky": props.stickyHeader || props.stickyFooter },
        { "va-data-table--scroll": !!props.height },
        { "va-data-table--virtual-scroller": isVirtualScroll.value },
        { "va-data-table--grid": props.grid },
        attrs.class
      ],
      style: [attrs.style],
      ...virtualScrollerPropsComputed.value
    }));
    const filteredThProps = filterComponentProps(VaDataTableThRowProps);
    const thAttributesComputed = computed(() => ({
      ...filteredThProps.value,
      columns: columnsComputed.value,
      sortingOrderIconName: sortingOrderIconName.value,
      severalRowsSelected: severalRowsSelected.value,
      sortingOrderSync: sortingOrderSync.value,
      allRowsSelected: allRowsSelected.value,
      sortBySync: sortBySync.value
    }));
    const {
      scrollContainer,
      topTrigger,
      bottomTrigger,
      doRenderTopTrigger,
      doRenderBottomTrigger
    } = useTableScroll(props, emit);
    const isVirtualScroll = computed(() => props.virtualScroller && !props.grid);
    const gridColumnsCount = computed(() => props.gridColumns || "var(--va-data-table-grid-tbody-columns)");
    const cellData = (cellData2, internalColumnData) => internalColumnData.displayFormatFn ? internalColumnData.displayFormatFn(cellData2.value) : cellData2.value;
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(VaVirtualScroller), mergeProps({ class: "va-data-table" }, computedAttributes.value, {
        ref_key: "scrollContainer",
        ref: scrollContainer,
        style: `--va-css-variables-selected-color: ${String(unref(CSSVariables).selectedColor)};--va-css-variables-hover-color: ${String(unref(CSSVariables).hoverColor)};--va-css-variables-table-height: ${String(unref(CSSVariables).tableHeight)};--va-css-variables-thead-bg: ${String(unref(CSSVariables).theadBg)};--va-css-variables-tfoot-bg: ${String(unref(CSSVariables).tfootBg)};--va-grid-columns-count: ${String(gridColumnsCount.value)}`
      }), {
        content: withCtx(({
          uniqueKey,
          renderBuffer,
          currentListOffset,
          listStyleComputed,
          containerStyleComputed
        }) => [
          createVNode(unref(VaInnerLoading), {
            "aria-live": "polite",
            style: normalizeStyle(containerStyleComputed),
            loading: __props.loading,
            color: __props.loadingColor
          }, {
            default: withCtx(() => [
              unref(doRenderTopTrigger) ? (openBlock(), createElementBlock("div", {
                key: 0,
                ref_key: "topTrigger",
                ref: topTrigger,
                class: "va-data-table__scroll-trigger"
              }, null, 512)) : createCommentVNode("", true),
              createElementVNode("table", mergeProps({
                class: "va-data-table__table",
                style: listStyleComputed
              }, computedTableAttributes.value), [
                "colgroup" in _ctx.$slots ? (openBlock(), createElementBlock("colgroup", _hoisted_1, [
                  renderSlot(_ctx.$slots, "colgroup", normalizeProps(guardReactiveProps(unref(columnsComputed))))
                ])) : createCommentVNode("", true),
                createElementVNode("thead", {
                  class: normalizeClass(["va-data-table__table-thead", { "va-data-table__table-thead--sticky": _ctx.$props.stickyHeader }]),
                  style: normalizeStyle({ top: isVirtualScroll.value && _ctx.$props.stickyHeader ? `-${currentListOffset}px` : void 0 })
                }, [
                  renderSlot(_ctx.$slots, "headerPrepend"),
                  renderSlot(_ctx.$slots, "header", {}, () => [
                    !__props.hideDefaultHeader ? (openBlock(), createBlock(unref(VaDataTableThRow), mergeProps({ key: 0 }, thAttributesComputed.value, {
                      onToggleBulkSelection: unref(toggleBulkSelection),
                      onToggleSorting: unref(toggleSorting)
                    }), createSlots({ _: 2 }, [
                      renderList(_ctx.$slots, (_, slot) => {
                        return {
                          name: slot,
                          fn: withCtx((scope) => [
                            renderSlot(_ctx.$slots, slot, normalizeProps(guardReactiveProps(scope)))
                          ])
                        };
                      })
                    ]), 1040, ["onToggleBulkSelection", "onToggleSorting"])) : createCommentVNode("", true)
                  ]),
                  renderSlot(_ctx.$slots, "headerAppend")
                ], 6),
                createElementVNode("tbody", _hoisted_2, [
                  renderSlot(_ctx.$slots, "bodyPrepend"),
                  createVNode(TransitionGroup, {
                    name: isVirtualScroll.value ? "" : unref(animationName),
                    css: !_ctx.$props.virtualScroller,
                    appear: !_ctx.$props.virtualScroller
                  }, {
                    default: withCtx(() => [
                      showNoDataHtml.value ? (openBlock(), createElementBlock("tr", _hoisted_3, [
                        createElementVNode("td", _hoisted_4, [
                          renderSlot(_ctx.$slots, "no-data", {}, () => [
                            createElementVNode("div", { innerHTML: __props.noDataHtml }, null, 8, _hoisted_5)
                          ])
                        ])
                      ])) : showNoDataFilteredHtml.value ? (openBlock(), createElementBlock("tr", _hoisted_6, [
                        createElementVNode("td", _hoisted_7, [
                          renderSlot(_ctx.$slots, "no-filtered-data", {}, () => [
                            renderSlot(_ctx.$slots, "no-data", {}, () => [
                              createElementVNode("div", { innerHTML: __props.noDataFilteredHtml }, null, 8, _hoisted_8)
                            ])
                          ])
                        ])
                      ])) : createCommentVNode("", true),
                      (openBlock(true), createElementBlock(Fragment, null, renderList(renderBuffer, (row, index) => {
                        return openBlock(), createElementBlock(Fragment, {
                          key: `table-row_${uniqueKey(row, index)}`
                        }, [
                          createElementVNode("tr", mergeProps({
                            class: ["va-data-table__table-tr", [{ selected: unref(isRowSelected)(row), "va-data-table__table-tr--expanded": row.isExpandableRowVisible }]]
                          }, unref(getRowBind)(row), {
                            onClick: ($event) => onRowClickHandler("row:click", $event, row),
                            onDblclick: ($event) => onRowClickHandler("row:dblclick", $event, row),
                            onContextmenu: ($event) => onRowClickHandler("row:contextmenu", $event, row)
                          }), [
                            _ctx.selectable && !_ctx.$props.grid ? (openBlock(), createElementBlock("td", {
                              class: "va-data-table__table-td va-data-table__table-cell-select",
                              key: `selectable_${uniqueKey(row, index)}`,
                              onSelectstart: _cache[0] || (_cache[0] = withModifiers(() => {
                              }, ["prevent"]))
                            }, [
                              createVNode(unref(VaCheckbox), {
                                class: "va-data-table__table-cell-checkbox",
                                "model-value": unref(isRowSelected)(row),
                                color: _ctx.selectedColor,
                                "aria-label": unref(tp)(_ctx.$props.ariaSelectRowLabel, { index: row.initialIndex }),
                                onClick: [
                                  withModifiers(($event) => unref(shiftSelectRows)(row), ["shift", "exact", "stop"]),
                                  withModifiers(($event) => unref(ctrlSelectRow)(row), ["ctrl", "exact", "stop"]),
                                  withModifiers(($event) => unref(ctrlSelectRow)(row), ["exact", "stop"])
                                ]
                              }, null, 8, ["model-value", "color", "aria-label", "onClick"])
                            ], 32)) : createCommentVNode("", true),
                            (openBlock(true), createElementBlock(Fragment, null, renderList(row.cells, (cell, cellIndex) => {
                              return openBlock(), createElementBlock("td", mergeProps({
                                key: `table-cell_${cell.column.name + cell.rowIndex}`,
                                class: ["va-data-table__table-td", unref(getClass)(cell.column.tdClass)],
                                style: [
                                  cell.column.width ? { minWidth: cell.column.width, maxWidth: cell.column.width } : {},
                                  unref(getCellCSSVariables)(cell),
                                  unref(getStyle)(cell.column.tdStyle)
                                ]
                              }, unref(getCellBind)(cell, row)), [
                                `cell(${cell.column.name})` in _ctx.$slots ? renderSlot(_ctx.$slots, `cell(${cell.column.name})`, normalizeProps(mergeProps({ key: 0 }, { ...cell, row, isExpanded: row.isExpandableRowVisible }))) : renderSlot(_ctx.$slots, "cell", normalizeProps(mergeProps({ key: 1 }, { cell, row })), () => [
                                  _ctx.$props.grid ? (openBlock(), createElementBlock("span", _hoisted_10, toDisplayString(unref(columnsComputed)[cellIndex].label), 1)) : createCommentVNode("", true),
                                  createTextVNode(" " + toDisplayString(cellData(cell, unref(columnsComputed)[cellIndex])), 1)
                                ])
                              ], 16);
                            }), 128))
                          ], 16, _hoisted_9),
                          row.isExpandableRowVisible ? (openBlock(), createElementBlock("tr", _hoisted_11, [
                            (openBlock(), createElementBlock("td", {
                              class: "va-data-table__table-expanded-content",
                              colspan: "99999",
                              key: uniqueKey(row, index)
                            }, [
                              renderSlot(_ctx.$slots, "expandableRow", normalizeProps(guardReactiveProps(row)))
                            ]))
                          ])) : createCommentVNode("", true)
                        ], 64);
                      }), 128))
                    ]),
                    _: 2
                  }, 1032, ["name", "css", "appear"]),
                  renderSlot(_ctx.$slots, "bodyAppend")
                ], 512),
                ["footer", "footerPrepend", "footerAppend"].some((field) => _ctx.$slots[field]) || __props.footerClone && !_ctx.$props.grid ? (openBlock(), createElementBlock("tfoot", {
                  key: 1,
                  class: normalizeClass(["va-data-table__table-tfoot", { "va-data-table__table-tfoot--sticky": _ctx.$props.stickyFooter }]),
                  style: normalizeStyle({ bottom: isVirtualScroll.value && _ctx.$props.stickyFooter ? `${currentListOffset}px` : void 0 })
                }, [
                  renderSlot(_ctx.$slots, "footerPrepend"),
                  renderSlot(_ctx.$slots, "footer", {}, () => [
                    !__props.hideDefaultHeader ? (openBlock(), createBlock(unref(VaDataTableThRow), mergeProps({ key: 0 }, thAttributesComputed.value, {
                      "is-footer": "",
                      onToggleBulkSelection: unref(toggleBulkSelection),
                      onToggleSorting: unref(toggleSorting)
                    }), createSlots({ _: 2 }, [
                      renderList(_ctx.$slots, (_, slot) => {
                        return {
                          name: slot,
                          fn: withCtx((scope) => [
                            renderSlot(_ctx.$slots, slot, normalizeProps(guardReactiveProps(scope)))
                          ])
                        };
                      })
                    ]), 1040, ["onToggleBulkSelection", "onToggleSorting"])) : createCommentVNode("", true)
                  ]),
                  renderSlot(_ctx.$slots, "footerAppend")
                ], 6)) : createCommentVNode("", true)
              ], 16),
              unref(doRenderBottomTrigger) ? (openBlock(), createElementBlock("div", {
                key: 1,
                ref_key: "bottomTrigger",
                ref: bottomTrigger,
                class: "va-data-table__scroll-trigger"
              }, null, 512)) : createCommentVNode("", true)
            ]),
            _: 2
          }, 1032, ["style", "loading", "color"])
        ]),
        _: 3
      }, 16, ["style"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaDataTable.vue_vue_type_script_setup_true_lang.mjs.map
