import { defineComponent, computed, openBlock, createElementBlock, createBlock, unref, createCommentVNode, Fragment, renderList, mergeProps, withModifiers, withKeys, createElementVNode, renderSlot, normalizeProps, guardReactiveProps, toDisplayString, normalizeClass } from "vue";
import { V as VaIcon } from "../../va-icon/index.mjs";
import { V as VaCheckbox } from "../../va-checkbox/index.mjs";
import { u as useStylableProps, a as useStylable } from "../hooks/useStylable.mjs";
import { a as useTranslationProp, u as useTranslation } from "../../../composables/useTranslation.mjs";
const _hoisted_1 = { class: "va-data-table__table-tr" };
const _hoisted_2 = {
  key: 0,
  scope: "col",
  class: "va-data-table__table-th va-data-table__table-cell-select"
};
const _hoisted_3 = ["title", "onClick", "onKeydown"];
const _hoisted_4 = { class: "va-data-table__table-th-wrapper" };
const _hoisted_5 = { key: 0 };
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaDataTableThRow"
  },
  __name: "VaDataTableThRow",
  props: {
    ...useStylableProps,
    selectMode: { type: String, default: "multiple" },
    allRowsSelected: { type: Boolean, default: false },
    severalRowsSelected: { type: Boolean, default: false },
    columns: { type: Array, required: true },
    isFooter: { type: Boolean, default: false },
    sortBySync: { type: String, required: true },
    sortingOrderIconName: { type: String, required: true },
    sortingOrderSync: { type: String, default: null },
    ariaSelectAllRowsLabel: useTranslationProp("$t:selectAllRows"),
    ariaSortColumnByLabel: useTranslationProp("$t:sortColumnBy")
  },
  emits: [
    "toggleBulkSelection",
    "toggleSorting"
  ],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const { t, tp } = useTranslation();
    const {
      getFooterCSSVariables,
      getHeaderCSSVariables,
      getClass,
      getStyle
    } = useStylable(props);
    const getAriaAttributes = (column) => {
      const ariaSort = props.sortingOrderSync && props.sortBySync === column.name ? props.sortingOrderSync === "asc" ? "ascending" : "descending" : "none";
      const ariaLabel = column.sortable ? tp(props.ariaSortColumnByLabel, { name: column.label }) : void 0;
      return {
        "aria-sort": ariaSort,
        "aria-label": ariaLabel
      };
    };
    const sortByColumn = (column) => {
      if (props.isFooter && !props.allowFooterSorting || !column.sortable) {
        return;
      }
      emit("toggleSorting", column);
    };
    const toggleBulkSelection = () => emit("toggleBulkSelection");
    const getColumnStyles = (column) => {
      return [
        column.width ? { minWidth: column.width, maxWidth: column.width } : {},
        props.isFooter ? getFooterCSSVariables(column) : getHeaderCSSVariables(column),
        getStyle(column.thStyle)
      ];
    };
    const slotNameComputed = computed(() => props.isFooter ? "footer" : "header");
    const multiplySelectAvailable = computed(() => props.selectMode === "multiple");
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("tr", _hoisted_1, [
        _ctx.$props.selectable ? (openBlock(), createElementBlock("th", _hoisted_2, [
          multiplySelectAvailable.value ? (openBlock(), createBlock(unref(VaCheckbox), {
            key: 0,
            class: "va-data-table__table-cell-checkbox",
            "model-value": _ctx.$props.severalRowsSelected ? "idl" : _ctx.$props.allRowsSelected,
            "aria-label": unref(tp)(_ctx.$props.ariaSelectAllRowsLabel),
            "true-value": true,
            "false-value": false,
            color: _ctx.$props.selectedColor,
            "indeterminate-value": "idl",
            indeterminate: "",
            "onUpdate:modelValue": toggleBulkSelection
          }, null, 8, ["model-value", "aria-label", "color"])) : createCommentVNode("", true)
        ])) : createCommentVNode("", true),
        (openBlock(true), createElementBlock(Fragment, null, renderList(__props.columns, (column) => {
          return openBlock(), createElementBlock("th", mergeProps({
            key: column.name,
            scope: "col",
            class: ["va-data-table__table-th", unref(getClass)(column.thClass)],
            title: column.thTitle,
            style: getColumnStyles(column)
          }, getAriaAttributes(column), {
            onClick: withModifiers(($event) => sortByColumn(column), ["exact"]),
            onKeydown: withKeys(withModifiers(($event) => sortByColumn(column), ["stop"]), ["enter"])
          }), [
            createElementVNode("div", _hoisted_4, [
              `${slotNameComputed.value}(${column.name})` in _ctx.$slots ? (openBlock(), createElementBlock("span", _hoisted_5, [
                renderSlot(_ctx.$slots, `${slotNameComputed.value}(${column.name})`, normalizeProps(guardReactiveProps({ label: column.label, key: column.key })))
              ])) : renderSlot(_ctx.$slots, slotNameComputed.value, normalizeProps(mergeProps({ key: 1 }, { label: column.label, key: column.key })), () => [
                createElementVNode("span", null, toDisplayString(column.label), 1)
              ]),
              column.sortable ? (openBlock(), createBlock(unref(VaIcon), {
                key: 2,
                class: normalizeClass(["va-data-table__table-th-sorting-icon", { active: __props.sortBySync === column.name && __props.sortingOrderSync !== null }]),
                size: "small",
                role: column.sortable ? "button" : void 0,
                tabindex: column.sortable ? 0 : -1,
                name: __props.sortingOrderIconName,
                onSelectstart: withModifiers(() => {
                }, ["prevent"])
              }, null, 8, ["class", "role", "tabindex", "name"])) : createCommentVNode("", true)
            ])
          ], 16, _hoisted_3);
        }), 128))
      ]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaDataTableThRow.vue_vue_type_script_setup_true_lang.mjs.map
