import { defineComponent, ref, computed, watch, nextTick, openBlock, createElementBlock, normalizeClass, normalizeStyle, createVNode, mergeProps, unref, isRef, createSlots, renderList, withCtx, renderSlot, normalizeProps, guardReactiveProps, createElementVNode, createBlock, createCommentVNode } from "vue";
import { u as useView } from "./hooks/view.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.mjs";
import { _ as _sfc_main$2 } from "./components/VaDayPicker/VaDayPicker.vue_vue_type_script_setup_true_lang.mjs";
import { _ as _sfc_main$1 } from "./components/VaDatePickerHeader/VaDatePickerHeader.vue_vue_type_script_setup_true_lang.mjs";
import { _ as _sfc_main$3 } from "./components/VaMonthPicker/VaMonthPicker.vue_vue_type_script_setup_true_lang.mjs";
import { _ as _sfc_main$4 } from "./components/VaYearPicker/VaYearPicker.vue_vue_type_script_setup_true_lang.mjs";
import { d as defineChildProps, u as useChildComponents } from "../../composables/useChildComponents.mjs";
import { e as extractComponentProps, a as extractComponentEmits } from "../../utils/component-options/extract-component-options.mjs";
import { V as VaButton } from "../va-button/index.mjs";
import { u as useStatefulProps, a as useStatefulEmits, b as useStateful } from "../../composables/useStateful.mjs";
import { u as useColors } from "../../composables/useColors.mjs";
import { f as filterComponentProps } from "../../utils/component-options/filter-props.mjs";
const _hoisted_1 = { class: "va-date-picker__picker-wrapper" };
const DEFAULT_MONTH_NAMES = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
const DEFAULT_WEEKDAY_NAMES = ["SU", "MO", "TU", "WE", "TH", "FR", "SA"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaDatePicker"
  },
  __name: "VaDatePicker",
  props: {
    ...defineChildProps({
      prevButton: VaButton,
      nextButton: VaButton,
      middleButton: VaButton
    }),
    ...useStatefulProps,
    ...useComponentPresetProp,
    ...extractComponentProps(_sfc_main$1),
    ...extractComponentProps(_sfc_main$2),
    ...extractComponentProps(_sfc_main$3),
    ...extractComponentProps(_sfc_main$4),
    modelValue: { type: [Date, Array, Object] },
    monthNames: { type: Array, default: DEFAULT_MONTH_NAMES },
    weekdayNames: { type: Array, default: DEFAULT_WEEKDAY_NAMES },
    view: { type: Object },
    type: { type: String, default: "day" },
    readonly: { type: Boolean, default: false },
    disabled: { type: Boolean, default: false },
    // Colors
    color: { type: String, default: void 0 },
    weekendsColor: { type: String, default: void 0 }
  },
  emits: [
    ...useStatefulEmits,
    ...extractComponentEmits(_sfc_main$1),
    ...extractComponentEmits(_sfc_main$4),
    ...extractComponentEmits(_sfc_main$2),
    ...extractComponentEmits(_sfc_main$3)
  ],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    useChildComponents(props);
    const emit = __emit;
    const currentPicker = ref();
    const { valueComputed } = useStateful(props, emit);
    const { syncView } = useView(props, emit, { type: props.type });
    const classComputed = computed(() => ({
      "va-date-picker_without-week-days": props.hideWeekDays,
      "va-date-picker_disabled": props.disabled
    }));
    const onDayModelValueUpdate = (modelValue) => {
      if (props.readonly) {
        return;
      }
      if (props.type === "day") {
        valueComputed.value = modelValue;
      }
    };
    const onMonthClick = (date) => {
      emit("click:month", date);
      const year = date.getFullYear();
      const month = date.getMonth();
      if (props.type !== "month") {
        syncView.value = { type: "day", year, month };
      }
    };
    const onMonthModelValueUpdate = (modelValue) => {
      if (props.type === "month") {
        valueComputed.value = modelValue;
      }
    };
    const onYearClick = (date) => {
      emit("click:year", date);
      const year = date.getFullYear();
      if (props.type !== "year") {
        syncView.value = { type: "month", year, month: syncView.value.month };
      }
    };
    const onYearModelValueUpdate = (modelValue) => {
      if (props.type === "year") {
        valueComputed.value = modelValue;
      }
    };
    const { colorsToCSSVariable } = useColors();
    const styleComputed = computed(() => ({
      ...colorsToCSSVariable({
        color: props.color,
        "weekends-color": props.weekendsColor
      }, "va-date-picker")
    }));
    const focusCurrentPicker = () => {
      var _a;
      return (_a = currentPicker.value) == null ? void 0 : _a.$el.focus();
    };
    watch(syncView, (newValue, prevValue) => {
      if (newValue.type === prevValue.type) {
        return;
      }
      nextTick(focusCurrentPicker);
    });
    const isPickerReadonly = (pickerName) => {
      return props.readonly && props.type === pickerName;
    };
    const dayPickerProps = filterComponentProps(extractComponentProps(_sfc_main$2));
    const headerProps = filterComponentProps(extractComponentProps(_sfc_main$1));
    const monthPickerProps = filterComponentProps(extractComponentProps(_sfc_main$3));
    const yearPickerProps = filterComponentProps(extractComponentProps(_sfc_main$4));
    __expose({
      focus: focusCurrentPicker,
      focusCurrentPicker
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(["va-date-picker", classComputed.value]),
        style: normalizeStyle(styleComputed.value)
      }, [
        createVNode(_sfc_main$1, mergeProps(unref(headerProps), {
          view: unref(syncView),
          "onUpdate:view": _cache[0] || (_cache[0] = ($event) => isRef(syncView) ? syncView.value = $event : null)
        }), createSlots({ _: 2 }, [
          renderList(_ctx.$slots, (_, name) => {
            return {
              name,
              fn: withCtx((bind) => [
                renderSlot(_ctx.$slots, name, normalizeProps(guardReactiveProps(bind)))
              ])
            };
          })
        ]), 1040, ["view"]),
        createElementVNode("div", _hoisted_1, [
          unref(syncView).type === "day" ? (openBlock(), createBlock(_sfc_main$2, mergeProps({
            key: 0,
            ref_key: "currentPicker",
            ref: currentPicker
          }, unref(dayPickerProps), {
            "model-value": unref(valueComputed),
            view: unref(syncView),
            readonly: _ctx.$props.disabled || isPickerReadonly("day"),
            "onUpdate:modelValue": onDayModelValueUpdate,
            "onHover:day": _cache[1] || (_cache[1] = (value) => _ctx.$emit("hover:day", value)),
            "onClick:day": _cache[2] || (_cache[2] = (value) => _ctx.$emit("click:day", value))
          }), createSlots({ _: 2 }, [
            renderList(_ctx.$slots, (_, name) => {
              return {
                name,
                fn: withCtx((bind) => [
                  renderSlot(_ctx.$slots, name, normalizeProps(guardReactiveProps(bind)))
                ])
              };
            })
          ]), 1040, ["model-value", "view", "readonly"])) : createCommentVNode("", true),
          unref(syncView).type === "month" ? (openBlock(), createBlock(_sfc_main$3, mergeProps({
            key: 1,
            ref_key: "currentPicker",
            ref: currentPicker
          }, unref(monthPickerProps), {
            view: unref(syncView),
            "model-value": unref(valueComputed),
            readonly: _ctx.$props.disabled || isPickerReadonly("month"),
            "onUpdate:modelValue": onMonthModelValueUpdate,
            "onHover:month": _cache[3] || (_cache[3] = (value) => _ctx.$emit("hover:month", value)),
            "onClick:month": onMonthClick
          }), createSlots({ _: 2 }, [
            renderList(_ctx.$slots, (_, name) => {
              return {
                name,
                fn: withCtx((bind) => [
                  renderSlot(_ctx.$slots, name, normalizeProps(guardReactiveProps(bind)))
                ])
              };
            })
          ]), 1040, ["view", "model-value", "readonly"])) : createCommentVNode("", true),
          unref(syncView).type === "year" ? (openBlock(), createBlock(_sfc_main$4, mergeProps({
            key: 2,
            ref_key: "currentPicker",
            ref: currentPicker
          }, unref(yearPickerProps), {
            view: unref(syncView),
            "model-value": unref(valueComputed),
            readonly: _ctx.$props.disabled || isPickerReadonly("year"),
            "onHover:year": _cache[4] || (_cache[4] = (value) => _ctx.$emit("hover:year", value)),
            "onUpdate:modelValue": onYearModelValueUpdate,
            "onClick:year": onYearClick
          }), createSlots({ _: 2 }, [
            renderList(_ctx.$slots, (_, name) => {
              return {
                name,
                fn: withCtx((bind) => [
                  renderSlot(_ctx.$slots, name, normalizeProps(guardReactiveProps(bind)))
                ])
              };
            })
          ]), 1040, ["view", "model-value", "readonly"])) : createCommentVNode("", true)
        ])
      ], 6);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaDatePicker.vue_vue_type_script_setup_true_lang.mjs.map
