import { defineComponent, unref, openBlock, createElementBlock, renderSlot, normalizeProps, guardReactiveProps, createVNode, createElementVNode, withCtx, createTextVNode, toDisplayString, mergeProps, createCommentVNode } from "vue";
import { u as useView } from "../../hooks/view.mjs";
import { V as VaButton } from "../../../va-button/index.mjs";
import { a as useTranslationProp, u as useTranslation } from "../../../../composables/useTranslation.mjs";
import { u as useElementTextColor } from "../../../../composables/useElementTextColor.mjs";
import { u as useElementBackground } from "../../../../composables/useElementBackground.mjs";
import { u as useCurrentElement } from "../../../../composables/useCurrentElement.mjs";
const _hoisted_1 = {
  key: 0,
  class: "va-date-picker-header va-date-picker__header"
};
const _hoisted_2 = { class: "va-date-picker__header__text" };
const _hoisted_3 = { class: "va-date-picker__header__month" };
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaDatePickerHeader"
  },
  __name: "VaDatePickerHeader",
  props: {
    monthNames: { type: Array, required: true },
    view: { type: Object },
    color: { type: String },
    disabled: { type: Boolean, default: false },
    ariaNextPeriodLabel: useTranslationProp("$t:nextPeriod"),
    ariaPreviousPeriodLabel: useTranslationProp("$t:previousPeriod"),
    ariaSwitchViewLabel: useTranslationProp("$t:switchView")
  },
  emits: ["update:view"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const { syncView, prev, next } = useView(props, emit);
    const switchView = () => {
      if (syncView.value.type === "day") {
        syncView.value = { ...syncView.value, type: "month" };
      } else if (syncView.value.type === "month") {
        syncView.value = { ...syncView.value, type: "year" };
      }
    };
    const changeView = (view) => {
      syncView.value = view;
    };
    const currentColor = useElementTextColor(useElementBackground(useCurrentElement()));
    const { tp } = useTranslation();
    return (_ctx, _cache) => {
      return unref(syncView).type !== "year" ? (openBlock(), createElementBlock("div", _hoisted_1, [
        renderSlot(_ctx.$slots, "buttonPrev", normalizeProps(guardReactiveProps({ onClick: unref(prev) })), () => [
          createVNode(unref(VaButton), {
            "va-child": "prevButton",
            disabled: _ctx.$props.disabled,
            icon: "va-arrow-left",
            preset: "plain",
            size: "small",
            color: __props.color,
            textColor: unref(currentColor),
            "aria-label": unref(tp)(_ctx.$props.ariaPreviousPeriodLabel),
            round: "",
            onClick: unref(prev)
          }, null, 8, ["disabled", "color", "textColor", "aria-label", "onClick"])
        ]),
        createElementVNode("div", _hoisted_2, [
          renderSlot(_ctx.$slots, "header", normalizeProps(guardReactiveProps({ year: unref(syncView).year, month: unref(syncView).month, monthNames: __props.monthNames, view: unref(syncView), changeView, switchView })), () => [
            createVNode(unref(VaButton), {
              "va-child": "middleButton",
              disabled: _ctx.$props.disabled,
              preset: "plain",
              size: "small",
              color: __props.color,
              textColor: unref(currentColor),
              "aria-label": unref(tp)(_ctx.$props.ariaSwitchViewLabel),
              onClick: switchView
            }, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "year", normalizeProps(guardReactiveProps({ year: unref(syncView).year })), () => [
                  createTextVNode(toDisplayString(unref(syncView).year), 1)
                ]),
                unref(syncView).type === "day" ? renderSlot(_ctx.$slots, "month", normalizeProps(mergeProps({ key: 0 }, { month: unref(syncView).month })), () => [
                  createElementVNode("span", _hoisted_3, toDisplayString(__props.monthNames[unref(syncView).month]), 1)
                ]) : createCommentVNode("", true)
              ]),
              _: 3
            }, 8, ["disabled", "color", "textColor", "aria-label"])
          ])
        ]),
        renderSlot(_ctx.$slots, "buttonNext", normalizeProps(guardReactiveProps({ onClick: unref(next) })), () => [
          createVNode(unref(VaButton), {
            "va-child": "nextButton",
            disabled: _ctx.$props.disabled,
            icon: "va-arrow-right",
            preset: "plain",
            size: "small",
            color: __props.color,
            textColor: unref(currentColor),
            "aria-label": unref(tp)(_ctx.$props.ariaNextPeriodLabel),
            onClick: unref(next),
            round: ""
          }, null, 8, ["disabled", "color", "textColor", "aria-label", "onClick"])
        ])
      ])) : createCommentVNode("", true);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaDatePickerHeader.vue_vue_type_script_setup_true_lang.mjs.map
