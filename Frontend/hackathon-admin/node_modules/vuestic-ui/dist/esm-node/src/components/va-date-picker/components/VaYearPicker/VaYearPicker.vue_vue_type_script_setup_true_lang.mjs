import { defineComponent, shallowRef, toRefs, computed, onMounted, watch, openBlock, createElementBlock, mergeProps, unref, withKeys, withModifiers, Fragment, renderList, createBlock, withCtx, createTextVNode, toDisplayString } from "vue";
import { _ as _sfc_main$1 } from "../VaDatePickerCell.vue_vue_type_script_setup_true_lang.mjs";
import { c as createYearDate } from "../../utils/date-utils.mjs";
import { u as useGridKeyboardNavigation } from "../../hooks/grid-keyboard-navigation.mjs";
import { u as useDatePicker } from "../../hooks/use-picker.mjs";
import { u as useNumericProp } from "../../../../composables/useNumericProp.mjs";
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaYearPicker"
  },
  __name: "VaYearPicker",
  props: {
    modelValue: { type: [Date, Array, Object] },
    allowedYears: { type: Function, default: void 0 },
    highlightToday: { type: Boolean, default: true },
    startYear: { type: [Number, String], default: 1970 },
    mode: { type: String, default: "auto" },
    view: { type: Object, default: () => ({ type: "year" }) },
    endYear: { type: [Number, String], default: () => (/* @__PURE__ */ new Date()).getFullYear() + 50 },
    readonly: { type: Boolean, default: false },
    color: { type: String, default: "primary" }
  },
  emits: ["update:modelValue", "hover:year", "click:year"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const rootNode = shallowRef();
    const { view } = toRefs(props);
    const generateYearsArray = (start, end) => {
      const yearsCount = end - start + 1;
      return Array.from(Array(yearsCount).keys()).map((i) => createYearDate(start + i));
    };
    const startYearComputed = useNumericProp("startYear");
    const endYearComputed = useNumericProp("endYear");
    const years = computed(() => generateYearsArray(startYearComputed.value, endYearComputed.value));
    const scrollIntoYearIndex = (index) => {
      if (!rootNode.value) {
        return;
      }
      const scrollHeight = rootNode.value.scrollHeight;
      const rootNodeHeight = rootNode.value.offsetHeight;
      const currentYearOffset = scrollHeight / years.value.length * index;
      const cellSize = scrollHeight / years.value.length;
      const relativeScrollPosition = currentYearOffset - rootNode.value.scrollTop;
      if (relativeScrollPosition < 0) {
        rootNode.value.scrollTo({ top: currentYearOffset });
      } else if (relativeScrollPosition > rootNodeHeight) {
        rootNode.value.scrollTo({ top: currentYearOffset - rootNodeHeight + cellSize });
      }
    };
    const scrollIntoYearIndexCenter = (index) => {
      if (!rootNode.value) {
        return;
      }
      const scrollHeight = rootNode.value.scrollHeight;
      const rootNodeHeight = rootNode.value.offsetHeight;
      const currentYearOffset = scrollHeight / years.value.length * index;
      rootNode.value.scrollTo({ top: currentYearOffset - rootNodeHeight / 2 });
    };
    onMounted(() => {
      const currentYearIndex = years.value.findIndex((date) => date.getFullYear() === view.value.year);
      scrollIntoYearIndexCenter(currentYearIndex);
    });
    const {
      hoveredIndex,
      onClick,
      isToday,
      isSelected,
      isInRange
    } = useDatePicker("year", years, props, emit);
    const isYearDisabled = (year) => props.allowedYears === void 0 ? false : !props.allowedYears(year);
    const {
      focusedCellIndex,
      containerAttributes
    } = useGridKeyboardNavigation({
      rowSize: 1,
      start: 0,
      end: years.value.length,
      onFocusIndex: computed(() => years.value.findIndex((date) => date.getFullYear() === view.value.year)),
      onSelected: (selectedIndex) => onClick(years.value[selectedIndex])
    });
    watch(focusedCellIndex, (index) => index !== -1 && scrollIntoYearIndex(index));
    watch(focusedCellIndex, (index) => {
      hoveredIndex.value = index;
    });
    watch(hoveredIndex, (index) => {
      focusedCellIndex.value = index;
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", mergeProps({
        ref_key: "rootNode",
        ref: rootNode,
        class: "va-year-picker"
      }, unref(containerAttributes), {
        onKeydown: _cache[1] || (_cache[1] = withKeys(withModifiers(() => {
        }, ["prevent"]), ["space"]))
      }), [
        (openBlock(true), createElementBlock(Fragment, null, renderList(years.value, (year, index) => {
          return openBlock(), createBlock(_sfc_main$1, {
            key: year.toString(),
            "in-range": unref(isInRange)(year),
            selected: unref(isSelected)(year),
            disabled: isYearDisabled(year),
            today: unref(isToday)(year),
            focused: unref(focusedCellIndex) === index,
            "highlight-today": __props.highlightToday,
            readonly: _ctx.$props.readonly,
            color: __props.color,
            onClick: ($event) => {
              unref(onClick)(year);
              focusedCellIndex.value = index;
            },
            onMouseenter: ($event) => hoveredIndex.value = index,
            onMouseleave: _cache[0] || (_cache[0] = ($event) => hoveredIndex.value = -1)
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(year.getFullYear()), 1)
            ]),
            _: 2
          }, 1032, ["in-range", "selected", "disabled", "today", "focused", "highlight-today", "readonly", "color", "onClick", "onMouseenter"]);
        }), 128))
      ], 16);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaYearPicker.vue_vue_type_script_setup_true_lang.mjs.map
