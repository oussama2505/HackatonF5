import { defineComponent, mergeDefaults, computed, ref, watchEffect, openBlock, createBlock, unref, createSlots, withCtx, renderSlot, normalizeProps, guardReactiveProps, renderList } from "vue";
import { v as validationPropsDefaults } from "../../composables/useValidation.props.mjs";
import { s as statefulPropsDefaults } from "../../composables/useStateful.props.mjs";
import { V as VaMessageList } from "../va-message-list/VaMessageList.mjs";
import { b as useStateful } from "../../composables/useStateful.mjs";
import { a as useValidation } from "../../composables/useValidation.mjs";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "VaFormField",
  props: /* @__PURE__ */ mergeDefaults({
    stateful: { type: Boolean },
    modelValue: {},
    name: {},
    rules: {},
    dirty: { type: Boolean },
    error: { type: Boolean },
    errorMessages: {},
    errorCount: {},
    success: { type: Boolean },
    messages: {},
    immediateValidation: { type: Boolean },
    clearValue: {}
  }, {
    ...statefulPropsDefaults,
    ...validationPropsDefaults
  }),
  emits: ["update:error", "update:errorMessages", "update:dirty", "update:modelValue"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const { valueComputed } = useStateful(props, emit, "modelValue");
    const reset = () => {
      valueComputed.value = props.clearValue;
    };
    const focus = () => {
    };
    const {
      computedError,
      computedErrorMessages,
      validate,
      isDirty,
      isLoading,
      isValid,
      resetValidation,
      validationAriaAttributes,
      listeners
    } = useValidation(props, emit, {
      reset,
      focus,
      value: valueComputed
    });
    const messagesComputed = computed(() => computedError.value ? computedErrorMessages.value : props.messages);
    const messagesColor = computed(() => {
      if (!isValid.value) {
        return "danger";
      }
      if (props.success) {
        return "success";
      }
      return "";
    });
    const innerValue = ref(valueComputed.value);
    watchEffect(() => {
      innerValue.value = valueComputed.value;
    });
    const makeSlotRef = () => {
      return new Proxy(innerValue, {
        get(v, key) {
          if (key === "ref") {
            return innerValue.value;
          }
          return Reflect.get(v, key);
        },
        set(_, key, value) {
          if (key === "ref") {
            innerValue.value = value;
            valueComputed.value = value;
            return true;
          }
          return Reflect.set(valueComputed, key, value);
        }
      });
    };
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(VaMessageList), {
        "model-value": messagesComputed.value,
        "has-error": !unref(isValid),
        color: messagesColor.value
      }, createSlots({
        default: withCtx(({ ariaAttributes, attrs }) => [
          renderSlot(_ctx.$slots, "default", normalizeProps(guardReactiveProps({
            error: unref(computedError),
            errorMessages: messagesComputed.value,
            messages: messagesComputed.value,
            validate: unref(validate),
            isDirty: unref(isDirty),
            isLoading: unref(isLoading),
            isValid: unref(isValid),
            resetValidation: unref(resetValidation),
            validationAriaAttributes: unref(validationAriaAttributes),
            ...unref(listeners),
            value: makeSlotRef(),
            modelValue: makeSlotRef(),
            ariaAttributes,
            bind: {
              ...attrs,
              ...ariaAttributes,
              ...unref(listeners)
            }
          })))
        ]),
        _: 2
      }, [
        renderList(["message", "messages"], (name) => {
          return {
            name,
            fn: withCtx((slotScope) => [
              renderSlot(_ctx.$slots, name, normalizeProps(guardReactiveProps(slotScope)))
            ])
          };
        })
      ]), 1032, ["model-value", "has-error", "color"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaFormField.vue_vue_type_script_setup_true_lang.mjs.map
