import { defineComponent, watch, onMounted, computed, openBlock, createBlock, resolveDynamicComponent, mergeProps, withCtx, renderSlot, normalizeProps, guardReactiveProps, unref } from "vue";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.mjs";
import { a as useLocalConfigProvider } from "../../composables/useLocalConfig.mjs";
import { u as useFormParent } from "../../composables/useForm/useFormParent.mjs";
const statefulProps = { stateful: true };
const statefulConfig = {
  VaInput: statefulProps,
  VaSelect: statefulProps,
  VaCheckbox: statefulProps,
  VaRadio: statefulProps,
  VaDatePicker: statefulProps,
  VaTimePicker: statefulProps,
  VaColorPicker: statefulProps,
  VaSlider: statefulProps,
  VaSwitch: statefulProps,
  VaFileUpload: statefulProps,
  VaRating: statefulProps,
  VaDateInput: statefulProps,
  VaTimeInput: statefulProps
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaForm"
  },
  __name: "VaForm",
  props: {
    ...useComponentPresetProp,
    autofocus: { type: Boolean, default: false },
    immediate: { type: Boolean, default: false },
    tag: { type: String, default: "form" },
    trigger: { type: String, default: "blur" },
    modelValue: { type: Boolean, default: true },
    hideErrors: { type: Boolean, default: false },
    hideErrorMessages: { type: Boolean, default: false },
    hideLoading: { type: Boolean, default: false },
    stateful: { type: Boolean, default: false },
    name: { type: String, default: void 0 }
  },
  emits: ["update:modelValue"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const context = useFormParent(props);
    watch(context.isValid, (value) => {
      emit("update:modelValue", value);
    });
    watch(() => props.autofocus, (value) => {
      if (value) {
        context.focus();
      }
    });
    onMounted(() => {
      if (props.autofocus) {
        context.focus();
      }
    });
    watch(context.fields, (newVal) => {
      if (newVal.length && props.immediate) {
        context.validate();
      }
    }, { immediate: true });
    useLocalConfigProvider(computed(() => {
      if (!props.stateful) {
        return {};
      }
      return statefulConfig;
    }));
    const {
      immediate: immediateComputed,
      isDirty,
      isTouched,
      formData,
      fields,
      fieldsNamed,
      fieldNames,
      isValid,
      isLoading,
      errorMessages,
      errorMessagesNamed,
      validate,
      validateAsync,
      reset,
      resetValidation,
      focus,
      focusInvalidField
    } = context;
    __expose({
      immediate: immediateComputed,
      isDirty,
      formData,
      fields,
      fieldsNamed,
      fieldNames,
      isValid,
      isTouched,
      isLoading,
      errorMessages,
      errorMessagesNamed,
      validate,
      validateAsync,
      reset,
      resetValidation,
      focus,
      focusInvalidField
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(__props.tag), mergeProps({
        class: "va-form",
        onSubmit: _cache[0] || (_cache[0] = (e) => _ctx.$attrs.action === void 0 && e.preventDefault())
      }, _ctx.$attrs), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default", normalizeProps(guardReactiveProps({
            isValid: unref(isValid),
            isDirty: unref(isDirty),
            isTouched: unref(isTouched),
            isLoading: unref(isLoading),
            errorMessages: unref(errorMessages),
            errorMessagesNamed: unref(errorMessagesNamed),
            formData: unref(formData),
            fields: unref(fields),
            fieldsNamed: unref(fieldsNamed),
            fieldNames: unref(fieldNames),
            validate: unref(validate),
            validateAsync: unref(validateAsync),
            reset: unref(reset),
            resetValidation: unref(resetValidation),
            focus: unref(focus),
            focusInvalidField: unref(focusInvalidField)
          })))
        ]),
        _: 3
      }, 16);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaForm.vue_vue_type_script_setup_true_lang.mjs.map
