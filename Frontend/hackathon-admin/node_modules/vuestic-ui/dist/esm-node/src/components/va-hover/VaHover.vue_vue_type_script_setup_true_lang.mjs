import { defineComponent, openBlock, createElementBlock, renderSlot, normalizeProps, guardReactiveProps, unref } from "vue";
import { c as createStatefulProps, a as useStatefulEmits, b as useStateful } from "../../composables/useStateful.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.mjs";
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaHover"
  },
  __name: "VaHover",
  props: {
    ...createStatefulProps(true),
    ...useComponentPresetProp,
    disabled: { type: Boolean, default: false },
    modelValue: { type: Boolean, default: false }
  },
  emits: [...useStatefulEmits],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const { valueComputed } = useStateful(props, emit);
    const onMouseEnter = () => {
      if (!props.disabled) {
        valueComputed.value = true;
      }
    };
    const onMouseLeave = () => {
      if (!props.disabled) {
        valueComputed.value = false;
      }
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: "va-hover",
        onMouseenter: onMouseEnter,
        onMouseleave: onMouseLeave
      }, [
        renderSlot(_ctx.$slots, "default", normalizeProps(guardReactiveProps({ hover: unref(valueComputed) })))
      ], 32);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaHover.vue_vue_type_script_setup_true_lang.mjs.map
