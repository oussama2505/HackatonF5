import { defineComponent, ref, computed, openBlock, createElementBlock, mergeProps, unref, createElementVNode, Fragment, renderList, createBlock, resolveDynamicComponent, renderSlot, createVNode, createCommentVNode, withCtx, normalizeProps, guardReactiveProps } from "vue";
import { _ as _sfc_main$1 } from "./components/VaMenuItem.vue_vue_type_script_setup_true_lang.mjs";
import { _ as _VaMenuGroup } from "./components/VaMenuGroup.mjs";
import { u as useMenuKeyboardNavigation, m as makeMenuContainerAttributes } from "./composables/useMenuKeyboardNavigation.mjs";
import { u as useSelectableListProps, a as useSelectableList } from "../../composables/useSelectableList.mjs";
const _hoisted_1 = { colspan: "9999" };
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaMenuList"
  },
  __name: "VaMenuList",
  props: {
    ...useSelectableListProps,
    options: { type: Array, default: () => [] }
  },
  emits: ["selected"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const container = ref();
    useMenuKeyboardNavigation(container);
    const { getText, getValue, getDisabled, getGroupBy, getTrackBy } = useSelectableList(props);
    const optionGroups = computed(() => props.options.reduce((groups, option) => {
      const groupBy = getGroupBy(option);
      if (!groupBy) {
        groups._noGroup.push(option);
      } else {
        if (!groups[groupBy]) {
          groups[groupBy] = [];
        }
        groups[groupBy].push(option);
      }
      return groups;
    }, { _noGroup: [] }));
    const getUnSlottedVNodes = (nodes) => {
      if (Array.isArray(nodes) && nodes[0].type === Fragment) {
        return nodes[0].children;
      }
      return nodes;
    };
    const getVNodeComponentName = (node) => {
      if (typeof node.type === "object" && "name" in node.type && typeof node.type.name === "string") {
        return node.type.name;
      }
      return "";
    };
    const getVNodeKey = (node) => {
      if (typeof node.type === "string") {
        return node.type;
      }
      if (typeof node.type === "object" && "name" in node.type && typeof node.type.name === "string") {
        return node.type.name;
      }
      return String(node.key);
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("table", mergeProps({
        class: "va-menu-list",
        ref_key: "container",
        ref: container
      }, unref(makeMenuContainerAttributes)()), [
        createElementVNode("tbody", null, [
          _ctx.$slots.default ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(getUnSlottedVNodes(_ctx.$slots.default()), (child) => {
            return openBlock(), createElementBlock(Fragment, null, [
              getVNodeComponentName(child) === "VaMenuItem" ? (openBlock(), createBlock(resolveDynamicComponent(child), {
                key: getVNodeKey(child) + "menuitem"
              })) : getVNodeComponentName(child) === "VaDropdown" ? (openBlock(), createBlock(resolveDynamicComponent(child), {
                key: getVNodeKey(child) + "menu-dropdown"
              })) : (openBlock(), createElementBlock("td", {
                colspan: "999",
                key: getVNodeKey(child),
                class: "va-menu-list__virtual-td"
              }, [
                (openBlock(), createBlock(resolveDynamicComponent(child)))
              ]))
            ], 64);
          }), 256)) : renderSlot(_ctx.$slots, "default", { key: 1 }, () => [
            (openBlock(true), createElementBlock(Fragment, null, renderList(optionGroups.value, (options, groupName) => {
              return openBlock(), createElementBlock(Fragment, { key: groupName }, [
                groupName !== "_noGroup" ? renderSlot(_ctx.$slots, "group", { key: 0 }, () => [
                  createElementVNode("tr", null, [
                    createElementVNode("td", _hoisted_1, [
                      createVNode(_VaMenuGroup, { "group-name": groupName }, null, 8, ["group-name"])
                    ])
                  ])
                ]) : createCommentVNode("", true),
                (openBlock(true), createElementBlock(Fragment, null, renderList(options, (option) => {
                  return openBlock(), createBlock(_sfc_main$1, {
                    key: unref(getTrackBy)(option),
                    name: unref(getText)(option),
                    icon: option.icon,
                    "right-icon": option.rightIcon,
                    disabled: unref(getDisabled)(option),
                    onSelected: ($event) => _ctx.$emit("selected", unref(getValue)(option), option)
                  }, {
                    "left-icon": withCtx((bind) => [
                      renderSlot(_ctx.$slots, "left-icon", normalizeProps(guardReactiveProps(bind)))
                    ]),
                    "right-icon": withCtx((bind) => [
                      renderSlot(_ctx.$slots, "right-icon", normalizeProps(guardReactiveProps(bind)))
                    ]),
                    _: 2
                  }, 1032, ["name", "icon", "right-icon", "disabled", "onSelected"]);
                }), 128))
              ], 64);
            }), 128))
          ])
        ])
      ], 16);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaMenuList.vue_vue_type_script_setup_true_lang.mjs.map
