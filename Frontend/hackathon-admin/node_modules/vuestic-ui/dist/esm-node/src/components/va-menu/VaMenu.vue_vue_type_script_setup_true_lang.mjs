import { defineComponent, ref, openBlock, createBlock, unref, mergeProps, withCtx, renderSlot, createVNode, withKeys, withModifiers, createSlots, nextTick } from "vue";
import { V as VaDropdown } from "../va-dropdown/index.mjs";
import { V as VaMenuList } from "../va-menu-list/index.mjs";
import { f as focusFirstFocusableChild } from "../../utils/focus.mjs";
import { u as unwrapEl } from "../../utils/unwrapEl.mjs";
import { u as useImmediateFocus } from "../../composables/useImmediateFocus.mjs";
import { V as VaDropdownContent } from "../va-dropdown/components/VaDropdownContent/index.mjs";
import { e as extractComponentProps, a as extractComponentEmits } from "../../utils/component-options/extract-component-options.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.mjs";
import { f as filterComponentProps } from "../../utils/component-options/filter-props.mjs";
const VaMenuListProps = extractComponentProps(VaMenuList);
const VaMenuListEmits = extractComponentEmits(VaMenuList);
const VaDropdownProps = extractComponentProps(VaDropdown);
const VaDropdownEmits = extractComponentEmits(VaDropdown);
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaMenu"
  },
  __name: "VaMenu",
  props: {
    ...useComponentPresetProp,
    ...VaMenuListProps,
    ...VaDropdownProps,
    stickToEdges: { type: Boolean, default: true }
  },
  emits: [
    ...VaDropdownEmits,
    ...VaMenuListEmits
  ],
  setup(__props, { expose: __expose, emit: __emit }) {
    const menuList = ref();
    const dropdown = ref();
    useImmediateFocus(menuList);
    const close = () => {
      var _a;
      (_a = dropdown.value) == null ? void 0 : _a.hide();
      nextTick(() => {
        var _a2;
        const el = unwrapEl((_a2 = dropdown.value) == null ? void 0 : _a2.anchorRef);
        if (el) {
          focusFirstFocusableChild(el);
        }
      });
    };
    const onKeydown = (event) => {
      if (event.key === "Escape") {
        close();
      }
      if (event.key === "ArrowDown" || event.key === "ArrowUp") {
        event.preventDefault();
      }
    };
    const menuListProps = filterComponentProps(VaMenuListProps);
    const dropdownProps = filterComponentProps(VaDropdownProps);
    __expose({
      close
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(VaDropdown), mergeProps(unref(dropdownProps), {
        ref_key: "dropdown",
        ref: dropdown
      }), {
        anchor: withCtx(() => [
          renderSlot(_ctx.$slots, "anchor")
        ]),
        default: withCtx(() => [
          createVNode(unref(VaDropdownContent), { onKeydown }, {
            default: withCtx(() => [
              createVNode(unref(VaMenuList), mergeProps({
                onKeydown: _cache[0] || (_cache[0] = withKeys(withModifiers(() => {
                }, ["prevent", "stop"]), ["enter", "space"]))
              }, unref(menuListProps), {
                ref_key: "menuList",
                ref: menuList,
                onSelected: _cache[1] || (_cache[1] = ($event) => {
                  _ctx.$emit("selected", $event);
                  close();
                })
              }), createSlots({ _: 2 }, [
                _ctx.$slots.default ? {
                  name: "default",
                  fn: withCtx(() => [
                    renderSlot(_ctx.$slots, "default")
                  ]),
                  key: "0"
                } : void 0
              ]), 1040)
            ]),
            _: 3
          })
        ]),
        _: 3
      }, 16);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaMenu.vue_vue_type_script_setup_true_lang.mjs.map
