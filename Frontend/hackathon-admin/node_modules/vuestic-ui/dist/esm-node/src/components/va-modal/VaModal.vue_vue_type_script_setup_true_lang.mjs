import { defineComponent, h, Transition, shallowRef, toRef, computed, watchEffect, watch, onMounted, onBeforeUnmount, openBlock, createElementBlock, normalizeClass, mergeProps, unref, renderSlot, normalizeProps, guardReactiveProps, createCommentVNode, createBlock, Teleport, createVNode, withCtx, normalizeStyle, createElementVNode, withKeys, toDisplayString, createTextVNode, nextTick } from "vue";
import { V as VaButton } from "../va-button/index.mjs";
import { V as VaIcon } from "../va-icon/index.mjs";
import { u as useBlur } from "./hooks/useBlur.mjs";
import { u as useZIndex } from "../../composables/useZIndex.mjs";
import { d as defineChildProps, u as useChildComponents } from "../../composables/useChildComponents.mjs";
import { u as useStatefulProps, a as useStatefulEmits, b as useStateful } from "../../composables/useStateful.mjs";
import { u as useTrapFocus } from "../../composables/useTrapFocus.mjs";
import { u as useModalLevel } from "../../composables/useModalLevel.mjs";
import { b as useSizeRef } from "../../composables/useSize.mjs";
import { u as useWindow } from "../../composables/useWindow.mjs";
import { u as useTeleported } from "../../composables/useTeleported.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.mjs";
import { a as useTranslationProp, u as useTranslation } from "../../composables/useTranslation.mjs";
import { u as useColors } from "../../composables/useColors.mjs";
import { u as useTextColor } from "../../composables/useTextColor.mjs";
import { u as useClickOutside } from "../../composables/useClickOutside.mjs";
import { u as useDocument } from "../../composables/useDocument.mjs";
const _hoisted_1 = ["aria-labelledby"];
const _hoisted_2 = {
  key: 2,
  class: "va-modal__inner"
};
const _hoisted_3 = { class: "va-modal__header" };
const _hoisted_4 = {
  key: 0,
  class: "va-modal__message"
};
const _hoisted_5 = {
  key: 1,
  class: "va-modal__message"
};
const _hoisted_6 = {
  key: 2,
  class: "va-modal__footer"
};
const _hoisted_7 = {
  key: 3,
  class: "va-modal__footer"
};
const WithTransition = defineComponent({
  name: "ModalElement",
  inheritAttrs: false,
  props: {
    ...useComponentPresetProp,
    isTransition: { type: Boolean, default: true }
  },
  setup: (props, { slots, attrs }) => () => {
    var _a;
    return props.isTransition ? h(Transition, { ...attrs }, slots) : (_a = slots.default) == null ? void 0 : _a.call(slots, attrs);
  }
});
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaModal",
    inheritAttrs: false
  },
  __name: "VaModal",
  props: {
    ...defineChildProps({
      cancelButton: VaButton,
      okButton: VaButton,
      closeButton: VaIcon
    }),
    ...useStatefulProps,
    modelValue: { type: Boolean, default: false },
    attachElement: { type: String, default: "body" },
    allowBodyScroll: { type: Boolean, default: false },
    disableAttachment: { type: Boolean, default: false },
    title: { type: String, default: "" },
    message: { type: String, default: "" },
    okText: useTranslationProp("$t:ok"),
    cancelText: useTranslationProp("$t:cancel"),
    hideDefaultActions: { type: Boolean, default: false },
    fullscreen: { type: Boolean, default: false },
    closeButton: { type: Boolean, default: false },
    mobileFullscreen: { type: Boolean, default: true },
    noDismiss: { type: Boolean, default: false },
    noOutsideDismiss: { type: Boolean, default: false },
    noEscDismiss: { type: Boolean, default: false },
    maxWidth: { type: String, default: "" },
    maxHeight: { type: String, default: "" },
    anchorClass: { type: String },
    size: {
      type: String,
      default: "medium"
    },
    sizesConfig: {
      type: Object,
      default: () => ({
        defaultSize: "medium",
        sizes: {
          small: 576,
          medium: 768,
          large: 992,
          auto: "max-content"
        }
      })
    },
    fixedLayout: { type: Boolean, default: false },
    withoutTransitions: { type: Boolean, default: false },
    overlay: { type: Boolean, default: true },
    overlayOpacity: { type: [Number, String], default: 0.6 },
    showNestedOverlay: { type: Boolean, default: false },
    blur: { type: Boolean, default: false },
    zIndex: { type: [Number, String], default: void 0 },
    backgroundColor: { type: String, default: "background-secondary" },
    noPadding: { type: Boolean, default: false },
    beforeClose: { type: Function },
    beforeOk: { type: Function },
    beforeCancel: { type: Function },
    ariaCloseLabel: useTranslationProp("$t:close")
  },
  emits: [
    ...useStatefulEmits,
    "cancel",
    "ok",
    "before-open",
    "open",
    "before-close",
    "close",
    "click-outside"
  ],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    useChildComponents(props);
    const emit = __emit;
    const rootElement = shallowRef();
    const modalDialog = shallowRef();
    const { trapFocusIn, freeFocus } = useTrapFocus();
    const {
      registerModal,
      unregisterModal,
      isTopLevelModal,
      isLowestLevelModal
    } = useModalLevel();
    const { getColor } = useColors();
    const { textColorComputed } = useTextColor(toRef(props, "backgroundColor"));
    const { valueComputed } = useStateful(props, emit);
    const computedClass = computed(() => ({
      "va-modal--fullscreen": props.fullscreen,
      "va-modal--mobile-fullscreen": props.mobileFullscreen,
      "va-modal--fixed-layout": props.fixedLayout,
      "va-modal--no-padding": props.noPadding
    }));
    const {
      zIndex: zIndexInherited
    } = useZIndex(valueComputed);
    const zIndexComputed = computed(() => {
      if (props.zIndex) {
        return Number(props.zIndex);
      }
      return zIndexInherited.value;
    });
    const sizeComputed = useSizeRef(props);
    const computedDialogStyle = computed(() => ({
      maxWidth: props.maxWidth || sizeComputed.value,
      maxHeight: props.maxHeight,
      color: textColorComputed.value,
      background: getColor(props.backgroundColor)
    }));
    const computedOverlayClass = computed(() => ({
      "va-modal__overlay--lowest": isLowestLevelModal.value,
      "va-modal__overlay--top": isTopLevelModal.value
    }));
    const getOverlayOpacity = () => {
      if (props.showNestedOverlay && !isLowestLevelModal.value) {
        return "var(--va-modal-overlay-nested-opacity)";
      }
      return "var(--va-modal-overlay-opacity)";
    };
    const computedOverlayStyles = computed(() => {
      if (!props.overlay) {
        return;
      }
      if (isTopLevelModal.value || props.showNestedOverlay) {
        return {
          "background-color": "var(--va-modal-overlay-color)",
          opacity: getOverlayOpacity()
        };
      }
      return "";
    });
    const show = () => {
      valueComputed.value = true;
    };
    const hide = (cb) => {
      const _hide = () => {
        valueComputed.value = false;
        cb == null ? void 0 : cb();
      };
      props.beforeClose ? props.beforeClose(_hide) : _hide();
    };
    const toggle = () => {
      valueComputed.value = !valueComputed.value;
    };
    const cancel = () => {
      const _hide = () => {
        hide(() => emit("cancel"));
      };
      props.beforeCancel ? props.beforeCancel(_hide) : _hide();
    };
    const ok = () => {
      const _hide = () => {
        hide(() => emit("ok"));
      };
      props.beforeOk ? props.beforeOk(_hide) : _hide();
    };
    const trapFocusInModal = () => {
      nextTick(() => {
        if (modalDialog.value) {
          trapFocusIn(modalDialog.value);
        }
      });
    };
    const onBeforeEnterTransition = (el) => emit("before-open", el);
    const onAfterEnterTransition = (el) => emit("open", el);
    const onBeforeLeaveTransition = (el) => emit("before-close", el);
    const onAfterLeaveTransition = (el) => emit("close", el);
    const listenKeyUp = (e) => {
      const hideModal = () => {
        if (e.code === "Escape" && !props.noEscDismiss && !props.noDismiss && isTopLevelModal.value) {
          cancel();
        }
      };
      setTimeout(hideModal);
    };
    useClickOutside([modalDialog], () => {
      if (!valueComputed.value || props.noOutsideDismiss || props.noDismiss || !isTopLevelModal.value) {
        return;
      }
      emit("click-outside");
      cancel();
    });
    const window = useWindow();
    watchEffect(() => {
      var _a, _b;
      if (valueComputed.value) {
        (_a = window.value) == null ? void 0 : _a.addEventListener("keyup", listenKeyUp);
      } else {
        (_b = window.value) == null ? void 0 : _b.removeEventListener("keyup", listenKeyUp);
      }
    });
    useBlur(toRef(props, "blur"), valueComputed);
    const documentRef = useDocument();
    const setBodyOverflow = (overflow) => {
      if (!documentRef.value || props.allowBodyScroll) {
        return;
      }
      if (overflow === "hidden") {
        documentRef.value.body.classList.add("va-modal-open");
      } else {
        documentRef.value.body.classList.remove("va-modal-open");
      }
    };
    const onShow = () => {
      registerModal();
      setBodyOverflow("hidden");
    };
    const onHide = () => {
      if (isLowestLevelModal.value) {
        freeFocus();
        setBodyOverflow("");
      }
      unregisterModal();
    };
    watch(valueComputed, (newValue) => {
      if (newValue) {
        onShow();
      } else {
        onHide();
      }
    });
    onMounted(() => {
      if (valueComputed.value) {
        onShow();
      }
      if (isTopLevelModal.value) {
        trapFocusInModal();
      }
    });
    onBeforeUnmount(() => {
      onHide();
    });
    watch(isTopLevelModal, (newIsTopLevelModal) => {
      if (newIsTopLevelModal) {
        trapFocusInModal();
      }
    }, { immediate: true });
    __expose({
      show,
      hide,
      toggle,
      cancel,
      ok,
      onBeforeEnterTransition,
      onAfterEnterTransition,
      onBeforeLeaveTransition,
      onAfterLeaveTransition,
      listenKeyUp
    });
    const { tp } = useTranslation();
    const {
      teleportFromAttrs,
      teleportedAttrs
    } = useTeleported();
    const slotBind = { show, hide, toggle, cancel, ok };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref_key: "rootElement",
        ref: rootElement,
        class: normalizeClass(["va-modal-entry", _ctx.$props.anchorClass])
      }, [
        _ctx.$slots.anchor ? (openBlock(), createElementBlock("div", mergeProps({
          key: 0,
          class: "va-modal__anchor"
        }, unref(teleportFromAttrs)), [
          renderSlot(_ctx.$slots, "anchor", normalizeProps(guardReactiveProps(slotBind)))
        ], 16)) : createCommentVNode("", true),
        (openBlock(), createBlock(Teleport, {
          to: __props.attachElement,
          disabled: _ctx.$props.disableAttachment
        }, [
          createVNode(unref(WithTransition), mergeProps({
            name: "va-modal",
            isTransition: !_ctx.$props.withoutTransitions,
            duration: 300,
            style: { zIndex: zIndexComputed.value },
            appear: ""
          }, { ..._ctx.$attrs, ...unref(teleportedAttrs) }, {
            onBeforeEnter: onBeforeEnterTransition,
            onAfterEnter: onAfterEnterTransition,
            onBeforeLeave: onBeforeLeaveTransition,
            onAfterLeave: onAfterLeaveTransition
          }), {
            default: withCtx(() => [
              unref(valueComputed) ? (openBlock(), createElementBlock("div", {
                key: 0,
                "aria-labelledby": __props.title,
                class: normalizeClass([computedClass.value, "va-modal"]),
                role: "dialog",
                "aria-modal": "true"
              }, [
                _ctx.$props.overlay ? (openBlock(), createElementBlock("div", {
                  key: 0,
                  class: normalizeClass(["va-modal__overlay", computedOverlayClass.value]),
                  style: normalizeStyle(computedOverlayStyles.value)
                }, null, 6)) : createCommentVNode("", true),
                createElementVNode("div", {
                  ref_key: "modalDialog",
                  ref: modalDialog,
                  class: "va-modal__dialog",
                  style: normalizeStyle([computedDialogStyle.value])
                }, [
                  _ctx.$props.fullscreen || _ctx.$props.closeButton ? (openBlock(), createBlock(unref(VaIcon), {
                    key: 0,
                    "va-child": "closeButton",
                    class: normalizeClass([{ "va-modal__close--fullscreen": _ctx.$props.fullscreen }, "va-modal__close"]),
                    "aria-label": unref(tp)(_ctx.$props.ariaCloseLabel),
                    role: "button",
                    tabindex: "0",
                    name: "va-close",
                    onClick: cancel,
                    onKeydown: [
                      withKeys(cancel, ["space"]),
                      withKeys(cancel, ["enter"])
                    ]
                  }, null, 8, ["class", "aria-label"])) : createCommentVNode("", true),
                  _ctx.$slots.content ? renderSlot(_ctx.$slots, "content", normalizeProps(mergeProps({ key: 1 }, slotBind))) : (openBlock(), createElementBlock("div", _hoisted_2, [
                    createElementVNode("div", _hoisted_3, [
                      renderSlot(_ctx.$slots, "header", normalizeProps(guardReactiveProps(slotBind)), () => [
                        __props.title ? (openBlock(), createElementBlock("div", {
                          key: 0,
                          class: "va-modal__title",
                          style: normalizeStyle({ color: unref(getColor)("primary") })
                        }, toDisplayString(_ctx.$props.title), 5)) : createCommentVNode("", true)
                      ])
                    ]),
                    _ctx.$props.message ? (openBlock(), createElementBlock("div", _hoisted_4, toDisplayString(_ctx.$props.message), 1)) : createCommentVNode("", true),
                    _ctx.$slots.default ? (openBlock(), createElementBlock("div", _hoisted_5, [
                      renderSlot(_ctx.$slots, "default", normalizeProps(guardReactiveProps(slotBind)))
                    ])) : createCommentVNode("", true),
                    (_ctx.$props.cancelText || _ctx.$props.okText) && !_ctx.$props.hideDefaultActions ? (openBlock(), createElementBlock("div", _hoisted_6, [
                      _ctx.$props.cancelText ? (openBlock(), createBlock(unref(VaButton), {
                        key: 0,
                        "va-child": "cancelButton",
                        preset: "secondary",
                        color: "secondary",
                        class: "va-modal__default-cancel-button",
                        onClick: cancel
                      }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString(unref(tp)(_ctx.$props.cancelText)), 1)
                        ]),
                        _: 1
                      })) : createCommentVNode("", true),
                      createVNode(unref(VaButton), {
                        "va-child": "okButton",
                        onClick: ok
                      }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString(unref(tp)(_ctx.$props.okText)), 1)
                        ]),
                        _: 1
                      })
                    ])) : createCommentVNode("", true),
                    _ctx.$slots.footer ? (openBlock(), createElementBlock("div", _hoisted_7, [
                      renderSlot(_ctx.$slots, "footer", normalizeProps(guardReactiveProps(slotBind)))
                    ])) : createCommentVNode("", true)
                  ]))
                ], 4)
              ], 10, _hoisted_1)) : createCommentVNode("", true)
            ]),
            _: 3
          }, 16, ["isTransition", "style"])
        ], 8, ["to", "disabled"]))
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaModal.vue_vue_type_script_setup_true_lang.mjs.map
