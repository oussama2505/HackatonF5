import { defineComponent, useSlots, computed, openBlock, createBlock, unref, mergeProps, withCtx, createElementVNode, normalizeStyle, createElementBlock, renderSlot, createVNode, createCommentVNode, createTextVNode, toDisplayString } from "vue";
import { V as VaDropdown } from "../va-dropdown/index.mjs";
import { e as extractComponentProps } from "../../utils/component-options/extract-component-options.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.mjs";
import { f as filterComponentProps } from "../../utils/component-options/filter-props.mjs";
import { u as useColors } from "../../composables/useColors.mjs";
import { u as useTextColor } from "../../composables/useTextColor.mjs";
import { V as VaIcon } from "../va-icon/index.mjs";
const _hoisted_1 = {
  key: 0,
  "aria-hidden": "true",
  class: "va-popover__icon"
};
const _hoisted_2 = { key: 1 };
const _hoisted_3 = {
  key: 0,
  class: "va-popover__title"
};
const _hoisted_4 = {
  key: 1,
  class: "va-popover__body"
};
const VaDropdownProps = extractComponentProps(VaDropdown, ["closeOnClickOutside"]);
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaPopover"
  },
  __name: "VaPopover",
  props: {
    ...VaDropdownProps,
    ...useComponentPresetProp,
    trigger: { ...VaDropdownProps.trigger, default: ["hover", "enter", "space", "arrow-down", "arrow-up"] },
    color: { type: String, default: "#1b1a1f" },
    // TODO: Make sure add this color to pallete
    textColor: { type: String },
    icon: { type: String, default: "" },
    title: { type: String, default: "" },
    message: { type: String, default: "" },
    autoHide: { type: Boolean, default: true },
    offset: { type: [Array, Number], default: 4 },
    contentClass: { type: String, default: "" }
  },
  setup(__props) {
    const props = __props;
    const VaDropdownPropValues = filterComponentProps(VaDropdownProps);
    const { getColor, getBoxShadowColor } = useColors();
    const slots = useSlots();
    const { textColorComputed } = useTextColor(computed(() => getColor(props.color)));
    const showIconComputed = computed(() => props.icon || slots.icon);
    const showTitleComputed = computed(() => props.title || slots.title);
    const showBodyComputed = computed(() => props.message || slots.body);
    const showPopoverContentComputed = computed(
      () => showTitleComputed.value || showBodyComputed.value
    );
    const computedPopoverStyle = computed(() => ({
      boxShadow: `var(--va-popover-content-box-shadow) ${getBoxShadowColor(getColor(props.color))}`,
      backgroundColor: getColor(props.color),
      color: textColorComputed.value
    }));
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(VaDropdown), mergeProps(unref(VaDropdownPropValues), {
        "model-value": _ctx.modelValue,
        "close-on-click-outside": __props.autoHide,
        offset: _ctx.$props.offset,
        "content-class": _ctx.$props.contentClass,
        class: "va-popover"
      }), {
        default: withCtx(() => [
          createElementVNode("div", {
            style: normalizeStyle(computedPopoverStyle.value),
            class: "va-popover__content",
            role: "tooltip"
          }, [
            showIconComputed.value ? (openBlock(), createElementBlock("div", _hoisted_1, [
              renderSlot(_ctx.$slots, "icon", {}, () => [
                createVNode(unref(VaIcon), {
                  name: _ctx.$props.icon,
                  color: unref(textColorComputed)
                }, null, 8, ["name", "color"])
              ])
            ])) : createCommentVNode("", true),
            showPopoverContentComputed.value ? (openBlock(), createElementBlock("div", _hoisted_2, [
              showTitleComputed.value ? (openBlock(), createElementBlock("div", _hoisted_3, [
                renderSlot(_ctx.$slots, "title", {}, () => [
                  createTextVNode(toDisplayString(_ctx.$props.title), 1)
                ])
              ])) : createCommentVNode("", true),
              showBodyComputed.value ? (openBlock(), createElementBlock("div", _hoisted_4, [
                renderSlot(_ctx.$slots, "body", {}, () => [
                  createTextVNode(toDisplayString(_ctx.$props.message), 1)
                ])
              ])) : createCommentVNode("", true)
            ])) : createCommentVNode("", true)
          ], 4)
        ]),
        anchor: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16, ["model-value", "close-on-click-outside", "offset", "content-class"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaPopover.vue_vue_type_script_setup_true_lang.mjs.map
