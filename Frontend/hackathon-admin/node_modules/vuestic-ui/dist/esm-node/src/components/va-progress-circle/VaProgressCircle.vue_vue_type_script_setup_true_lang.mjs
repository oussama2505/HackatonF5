import { defineComponent, computed, openBlock, createElementBlock, mergeProps, createElementVNode, normalizeStyle, renderSlot, createCommentVNode } from "vue";
import { b as clamp } from "../../../vendor.mjs";
import { u as useSizeProps, a as useSize } from "../../composables/useSize.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.mjs";
import { a as useTranslationProp, u as useTranslation } from "../../composables/useTranslation.mjs";
import { u as useColors } from "../../composables/useColors.mjs";
const _hoisted_1 = {
  class: "va-progress-circle__wrapper",
  viewBox: "0 0 40 40"
};
const _hoisted_2 = ["r", "stroke", "stroke-width", "stroke-dasharray", "stroke-dashoffset"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaProgressCircle"
  },
  __name: "VaProgressCircle",
  props: {
    ...useSizeProps,
    ...useComponentPresetProp,
    modelValue: { type: [Number, String], default: 0 },
    indeterminate: { type: Boolean, default: false },
    thickness: { type: [Number, String], default: 0.06 },
    color: { type: String, default: "primary" },
    ariaLabel: useTranslationProp("$t:progressState")
  },
  setup(__props) {
    const props = __props;
    const { getColor } = useColors();
    const { sizeComputed } = useSize(props);
    const cappedThickness = computed(() => clamp(Number(props.thickness), 0, 1) / 2 * 100);
    const radius = computed(() => 20 - 20 * cappedThickness.value / 100);
    const dasharray = computed(() => 2 * Math.PI * radius.value);
    const dashoffset = computed(() => dasharray.value * (1 - clamp(Number(props.modelValue), 0, 100) / 100));
    const colorComputed = computed(() => getColor(props.color, void 0, true));
    const { tp } = useTranslation();
    const infoStyle = computed(() => ({ color: colorComputed.value }));
    const rootStyle = computed(() => ({
      width: sizeComputed.value,
      height: sizeComputed.value
    }));
    const rootClass = computed(() => ({
      "va-progress-circle--indeterminate": props.indeterminate
    }));
    const ariaAttributesComputed = computed(() => ({
      role: "progressbar",
      "aria-label": tp(props.ariaLabel),
      "aria-valuenow": !props.indeterminate ? props.modelValue : void 0
    }));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", mergeProps({
        class: ["va-progress-circle", rootClass.value],
        style: rootStyle.value
      }, ariaAttributesComputed.value), [
        (openBlock(), createElementBlock("svg", _hoisted_1, [
          createElementVNode("circle", {
            class: "va-progress-circle__overlay",
            cx: "50%",
            cy: "50%",
            r: radius.value,
            fill: "none",
            stroke: colorComputed.value,
            "stroke-width": cappedThickness.value + "%",
            "stroke-dasharray": dasharray.value,
            "stroke-dashoffset": dashoffset.value
          }, null, 8, _hoisted_2)
        ])),
        _ctx.$slots.default ? (openBlock(), createElementBlock("div", {
          key: 0,
          style: normalizeStyle(infoStyle.value),
          class: "va-progress-circle__info"
        }, [
          renderSlot(_ctx.$slots, "default")
        ], 4)) : createCommentVNode("", true)
      ], 16);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaProgressCircle.vue_vue_type_script_setup_true_lang.mjs.map
