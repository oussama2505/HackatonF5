{"version":3,"file":"VaSelect.vue_vue_type_script_setup_true_lang.mjs","sources":["../../../../../src/components/va-select/VaSelect.vue"],"sourcesContent":["<template>\n  <va-dropdown\n    ref=\"dropdown\"\n    v-model=\"showDropdownContentComputed\"\n    class=\"va-select va-select__dropdown va-select-dropdown\"\n    v-bind=\"dropdownPropsComputed\"\n    role=\"combobox\"\n    inner-anchor-selector=\".va-input-wrapper__field\"\n    :keyboard-navigation=\"false\"\n  >\n    <template #anchor>\n      <va-input-wrapper\n        v-bind=\"inputWrapperPropsComputed\"\n        ref=\"input\"\n        class=\"va-select__anchor va-select-anchor__input\"\n        aria-haspopup=\"listbox\"\n        :class=\"inputWrapperClassComputed\"\n        :model-value=\"valueString\"\n        :readonly=\"true\"\n        :aria-label=\"$props.ariaLabel\"\n        :aria-controls=\"popupId\"\n        :aria-owns=\"popupId\"\n        @focus=\"onInputFocus\"\n        @blur=\"onInputBlur\"\n      >\n        <template\n          v-for=\"(_, name) in $slots\"\n          :key=\"name\"\n          v-slot:[name]=\"slotScope\"\n        >\n          <slot :name=\"name\" v-bind=\"slotScope\" />\n        </template>\n\n        <template #icon>\n          <va-icon\n            v-if=\"showClearIcon\"\n            role=\"button\"\n            :aria-label=\"tp($props.ariaClearLabel)\"\n            v-bind=\"clearIconProps\"\n            @click.stop=\"reset\"\n            @keydown.enter.stop=\"reset\"\n            @keydown.space.stop=\"reset\"\n          />\n        </template>\n\n        <template #appendInner>\n          <va-icon\n            :color=\"toggleIconColor\"\n            :name=\"toggleIcon\"\n            class=\"va-select__toggle-icon\"\n            role=\"button\"\n            :tabindex=\"openSelectButtonTabIndexComputed\"\n            :aria-expanded=\"showDropdownContentComputed\"\n            @keydown.enter=\"toggleDropdown\"\n          />\n        </template>\n\n        <template #default=\"{ ariaAttributes }\">\n          <va-select-content\n            v-bind=\"selectContentPropsComputed\"\n            :ariaAttributes=\"ariaAttributes\"\n            :separator=\"$props.separator\"\n            @toggle-hidden=\"toggleHiddenOptionsState\"\n            @autocomplete-input=\"setAutocompleteValue\"\n            @focus-prev=\"focusPreviousOption\"\n            @focus-next=\"focusNextOption\"\n            @select-option=\"selectOrAddOption\"\n            @delete-last-selected=\"deleteLastSelected\"\n          >\n            <template\n              v-for=\"(_, name) in $slots\"\n              :key=\"name\"\n              v-slot:[name]=\"slotScope\"\n            >\n              <slot :name=\"name\" v-bind=\"slotScope\" />\n            </template>\n          </va-select-content>\n        </template>\n      </va-input-wrapper>\n    </template>\n\n    <va-dropdown-content\n      class=\"va-select-dropdown__content\"\n      :style=\"{ width: $props.width }\"\n      @keydown.esc=\"hideAndFocus\"\n      role=\"dialog\"\n    >\n      <va-input-wrapper\n        v-if=\"showSearchInput\"\n        ref=\"searchBar\"\n        class=\"va-select-dropdown__content-search-input\"\n        v-model=\"searchInput\"\n        :aria-label=\"tp($props.ariaSearchLabel)\"\n        :tabindex=\"tabIndexComputed\"\n        :placeholder=\"tp($props.searchPlaceholderText)\"\n        preset=\"bordered\"\n        @keydown.up.stop.prevent=\"focusPreviousOption\"\n        @keydown.left.stop.prevent=\"focusPreviousOption\"\n        @keydown.down.stop.prevent=\"focusNextOption\"\n        @keydown.right.stop.prevent=\"focusNextOption\"\n        @keydown.enter.prevent=\"selectOrAddOption\"\n        @focus=\"hoveredOption = null\"\n      />\n      <va-select-option-list\n        ref=\"optionList\"\n        class=\"va-select-dropdown__options-wrapper\"\n        v-model:hoveredOption=\"hoveredOption\"\n        :style=\"{ maxHeight: $props.maxHeight }\"\n        :id=\"popupId\"\n        v-bind=\"optionsListPropsComputed\"\n        @select-option=\"selectHoveredOption\"\n        @no-previous-option-to-hover=\"focusSearchBar\"\n        @keydown.tab.stop.prevent=\"searchBar && searchBar.focus()\"\n        @keydown=\"onHintedSearch\"\n        @scroll-bottom=\"onScrollBottom\"\n      >\n        <template #default=\"slotData\">\n          <slot name=\"option\" v-bind=\"slotData\" />\n        </template>\n\n        <template #option-content=\"slotData\">\n          <slot name=\"option-content\" v-bind=\"slotData\" />\n        </template>\n      </va-select-option-list>\n    </va-dropdown-content>\n  </va-dropdown>\n</template>\n\n<script lang=\"ts\">\nimport { ref, shallowRef, computed, watch, nextTick, type PropType, type Ref, useSlots, ComputedRef } from 'vue'\nimport pick from 'lodash/pick.js'\n\nimport {\n  useComponentPresetProp,\n  useSelectableList, useSelectableListProps,\n  useValidation, useValidationProps, useValidationEmits, ValidationProps,\n  useFormFieldProps,\n  useLoadingProps,\n  useMaxSelections, useMaxSelectionsProps,\n  useClearableProps, useClearable, useClearableEmits,\n  useFocusDeep,\n  useTranslation, useTranslationProp,\n  useBem,\n  useThrottleProps,\n  useDropdownable, useDropdownableEmits, useDropdownableProps, useSyncProp,\n  useNumericProp,\n} from '../../composables'\n\nimport { VaInputWrapper } from '../va-input-wrapper'\nimport { VaDropdown, VaDropdownContent } from '../va-dropdown'\nimport { VaIcon } from '../va-icon'\nimport { VaSelectOptionList } from './components/VaSelectOptionList'\nimport { VaSelectContent } from './components/VaSelectContent'\n\nimport { useMaxVisibleOptions, useMaxVisibleOptionsProps } from './hooks/useMaxVisibleOptions'\nimport { useToggleIcon, useToggleIconProps } from './hooks/useToggleIcon'\nimport { useStringValue, useStringValueProps } from './hooks/useStringValue'\nimport { useAutocomplete, useAutocompleteProps } from './hooks/useAutocomplete'\nimport { useSelectAria } from './hooks/useSelectAria'\n\nimport { blurElement, focusElement } from '../../utils/focus'\nimport { unwrapEl } from '../../utils/unwrapEl'\nimport { isNilValue } from '../../utils/isNilValue'\nimport { warn } from '../../utils/console'\n\nimport type { SelectOption } from './types'\nimport type { DropdownOffsetProp } from '../va-dropdown/types'\nimport { extractComponentProps, filterComponentProps } from '../../utils/component-options'\n\nconst VaInputWrapperProps = extractComponentProps(VaInputWrapper)\n</script>\n\n<script lang=\"ts\" setup>\n\ndefineOptions({\n  name: 'VaSelect',\n})\n\nconst props = defineProps({\n  ...VaInputWrapperProps,\n  ...useComponentPresetProp,\n  ...useSelectableListProps,\n  ...useValidationProps as ValidationProps<SelectOption>,\n  ...useLoadingProps,\n  ...useMaxSelectionsProps,\n  ...useClearableProps,\n  ...useFormFieldProps,\n  ...useMaxVisibleOptionsProps,\n  ...useToggleIconProps,\n  ...useThrottleProps,\n  ...useStringValueProps,\n  ...useAutocompleteProps,\n  ...useDropdownableProps,\n\n  modelValue: {\n    type: [String, Number, Array, Object, Boolean] as PropType<SelectOption | SelectOption[]>,\n    default: undefined,\n  },\n\n    // Dropdown placement\n  placement: { ...useDropdownableProps.placement, default: 'bottom' },\n  keepAnchorWidth: { ...useDropdownableProps.keepAnchorWidth, default: true },\n  offset: { ...useDropdownableProps.offset, default: [1, 0] as DropdownOffsetProp },\n  closeOnContentClick: { ...useDropdownableProps.closeOnContentClick, default: false },\n  trigger: { ...useDropdownableProps.trigger, default: () => ['click', 'right-click', 'space', 'enter'] as const },\n\n  // Select options\n\n  allowCreate: {\n    type: [Boolean, String] as PropType<boolean | 'unique'>,\n    default: false,\n    validator: (mode: string | boolean) => [true, false, 'unique'].includes(mode),\n  },\n\n  color: { type: String, default: 'primary' },\n  multiple: { type: Boolean, default: false },\n  searchable: { type: Boolean, default: false },\n  width: { type: String, default: '100%' },\n  maxHeight: { type: String, default: '256px' },\n  noOptionsText: useTranslationProp('$t:noOptions'),\n  hideSelected: { type: Boolean, default: false },\n  tabindex: { type: [String, Number], default: 0 },\n  virtualScroller: { type: Boolean, default: false },\n  selectedTopShown: { type: Boolean, default: false },\n  highlightMatchedText: { type: Boolean, default: true },\n  minSearchChars: { type: [Number, String], default: 0 },\n  autoSelectFirstOption: { type: Boolean, default: false },\n\n    // Input style\n  placeholder: { type: String, default: '' },\n  searchPlaceholderText: useTranslationProp('$t:search'),\n\n  ariaLabel: useTranslationProp('$t:select'),\n  ariaSearchLabel: useTranslationProp('$t:optionsFilter'),\n  ariaClearLabel: useTranslationProp('$t:reset'),\n\n  search: { type: String, default: undefined },\n})\n\nconst emit = defineEmits([\n  'update:modelValue',\n  'update-search',\n  'create-new',\n  'scroll-bottom',\n  'update:search',\n  ...useDropdownableEmits,\n  ...useValidationEmits,\n  ...useClearableEmits,\n])\n\nconst { tp, t } = useTranslation()\n\nconst optionList = shallowRef<typeof VaSelectOptionList>()\nconst input = shallowRef<typeof VaInputWrapper>()\nconst searchBar = shallowRef<typeof VaInputWrapper>()\n\nconst isInputFocused = useFocusDeep(input as any)\n\nconst { getValue, getText, getTrackBy, tryResolveByValue } = useSelectableList(props)\n\nconst getValueText = (option: SelectOption) => getText(tryResolveByValue(option))\n\nconst onScrollBottom = () => emit('scroll-bottom')\n\nconst [searchVModel] = useSyncProp('search', props, emit, '')\nconst showSearchInput = computed(() => props.searchable || (props.allowCreate && !props.autocomplete))\n\nwatch(searchVModel, (value) => {\n  emit('update-search', value)\n  if (!props.autocomplete) {\n    hoveredOption.value = null\n  }\n})\n\nconst getOptionByValue = (value: SelectOption): SelectOption => {\n  // if value is an object, it should be selectable option itself\n  if (isNilValue(value) || typeof value === 'object') { return value }\n\n  const optionByValue = props.options.find((option) => value === getValue(option))\n\n  if (optionByValue === undefined) {\n    warn(`[VaSelect]: can not find option in options list (${JSON.stringify(props.options)}) by provided value (${JSON.stringify(value)})!`)\n\n    return value\n  }\n\n  return optionByValue\n}\n\nconst {\n  toggleHiddenOptionsState,\n  isAllOptionsShown,\n  visibleSelectedOptions,\n  hiddenSelectedOptionsAmount,\n  allSelectedOptions,\n} = useMaxVisibleOptions(props, getOptionByValue)\n\n// select value\nconst valueComputed = computed<SelectOption | SelectOption[]>({\n  get () {\n    if (props.multiple) { return allSelectedOptions.value }\n\n    const value = getOptionByValue(props.modelValue)\n\n    if (Array.isArray(value)) {\n      warn('Model value should be a string, number, boolean or an object for a single Select.')\n\n      if (value.length) {\n        return value.at(-1)\n      }\n    }\n\n    return value\n  },\n\n  set (option: SelectOption | SelectOption[]) {\n    if (Array.isArray(option)) {\n      emit('update:modelValue', option.map(getValue))\n    } else {\n      emit('update:modelValue', getValue(option))\n    }\n  },\n})\n\nconst valueString = useStringValue(props, visibleSelectedOptions, getValueText)\n\n// icons\nconst {\n  canBeCleared,\n  clearIconProps,\n  onFocus,\n  onBlur,\n} = useClearable(props, valueComputed)\n\nconst showClearIcon = computed(() => {\n  if (!canBeCleared.value) { return false }\n  if (props.multiple && Array.isArray(valueComputed.value)) { return !!valueComputed.value.length }\n  return true\n})\n\n// options\nconst filteredOptions = computed(() => {\n  if (!props.options) { return [] }\n\n  if (props.selectedTopShown) {\n    return props.options.slice().sort((a, b) => {\n      const isASelected = checkIsOptionSelected(a)\n      const isBSelected = checkIsOptionSelected(b)\n\n      if (isASelected && isBSelected) { return 0 }\n      if (isASelected && !isBSelected) { return -1 }\n\n      return 1\n    })\n  }\n\n  if (props.hideSelected) {\n    return props.options.filter((option) => !checkIsOptionSelected(option))\n  }\n\n  return props.options\n})\n\nconst normalizedOptionValue = computed(() => {\n  if (Array.isArray(valueComputed.value)) {\n    return valueComputed.value.map((value) => tryResolveByValue(value))\n  }\n\n  return tryResolveByValue(valueComputed.value)\n})\n\nconst checkIsOptionSelected = (option: SelectOption) => {\n  if (Array.isArray(normalizedOptionValue.value)) {\n    return !isNilValue(normalizedOptionValue.value.find((valueItem) => compareOptions(valueItem, option)))\n  }\n\n  return compareOptions(normalizedOptionValue.value, option)\n}\n\nconst compareOptions = (option1: SelectOption, option2: SelectOption) => {\n  const one = getValue(option1)\n  const two = getValue(option2)\n\n  // identity check works nice for strings and exact matches.\n  if (one === two) {\n    return true\n  }\n  if (typeof one === 'string' && typeof two === 'string') {\n    return one === two\n  }\n  if (one === null || two === null) {\n    return false\n  }\n  if (typeof one === 'object' && typeof two === 'object') {\n    return getTrackBy(one) === getTrackBy(two)\n  }\n\n  return false\n}\n\nconst isValueComputedArray = (v: Ref<SelectOption | SelectOption[]>): v is Ref<SelectOption[]> => Array.isArray(v.value)\n\nconst selectOption = (option: SelectOption) => {\n  if (hoveredOption.value === null) {\n    hideAndFocus()\n    return\n  }\n\n  if (showSearchInput.value) {\n    searchVModel.value = ''\n  }\n\n  if (props.multiple && isValueComputedArray(valueComputed)) {\n    const { exceedsMaxSelections, addOption } = useMaxSelections(valueComputed, ref(props.maxSelections))\n\n    const isSelected = checkIsOptionSelected(option)\n\n    if (isSelected) {\n      // Unselect\n      valueComputed.value = valueComputed.value.filter((optionSelected) => !compareOptions(option, optionSelected))\n    } else {\n      if (exceedsMaxSelections()) { return }\n      valueComputed.value = addOption(option)\n    }\n  } else {\n    valueComputed.value = option\n    hideAndFocus()\n  }\n\n  focusAutocompleteInput()\n}\n\nconst addNewOption = () => {\n  // Do not emit if option already exist and allow create is `unique`\n  const hasAddedOption = props.options?.some((option: SelectOption) => [searchVModel.value, autocompleteValue.value].includes(getText(option)))\n\n  const allowedToCreateCheck = !((props.allowCreate === 'unique' || props.autocomplete) && hasAddedOption)\n  if (allowedToCreateCheck) {\n    emit('create-new', searchVModel.value || autocompleteValue.value)\n\n    searchVModel.value = ''\n    autocompleteValue.value = ''\n  }\n}\n\n// Hovered options\n\nconst hoveredOption = ref<SelectOption | null>(null)\n\nconst selectHoveredOption = () => {\n  if (!isOpenSync.value) {\n    // We can not select options if they are hidden\n    handleDropdownOpen()\n    return\n  }\n\n  selectOption(hoveredOption.value)\n}\n\nconst selectOrAddOption = () => {\n  const allowedToCreate = !!props.allowCreate && (searchVModel.value || autocompleteValue.value)\n\n  if (hoveredOption.value !== null) {\n    selectHoveredOption()\n  } else if (allowedToCreate) {\n    addNewOption()\n  }\n}\n\nconst focusPreviousOption = () => optionList.value?.focusPreviousOption()\n\nconst focusNextOption = () => optionList.value?.focusNextOption()\n\n// Dropdown content\n\nconst { isOpenSync, dropdownProps } = useDropdownable(props, emit, {\n  defaultCloseOnValueUpdate: computed(() => !props.multiple),\n})\n\nconst dropdownPropsComputed = computed(() => ({\n  ...dropdownProps.value,\n  stateful: false,\n  innerAnchorSelector: '.va-input-wrapper__field',\n}))\n\nconst showDropdownContentComputed = computed({\n  get: () => isOpenSync.value,\n  set: (show: boolean) => {\n    show ? handleDropdownOpen() : handleDropdownClose()\n  },\n})\n\nconst handleDropdownOpen = () => {\n  if (props.disabled || props.readonly) { return }\n\n  isOpenSync.value = true\n  scrollToSelected()\n  focusSearchOrOptions()\n}\n\nconst handleDropdownClose = () => {\n  isOpenSync.value = false\n  if (!props.autocomplete) {\n    searchVModel.value = ''\n  }\n  nextTick(() => {\n    validate()\n    isInputFocused.focusIfNothingIfFocused()\n  })\n}\n\nconst hideAndFocus = () => {\n  handleDropdownClose()\n  isInputFocused.value = true\n}\n\nconst focusSearchBar = () => {\n  searchBar.value?.focus()\n}\n\nconst focusOptionList = () => {\n  optionList.value?.focus()\n  !props.modelValue && optionList.value?.focusFirstOption()\n}\n\nconst focusSearchOrOptions = async () => {\n  await nextTick()\n\n  if (showSearchInput.value) {\n    focusSearchBar()\n  } else {\n    focusOptionList()\n  }\n}\n\nconst onInputBlur = () => {\n  if (showDropdownContentComputed.value) { return }\n\n  onBlur()\n\n  validationListeners.onBlur()\n\n  isInputFocused.value\n    ? isInputFocused.value = false\n    : validate()\n}\n\nconst tabIndexComputed = computed(() => props.disabled ? -1 : props.tabindex)\nconst openSelectButtonTabIndexComputed = computed(() => props.disabled || props.autocomplete ? -1 : 0)\n\nconst scrollToSelected = () => {\n  const selected = valueComputed.value\n  const nothingSelected = typeof selected !== 'object' && Array.isArray(selected) && !selected.length\n\n  if (nothingSelected) { return }\n\n  const scrollTo = Array.isArray(selected) ? selected[selected.length - 1] : selected\n  hoveredOption.value = scrollTo\n  nextTick(() => optionList.value?.scrollToOption(scrollTo))\n}\n\n// Hinted search\n\nlet hintedSearchQuery = ''\nlet hintedSearchQueryTimeoutIndex!: ReturnType<typeof setTimeout>\nconst navigationKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Enter', ' ']\n\n// Hinted search - hover option if you typing it's value on select without search-bar\nconst onHintedSearch = (event: KeyboardEvent) => {\n  if (navigationKeys.some(key => key === event.key)) {\n    return\n  }\n\n  const isLetter: boolean = event.key.length === 1\n  const isDeleteKey: boolean = event.key === 'Backspace' || event.key === 'Delete'\n\n  clearTimeout(hintedSearchQueryTimeoutIndex)\n\n  if (isDeleteKey) {\n    // Remove last letter from query\n    hintedSearchQuery = hintedSearchQuery ? hintedSearchQuery.slice(0, -1) : ''\n  } else if (isLetter) {\n    // Add every new letter to the query\n    hintedSearchQuery += event.key\n  }\n\n  if (showSearchInput.value) {\n    searchVModel.value = hintedSearchQuery\n    return\n  }\n\n  // Search for an option that matches the query\n  if (hintedSearchQuery) {\n    const appropriateOption = props.options.find(option => getText(option).toLowerCase().startsWith(hintedSearchQuery.toLowerCase()))\n    if (appropriateOption) {\n      hoveredOption.value = appropriateOption\n    }\n  }\n\n  hintedSearchQueryTimeoutIndex = setTimeout(() => { hintedSearchQuery = '' }, 1000)\n}\n\nconst minSearchCharsComputed = useNumericProp('minSearchChars') as ComputedRef<number>\n\nconst optionsListPropsComputed = computed(() => ({\n  ...pick(props, ['textBy', 'trackBy', 'groupBy', 'valueBy', 'disabledBy', 'color', 'virtualScroller', 'highlightMatchedText', 'delay', 'selectedTopShown']),\n  autoSelectFirstOption: props.autoSelectFirstOption || props.autocomplete,\n  search: searchVModel.value || autocompleteValue.value,\n  tabindex: tabIndexComputed.value,\n  selectedValue: valueComputed.value,\n  options: filteredOptions.value,\n  getSelectedState: checkIsOptionSelected,\n  noOptionsText: tp(props.noOptionsText),\n  doShowAllOptions: doShowAllOptions.value,\n  minSearchChars: minSearchCharsComputed.value,\n}))\n\nconst { toggleIcon, toggleIconColor } = useToggleIcon(props, isOpenSync)\n\n// input wrapper\nconst isFocused = computed(() => isInputFocused.value || isOpenSync.value)\nconst slots = useSlots()\nconst inputWrapperClassComputed = useBem('va-select-anchor', () => ({\n  nowrap: !!(props.maxVisibleOptions && !slots.content),\n}))\nconst vaInputWrapperProps = filterComponentProps(VaInputWrapperProps)\nconst inputWrapperPropsComputed = computed(() => ({\n  ...vaInputWrapperProps.value,\n  error: computedError.value,\n  errorMessages: computedErrorMessages.value,\n  focused: isFocused.value,\n  'aria-label': props.ariaLabel || (props.modelValue ? `${t('selectedOption')}: ${props.modelValue}` : t('noSelectedOption')),\n}))\n\n// select content\nconst selectContentPropsComputed = computed(() => ({\n  ...pick(props, ['placeholder', 'autocomplete', 'multiple', 'disabled', 'readonly']),\n  tabindex: tabIndexComputed.value,\n  value: visibleSelectedOptions.value,\n  valueString: valueString.value,\n  hiddenSelectedOptionsAmount: hiddenSelectedOptionsAmount.value,\n  isAllOptionsShown: isAllOptionsShown.value,\n  focused: isInputFocused.value,\n  autocompleteInputValue: autocompleteValue.value,\n  getText: getValueText,\n}))\n\n// autocomplete\nconst autocompleteValue = useAutocomplete(searchVModel, props, visibleSelectedOptions, isOpenSync, getText)\nconst setAutocompleteValue = (v: string) => (autocompleteValue.value = v)\nconst doShowAllOptions = ref(true)\n\nwatch(showDropdownContentComputed, () => {\n  doShowAllOptions.value = true\n})\n\nwatch(searchVModel, () => {\n  doShowAllOptions.value = false\n})\n\n// public methods\nconst focus = () => {\n  if (props.disabled) { return }\n  focusElement(unwrapEl(input.value))\n}\n\nconst blur = () => {\n  if (showDropdownContentComputed.value) {\n    showDropdownContentComputed.value = false\n  }\n\n  nextTick(() => {\n    if (props.disabled) { return }\n    blurElement(unwrapEl(input.value))\n  })\n}\n\nconst reset = () => withoutValidation(() => {\n  if (props.multiple) {\n    valueComputed.value = Array.isArray(props.clearValue) ? props.clearValue : []\n  } else {\n    valueComputed.value = props.clearValue\n  }\n\n  searchVModel.value = ''\n  emit('clear')\n  resetValidation()\n  nextTick(() => {\n    isInputFocused.value = true\n  })\n})\n\nconst focusAutocompleteInput = (e?: Event) => {\n  if (props.autocomplete && !props.disabled && !props.readonly) {\n    e?.stopImmediatePropagation()\n\n    isInputFocused.value = true\n    isOpenSync.value = true\n  }\n}\n\nconst toggleDropdown = (e: KeyboardEvent) => {\n  if (props.disabled || props.readonly) { return }\n\n  const isInInput = e.target && ('tagName' in e.target) && e.target.tagName === 'INPUT'\n\n  if (e.code === 'Space' && isInInput) { return }\n\n  e.preventDefault()\n\n  showDropdownContentComputed.value = !showDropdownContentComputed.value\n}\n\nconst deleteLastSelected = () => {\n  if (!Array.isArray(valueComputed.value)) { return }\n\n  valueComputed.value = valueComputed.value.slice(0, -1)\n}\n\nconst {\n  validate,\n  computedError,\n  computedErrorMessages,\n  withoutValidation,\n  resetValidation,\n  validationAriaAttributes,\n  listeners: validationListeners,\n  isTouched,\n} = useValidation(props, emit, { reset, focus, value: valueComputed })\n\nwatch(isOpenSync, (isOpen) => {\n  if (!isOpen) {\n    isTouched.value = true\n  }\n})\n\nconst { popupId } = useSelectAria()\n\nconst searchInput = searchVModel\n\nconst onInputFocus = onFocus\n\ndefineExpose({\n  focus,\n  blur,\n  reset,\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n@import \"variables\";\n\n.va-select {\n  & .va-input-wrapper__text {\n    line-height: normal;\n    flex-wrap: wrap;\n  }\n}\n\n.va-select-anchor {\n  &__input {\n    cursor: var(--va-select-cursor);\n    flex: 1;\n  }\n\n  &--nowrap {\n    .va-input-wrapper__text {\n      flex-wrap: nowrap;\n    }\n  }\n}\n\n.va-select-dropdown {\n  &__content {\n    overflow: hidden;\n    border-top-right-radius: 0;\n    border-top-left-radius: 0;\n    padding: 0;\n  }\n\n  &__content-search-input {\n    min-width: auto;\n    width: 100%;\n  }\n\n  &__options-wrapper {\n    background: var(--va-select-dropdown-background);\n    overflow-y: auto;\n\n    @include va-scroll(var(--va-background-element));\n  }\n}\n</style>\n"],"names":[],"mappings":"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"}