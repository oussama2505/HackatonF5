import { defineComponent, ref, onMounted, onBeforeMount, computed, openBlock, createBlock, unref, withCtx, createElementVNode, mergeProps, renderSlot } from "vue";
import { _ as _sfc_main$1 } from "../../va-config/VaConfig.vue_vue_type_script_setup_true_lang.mjs";
import { u as useNumericProp } from "../../../composables/useNumericProp.mjs";
import { u as useBem } from "../../../composables/useBem.mjs";
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaSkeletonGroup"
  },
  __name: "VaSkeletonGroup",
  props: {
    color: { type: String, default: "backgroundElement" },
    delay: { type: [Number, String], default: 100 },
    animation: { type: String, default: "pulse" },
    lines: { type: [Number, String], default: 1 },
    lineGap: { type: String, default: "8px" },
    lastLineWidth: { type: [String], default: "75%" }
  },
  setup(__props) {
    const props = __props;
    const doShow = ref(false);
    const delayComputed = useNumericProp("delay");
    let timeoutId;
    onMounted(() => {
      timeoutId = setTimeout(() => {
        doShow.value = true;
      }, delayComputed.value);
    });
    onBeforeMount(() => {
      clearTimeout(timeoutId);
    });
    const bem = useBem("va-skeleton-group", () => ({
      hidden: doShow.value === false
    }));
    const config = computed(() => ({ ...props, delay: 0 }));
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1), {
        components: { VaSkeleton: config.value }
      }, {
        default: withCtx(() => [
          createElementVNode("div", mergeProps({
            class: ["va-skeleton-group", unref(bem)]
          }, _ctx.$attrs), [
            renderSlot(_ctx.$slots, "default", {}, void 0, true)
          ], 16)
        ]),
        _: 3
      }, 8, ["components"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaSkeletonGroup.vue_vue_type_script_setup_true_lang.mjs.map
