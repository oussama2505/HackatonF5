import { defineComponent, shallowRef, computed, ref, inject, onMounted, onBeforeUnmount, openBlock, createBlock, resolveDynamicComponent, unref, mergeProps, withKeys, toHandlers, withCtx, createElementVNode, renderSlot, createCommentVNode, toDisplayString, nextTick } from "vue";
import { T as TabsViewKey } from "../../types.mjs";
import { V as VaIcon } from "../../../va-icon/index.mjs";
import { u as unwrapEl } from "../../../../utils/unwrapEl.mjs";
import { u as useRouterLinkProps, a as useRouterLink } from "../../../../composables/useRouterLink.mjs";
import { u as useComponentPresetProp } from "../../../../composables/useComponentPreset.mjs";
import { u as useKeyboardOnlyFocus } from "../../../../composables/useKeyboardOnlyFocus.mjs";
import { u as useColors } from "../../../../composables/useColors.mjs";
const _hoisted_1 = { class: "va-tab__content" };
const _hoisted_2 = ["textContent"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaTab"
  },
  __name: "VaTab",
  props: {
    ...useRouterLinkProps,
    ...useComponentPresetProp,
    selected: { type: Boolean, default: false },
    color: { type: String, default: "" },
    icon: { type: String, default: "" },
    label: { type: String, default: "" },
    disabled: { type: Boolean },
    name: { type: [String, Number] },
    tag: { type: String, default: "div" }
  },
  emits: ["click", "keydown-enter", "focus"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const rootElement = shallowRef();
    const tabElement = computed(() => unwrapEl(rootElement.value));
    const isActive = ref(false);
    const hoverState = ref(false);
    const rightSidePosition = ref(0);
    const leftSidePosition = ref(0);
    const { keyboardFocusListeners, hasKeyboardFocus } = useKeyboardOnlyFocus();
    const { tagComputed, isActiveRouterLink, linkAttributesComputed } = useRouterLink(props);
    const classComputed = computed(() => ({ "va-tab--disabled": props.disabled }));
    const {
      parentDisabled,
      selectTab,
      moveToTab,
      registerTab,
      unregisterTab
    } = inject(TabsViewKey, {
      parentDisabled: false,
      tabsList: [],
      selectTab: (tab) => tab,
      moveToTab: (tab) => tab,
      registerTab: (tab) => tab,
      unregisterTab: (tab) => tab
    });
    const tabIndexComputed = computed(() => props.disabled || parentDisabled ? -1 : 0);
    const { getColor } = useColors();
    const colorComputed = computed(() => getColor(props.color));
    const computedStyle = computed(() => ({
      color: hoverState.value || isActive.value ? colorComputed.value : "inherit"
    }));
    const updateHoverState = (isHover) => {
      hoverState.value = isHover;
    };
    const updateSidePositions = () => {
      var _a, _b;
      const componentOffsetLeft = ((_a = tabElement.value) == null ? void 0 : _a.offsetLeft) || 0;
      const componentOffsetWidth = ((_b = tabElement.value) == null ? void 0 : _b.offsetWidth) || 0;
      rightSidePosition.value = componentOffsetLeft + componentOffsetWidth;
      leftSidePosition.value = componentOffsetLeft;
    };
    const onTabClick = async () => {
      await nextTick();
      selectTab(tabComponent);
      emit("click");
    };
    const onTabKeydown = async () => {
      await nextTick();
      selectTab(tabComponent);
      emit("keydown-enter");
    };
    const onFocus = () => {
      if (hasKeyboardFocus.value) {
        moveToTab(tabComponent);
      }
      emit("focus");
    };
    const tabComponent = {
      name: computed(() => props.name),
      id: null,
      tabElement,
      isActive,
      tabIndexComputed,
      isActiveRouterLink,
      rightSidePosition,
      leftSidePosition,
      onTabClick,
      onTabKeydown,
      onFocus,
      updateSidePositions
    };
    onMounted(() => {
      registerTab(tabComponent);
    });
    onBeforeUnmount(() => {
      unregisterTab(tabComponent);
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(unref(tagComputed)), mergeProps({
        ref_key: "rootElement",
        ref: rootElement,
        class: ["va-tab", classComputed.value],
        role: "tab",
        "aria-selected": isActive.value,
        "aria-disabled": _ctx.$props.disabled || unref(parentDisabled),
        style: computedStyle.value,
        onMouseenter: _cache[0] || (_cache[0] = ($event) => updateHoverState(true)),
        onMouseleave: _cache[1] || (_cache[1] = ($event) => updateHoverState(false)),
        onFocus,
        onClick: onTabClick,
        onKeydown: withKeys(onTabKeydown, ["enter"]),
        tabindex: tabIndexComputed.value
      }, toHandlers(unref(keyboardFocusListeners)), unref(linkAttributesComputed)), {
        default: withCtx(() => [
          createElementVNode("div", _hoisted_1, [
            renderSlot(_ctx.$slots, "default", {}, () => [
              __props.icon ? (openBlock(), createBlock(unref(VaIcon), {
                key: 0,
                class: "va-tab__icon",
                size: "small",
                name: __props.icon
              }, null, 8, ["name"])) : createCommentVNode("", true),
              createElementVNode("span", {
                class: "va-tab__label",
                textContent: toDisplayString(__props.label)
              }, null, 8, _hoisted_2)
            ])
          ])
        ]),
        _: 3
      }, 16, ["aria-selected", "aria-disabled", "class", "style", "tabindex"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaTab.vue_vue_type_script_setup_true_lang.mjs.map
