{"version":3,"file":"VaTimePicker.vue_vue_type_script_setup_true_lang.mjs","sources":["../../../../../src/components/va-time-picker/VaTimePicker.vue"],"sourcesContent":["<template>\n  <div\n    class=\"va-time-picker\"\n    :class=\"computedClasses\"\n    :style=\"computedStyles\"\n  >\n    <VaTimePickerColumn\n      v-for=\"(column, idx) in columns\" :key=\"idx\"\n      :ref=\"setItemRef\"\n      :items=\"column.items\"\n      :tabindex=\"disabled ? -1 : 0\"\n      :cell-height=\"cellHeightComputed\"\n      v-model:activeItemIndex=\"column.activeItem.value\"\n      @keydown.right.stop.prevent=\"focusNext()\"\n      @keydown.tab.exact.stop.prevent=\"focusNext()\"\n      @keydown.left.stop.prevent=\"focusPrev()\"\n      @keydown.shift.tab.stop.prevent=\"focusPrev()\"\n      @focus=\"activeColumnIndex = idx\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref, computed, PropType, ComputedRef } from 'vue'\nimport { useTimePicker } from './hooks/useTimePicker'\n\nimport { VaTimePickerColumn } from './components/VaTimePickerColumn'\n\nimport {\n  useComponentPresetProp,\n  useStatefulProps,\n  useStatefulEmits,\n  useStateful,\n  useFormFieldProps,\n  useFormField,\n  useArrayRefs,\n  useCSSVariables, useNumericProp,\n} from '../../composables'\n\ndefineOptions({\n  name: 'VaTimePicker',\n})\n\nconst props = defineProps({\n  ...useStatefulProps,\n  ...useFormFieldProps,\n  ...useComponentPresetProp,\n  modelValue: { type: Date, required: false },\n  ampm: { type: Boolean, default: false },\n  hidePeriodSwitch: { type: Boolean, default: false },\n  periodUpdatesModelValue: { type: Boolean, default: true }, // Update model value when switching period automatically\n  view: { type: String as PropType<'hours' | 'minutes' | 'seconds'>, default: 'minutes' },\n  hoursFilter: { type: Function as PropType<(h: number) => boolean> },\n  minutesFilter: { type: Function as PropType<(h: number) => boolean> },\n  secondsFilter: { type: Function as PropType<(h: number) => boolean> },\n  framed: { type: Boolean, default: false },\n  cellHeight: { type: [Number, String], default: 30 },\n  visibleCellsCount: { type: [Number, String], default: 7 },\n})\n\nconst emit = defineEmits([...useStatefulEmits])\n\nconst { valueComputed } = useStateful(props, emit)\nconst { columns, isPM } = useTimePicker(props, valueComputed)\nconst cellHeightComputed = useNumericProp('cellHeight') as ComputedRef<number>\nconst visibleCellsCountComputed = useNumericProp('visibleCellsCount') as ComputedRef<number>\n\nconst { setItemRef, itemRefs: pickers } = useArrayRefs()\n\nconst activeColumnIndex = ref<number>()\n\nconst focus = (idx = 0): void => {\n  pickers.value[idx]?.focus()\n}\n\nconst blur = (idx?: number): void => {\n  idx ? pickers.value[idx]?.blur() : pickers.value.forEach((el) => el?.blur())\n}\n\nconst { computedClasses: computedFormClasses } = useFormField('va-time-picker', props)\n\nconst focusNext = () => {\n  const nextIndex = (activeColumnIndex?.value || 0) + 1\n\n  activeColumnIndex.value = nextIndex % columns.value.length\n  focus(activeColumnIndex.value)\n}\n\nconst focusPrev = () => {\n  const nextIndex = (activeColumnIndex?.value || 0) - 1 + columns.value.length\n\n  activeColumnIndex.value = nextIndex % columns.value.length\n  focus(activeColumnIndex.value)\n}\n\nconst computedClasses = computed(() => ({\n  ...computedFormClasses,\n  'va-time-picker--framed': props.framed,\n}))\n\nconst computedStyles = useCSSVariables('va-time-picker', () => {\n  const gapHeight = (visibleCellsCountComputed.value - 1) / 2 * cellHeightComputed.value\n\n  return {\n    height: `${cellHeightComputed.value * visibleCellsCountComputed.value}px`,\n    'cell-height': `${cellHeightComputed.value}px`,\n    'column-gap-height': `${gapHeight}px`,\n  }\n})\n\ndefineExpose({\n  focus,\n  blur,\n  focusNext,\n  focusPrev,\n})\n</script>\n\n<style lang=\"scss\">\n@import './_variables.scss';\n\n@mixin after-overlay {\n  position: relative;\n\n  &::after {\n    content: '';\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    z-index: 1;\n  }\n}\n\n.va-time-picker {\n  display: var(--va-time-picker-display);\n  justify-content: center;\n  overflow: hidden;\n  height: var(--va-time-picker-height);\n  font-family: var(--va-font-family);\n\n  &--readonly {\n    @include after-overlay();\n  }\n\n  &--disabled {\n    @include after-overlay();\n\n    opacity: var(--va-time-picker-disabled-opacity);\n  }\n\n  &--framed {\n    position: relative;\n\n    &::before {\n      content: \"\";\n      height: var(--va-time-picker-cell-height);\n      width: 100%;\n      position: absolute;\n      top: 50%;\n      left: 0;\n      transform: translateY(-50%);\n      border-top: 1px solid var(--va-divider);\n      border-bottom: 1px solid var(--va-divider);\n      z-index: 0;\n    }\n  }\n}\n</style>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,UAAM,QAAQ;AAiBd,UAAM,OAAO;AAEb,UAAM,EAAE,cAAkB,IAAA,YAAY,OAAO,IAAI;AACjD,UAAM,EAAE,SAAS,KAAA,IAAS,cAAc,OAAO,aAAa;AACtD,UAAA,qBAAqB,eAAe,YAAY;AAChD,UAAA,4BAA4B,eAAe,mBAAmB;AAEpE,UAAM,EAAE,YAAY,UAAU,YAAY,aAAa;AAEvD,UAAM,oBAAoB;AAEpB,UAAA,QAAQ,CAAC,MAAM,MAAY;;AACvB,oBAAA,MAAM,GAAG,MAAT,mBAAY;AAAA,IAAM;AAGtB,UAAA,OAAO,CAAC,QAAuB;;AACnC,aAAM,aAAQ,MAAM,GAAG,MAAjB,mBAAoB,SAAS,QAAQ,MAAM,QAAQ,CAAC,OAAO,yBAAI,MAAM;AAAA,IAAA;AAG7E,UAAM,EAAE,iBAAiB,oBAAA,IAAwB,aAAa,kBAAkB,KAAK;AAErF,UAAM,YAAY,MAAM;AAChB,YAAA,cAAa,uDAAmB,UAAS,KAAK;AAElC,wBAAA,QAAQ,YAAY,QAAQ,MAAM;AACpD,YAAM,kBAAkB,KAAK;AAAA,IAAA;AAG/B,UAAM,YAAY,MAAM;AACtB,YAAM,cAAa,uDAAmB,UAAS,KAAK,IAAI,QAAQ,MAAM;AAEpD,wBAAA,QAAQ,YAAY,QAAQ,MAAM;AACpD,YAAM,kBAAkB,KAAK;AAAA,IAAA;AAGzB,UAAA,kBAAkB,SAAS,OAAO;AAAA,MACtC,GAAG;AAAA,MACH,0BAA0B,MAAM;AAAA,IAChC,EAAA;AAEI,UAAA,iBAAiB,gBAAgB,kBAAkB,MAAM;AAC7D,YAAM,aAAa,0BAA0B,QAAQ,KAAK,IAAI,mBAAmB;AAE1E,aAAA;AAAA,QACL,QAAQ,GAAG,mBAAmB,QAAQ,0BAA0B,KAAK;AAAA,QACrE,eAAe,GAAG,mBAAmB,KAAK;AAAA,QAC1C,qBAAqB,GAAG,SAAS;AAAA,MAAA;AAAA,IACnC,CACD;AAEY,aAAA;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA,CACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}