import { defineComponent, openBlock, createElementBlock, unref, renderSlot, createTextVNode, Fragment, renderList, createBlock, createSlots, withCtx, normalizeProps, guardReactiveProps } from "vue";
import { u as useTreeView } from "./hooks/useTreeView.mjs";
import { u as useTreeViewProps, a as useTreeViewEmits } from "./hooks/useTreeHelpers.mjs";
import { V as VaTreeNode } from "./components/VaTreeNode/index.mjs";
const _hoisted_1 = {
  class: "va-tree-view",
  role: "tree"
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaTreeView"
  },
  __name: "VaTreeView",
  props: { ...useTreeViewProps },
  emits: [...useTreeViewEmits],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const { treeItems, getTrackBy } = useTreeView(props, emit);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1, [
        _ctx.$props.filter && !unref(treeItems).length ? renderSlot(_ctx.$slots, "not-found", { key: 0 }, () => [
          createTextVNode("No matching nodes found")
        ]) : (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(unref(treeItems), (nodeItem) => {
          return openBlock(), createBlock(unref(VaTreeNode), {
            key: unref(getTrackBy)(nodeItem),
            node: nodeItem
          }, createSlots({ _: 2 }, [
            renderList(_ctx.$slots, (_, name) => {
              return {
                name,
                fn: withCtx((slotScope) => [
                  renderSlot(_ctx.$slots, name, normalizeProps(guardReactiveProps(slotScope)))
                ])
              };
            })
          ]), 1032, ["node"]);
        }), 128))
      ]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaTreeView.vue_vue_type_script_setup_true_lang.mjs.map
