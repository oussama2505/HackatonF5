import { PropType } from 'vue';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    modelValue: {
        type: PropType<boolean[]>;
        default: () => boolean[];
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    inset: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: BooleanConstructor;
        default: boolean;
    };
    popout: {
        type: BooleanConstructor;
        default: boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}, {
    collapses: import("vue").Ref<import("./hooks/useAccordion").AccordionItem[]>;
    value: import("../../composables").StatefulValue<boolean[]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: PropType<boolean[]>;
        default: () => boolean[];
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    inset: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: BooleanConstructor;
        default: boolean;
    };
    popout: {
        type: BooleanConstructor;
        default: boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    modelValue: boolean[];
    stateful: boolean;
    multiple: boolean;
    inset: boolean;
    popout: boolean;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
