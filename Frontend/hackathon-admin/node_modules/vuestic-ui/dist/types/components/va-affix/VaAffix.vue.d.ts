import { PropType } from 'vue';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    offsetTop: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    offsetBottom: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    target: {
        type: PropType<Window | HTMLElement | (() => Window | HTMLElement)>;
        default: () => Window | undefined;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    change: (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    offsetTop: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    offsetBottom: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    target: {
        type: PropType<Window | HTMLElement | (() => Window | HTMLElement)>;
        default: () => Window | undefined;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    onChange?: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    offsetTop: string | number;
    target: Window | HTMLElement | (() => Window | HTMLElement);
    offsetBottom: string | number;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
