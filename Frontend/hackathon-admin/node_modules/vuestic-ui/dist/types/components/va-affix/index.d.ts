export declare const VaAffix: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        offsetTop: {
            type: (StringConstructor | NumberConstructor)[];
            default: undefined;
        };
        offsetBottom: {
            type: (StringConstructor | NumberConstructor)[];
            default: undefined;
        };
        target: {
            type: import("vue").PropType<Window | HTMLElement | (() => Window | HTMLElement)>;
            default: () => Window | undefined;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>> & {
        onChange?: ((...args: any[]) => any) | undefined;
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        change: (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        offsetTop: {
            type: (StringConstructor | NumberConstructor)[];
            default: undefined;
        };
        offsetBottom: {
            type: (StringConstructor | NumberConstructor)[];
            default: undefined;
        };
        target: {
            type: import("vue").PropType<Window | HTMLElement | (() => Window | HTMLElement)>;
            default: () => Window | undefined;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>> & {
        onChange?: ((...args: any[]) => any) | undefined;
    }, {
        preset: string;
        offsetTop: string | number;
        target: Window | HTMLElement | (() => Window | HTMLElement);
        offsetBottom: string | number;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        offsetTop: {
            type: (StringConstructor | NumberConstructor)[];
            default: undefined;
        };
        offsetBottom: {
            type: (StringConstructor | NumberConstructor)[];
            default: undefined;
        };
        target: {
            type: import("vue").PropType<Window | HTMLElement | (() => Window | HTMLElement)>;
            default: () => Window | undefined;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>> & {
        onChange?: ((...args: any[]) => any) | undefined;
    }, {}, {}, {}, {}, {
        preset: string;
        offsetTop: string | number;
        target: Window | HTMLElement | (() => Window | HTMLElement);
        offsetBottom: string | number;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    offsetTop: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    offsetBottom: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    target: {
        type: import("vue").PropType<Window | HTMLElement | (() => Window | HTMLElement)>;
        default: () => Window | undefined;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    onChange?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    change: (...args: any[]) => void;
}, string, {
    preset: string;
    offsetTop: string | number;
    target: Window | HTMLElement | (() => Window | HTMLElement);
    offsetBottom: string | number;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
