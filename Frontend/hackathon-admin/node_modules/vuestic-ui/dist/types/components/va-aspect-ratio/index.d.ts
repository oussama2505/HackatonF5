export declare const VaAspectRatio: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        ratio: {
            type: import("vue").PropType<number | import("../../utils/types/prop-type").StringWithAutocomplete<"auto">>;
            default: string;
        };
        contentHeight: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        contentWidth: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        maxWidth: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
            validator: (v: number) => boolean;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        ratio: {
            type: import("vue").PropType<number | import("../../utils/types/prop-type").StringWithAutocomplete<"auto">>;
            default: string;
        };
        contentHeight: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        contentWidth: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        maxWidth: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
            validator: (v: number) => boolean;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, {
        preset: string;
        maxWidth: string | number;
        ratio: number | import("../../utils/types/prop-type").StringWithAutocomplete<"auto">;
        contentHeight: string | number;
        contentWidth: string | number;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        ratio: {
            type: import("vue").PropType<number | import("../../utils/types/prop-type").StringWithAutocomplete<"auto">>;
            default: string;
        };
        contentHeight: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        contentWidth: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        maxWidth: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
            validator: (v: number) => boolean;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, {}, {}, {}, {}, {
        preset: string;
        maxWidth: string | number;
        ratio: number | import("../../utils/types/prop-type").StringWithAutocomplete<"auto">;
        contentHeight: string | number;
        contentWidth: string | number;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    ratio: {
        type: import("vue").PropType<number | import("../../utils/types/prop-type").StringWithAutocomplete<"auto">>;
        default: string;
    };
    contentHeight: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    contentWidth: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    maxWidth: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
        validator: (v: number) => boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    preset: string;
    maxWidth: string | number;
    ratio: number | import("../../utils/types/prop-type").StringWithAutocomplete<"auto">;
    contentHeight: string | number;
    contentWidth: string | number;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
