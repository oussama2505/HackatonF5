export declare const VaAvatar: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        color: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
        };
        square: {
            type: BooleanConstructor;
            default: boolean;
        };
        fontSize: {
            type: StringConstructor;
            default: string;
        };
        src: {
            type: StringConstructor;
            default: null;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        alt: {
            type: StringConstructor;
            default: string;
        };
        onFallback: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        fallbackSrc: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        fallbackText: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        fallbackIcon: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        fallbackRender: {
            type: import("vue").PropType<() => any>;
            required: true;
            default: (() => any) | undefined;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        size: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
            validator: (size: string | number) => boolean;
        };
        sizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        fontSizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        onError?: ((...args: any[]) => any) | undefined;
        onFallback?: ((...args: any[]) => any) | undefined;
    }, {
        hasLoadError: import("vue").Ref<boolean>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        error: (...args: any[]) => void;
        fallback: (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        color: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
        };
        square: {
            type: BooleanConstructor;
            default: boolean;
        };
        fontSize: {
            type: StringConstructor;
            default: string;
        };
        src: {
            type: StringConstructor;
            default: null;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        alt: {
            type: StringConstructor;
            default: string;
        };
        onFallback: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        fallbackSrc: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        fallbackText: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        fallbackIcon: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        fallbackRender: {
            type: import("vue").PropType<() => any>;
            required: true;
            default: (() => any) | undefined;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        size: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
            validator: (size: string | number) => boolean;
        };
        sizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        fontSizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        onError?: ((...args: any[]) => any) | undefined;
        onFallback?: ((...args: any[]) => any) | undefined;
    }, {
        size: string | number;
        preset: string;
        color: string;
        loading: boolean;
        sizesConfig: Record<string, any>;
        fontSize: string;
        fontSizesConfig: Record<string, any>;
        icon: string;
        alt: string;
        src: string;
        onFallback: (...args: any[]) => any;
        fallbackSrc: string;
        fallbackText: string;
        fallbackIcon: string;
        fallbackRender: () => any;
        square: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        color: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
        };
        square: {
            type: BooleanConstructor;
            default: boolean;
        };
        fontSize: {
            type: StringConstructor;
            default: string;
        };
        src: {
            type: StringConstructor;
            default: null;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        alt: {
            type: StringConstructor;
            default: string;
        };
        onFallback: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        fallbackSrc: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        fallbackText: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        fallbackIcon: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        fallbackRender: {
            type: import("vue").PropType<() => any>;
            required: true;
            default: (() => any) | undefined;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        size: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
            validator: (size: string | number) => boolean;
        };
        sizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        fontSizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        onError?: ((...args: any[]) => any) | undefined;
        onFallback?: ((...args: any[]) => any) | undefined;
    }, {
        hasLoadError: import("vue").Ref<boolean>;
    }, {}, {}, {}, {
        size: string | number;
        preset: string;
        color: string;
        loading: boolean;
        sizesConfig: Record<string, any>;
        fontSize: string;
        fontSizesConfig: Record<string, any>;
        icon: string;
        alt: string;
        src: string;
        onFallback: (...args: any[]) => any;
        fallbackSrc: string;
        fallbackText: string;
        fallbackIcon: string;
        fallbackRender: () => any;
        square: boolean;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
    };
    square: {
        type: BooleanConstructor;
        default: boolean;
    };
    fontSize: {
        type: StringConstructor;
        default: string;
    };
    src: {
        type: StringConstructor;
        default: null;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    alt: {
        type: StringConstructor;
        default: string;
    };
    onFallback: {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    fallbackSrc: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    fallbackText: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    fallbackIcon: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    fallbackRender: {
        type: import("vue").PropType<() => any>;
        required: true;
        default: (() => any) | undefined;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
        validator: (size: string | number) => boolean;
    };
    sizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        default: () => import("../../services/global-config").SizeConfig;
    };
    fontSizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        default: () => import("../../services/global-config").SizeConfig;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onError?: ((...args: any[]) => any) | undefined;
    onFallback?: ((...args: any[]) => any) | undefined;
}, {
    hasLoadError: import("vue").Ref<boolean>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    error: (...args: any[]) => void;
    fallback: (...args: any[]) => void;
}, string, {
    size: string | number;
    preset: string;
    color: string;
    loading: boolean;
    sizesConfig: Record<string, any>;
    fontSize: string;
    fontSizesConfig: Record<string, any>;
    icon: string;
    alt: string;
    src: string;
    onFallback: (...args: any[]) => any;
    fallbackSrc: string;
    fallbackText: string;
    fallbackIcon: string;
    fallbackRender: () => any;
    square: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {
            hasError: boolean;
            onError: (event: Event) => void;
        }): any;
        fallback?(_: {}): any;
    };
});
