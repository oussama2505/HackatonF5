export declare const VaBadge: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        color: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
        };
        text: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        multiLine: {
            type: BooleanConstructor;
            default: boolean;
        };
        visibleEmpty: {
            type: BooleanConstructor;
            default: boolean;
        };
        dot: {
            type: BooleanConstructor;
            default: boolean;
        };
        transparent: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlap: {
            type: BooleanConstructor;
            default: boolean;
        };
        placement: {
            type: import("vue").PropType<import("../../composables").PlacementWithAlias>;
            default: string;
            validator: (position: import("../../composables").PlacementWithAlias) => boolean;
        };
        offset: {
            type: import("vue").PropType<import("./types").BadgeOffsetProp>;
            default: number;
            validator: (value: "toString") => boolean;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        color: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
        };
        text: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        multiLine: {
            type: BooleanConstructor;
            default: boolean;
        };
        visibleEmpty: {
            type: BooleanConstructor;
            default: boolean;
        };
        dot: {
            type: BooleanConstructor;
            default: boolean;
        };
        transparent: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlap: {
            type: BooleanConstructor;
            default: boolean;
        };
        placement: {
            type: import("vue").PropType<import("../../composables").PlacementWithAlias>;
            default: string;
            validator: (position: import("../../composables").PlacementWithAlias) => boolean;
        };
        offset: {
            type: import("vue").PropType<import("./types").BadgeOffsetProp>;
            default: number;
            validator: (value: "toString") => boolean;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, {
        preset: string;
        text: string | number;
        transparent: boolean;
        color: string;
        placement: import("../../composables").PlacementWithAlias;
        offset: import("./types").BadgeOffsetProp;
        overlap: boolean;
        multiLine: boolean;
        visibleEmpty: boolean;
        dot: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        color: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
        };
        text: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        multiLine: {
            type: BooleanConstructor;
            default: boolean;
        };
        visibleEmpty: {
            type: BooleanConstructor;
            default: boolean;
        };
        dot: {
            type: BooleanConstructor;
            default: boolean;
        };
        transparent: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlap: {
            type: BooleanConstructor;
            default: boolean;
        };
        placement: {
            type: import("vue").PropType<import("../../composables").PlacementWithAlias>;
            default: string;
            validator: (position: import("../../composables").PlacementWithAlias) => boolean;
        };
        offset: {
            type: import("vue").PropType<import("./types").BadgeOffsetProp>;
            default: number;
            validator: (value: "toString") => boolean;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, {}, {}, {}, {}, {
        preset: string;
        text: string | number;
        transparent: boolean;
        color: string;
        placement: import("../../composables").PlacementWithAlias;
        offset: import("./types").BadgeOffsetProp;
        overlap: boolean;
        multiLine: boolean;
        visibleEmpty: boolean;
        dot: boolean;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
    };
    text: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    multiLine: {
        type: BooleanConstructor;
        default: boolean;
    };
    visibleEmpty: {
        type: BooleanConstructor;
        default: boolean;
    };
    dot: {
        type: BooleanConstructor;
        default: boolean;
    };
    transparent: {
        type: BooleanConstructor;
        default: boolean;
    };
    overlap: {
        type: BooleanConstructor;
        default: boolean;
    };
    placement: {
        type: import("vue").PropType<import("../../composables").PlacementWithAlias>;
        default: string;
        validator: (position: import("../../composables").PlacementWithAlias) => boolean;
    };
    offset: {
        type: import("vue").PropType<import("./types").BadgeOffsetProp>;
        default: number;
        validator: (value: "toString") => boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    preset: string;
    text: string | number;
    transparent: boolean;
    color: string;
    placement: import("../../composables").PlacementWithAlias;
    offset: import("./types").BadgeOffsetProp;
    overlap: boolean;
    multiLine: boolean;
    visibleEmpty: boolean;
    dot: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        text?(_: {}): any;
        default?(_: {}): any;
    };
});
