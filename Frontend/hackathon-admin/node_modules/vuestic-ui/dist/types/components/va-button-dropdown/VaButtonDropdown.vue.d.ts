import { PropType } from 'vue';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    openedIcon: {
        type: StringConstructor;
        default: string;
    };
    hideIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    leftIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    iconColor: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableDropdown: {
        type: BooleanConstructor;
        default: boolean;
    };
    offset: {
        type: PropType<number | [number, number]>;
        default: number;
    };
    keepAnchorWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    split: {
        type: BooleanConstructor;
    };
    splitTo: {
        type: StringConstructor;
        default: string;
    };
    splitHref: {
        type: StringConstructor;
        default: string;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: StringConstructor;
    };
    ariaLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    placement: {
        type: PropType<import("../../composables").PlacementWithAlias>;
        default: string;
        validator: (position: import("../../composables").PlacementWithAlias) => boolean;
    };
    onClose: {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    anchor: {
        type: PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables").MaybeHTMLElementOrSelector;
    };
    role: {
        type: PropType<NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>>;
        required: true;
        default: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined;
    };
    readonly: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    "onUpdate:modelValue": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    trigger: {
        type: PropType<NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>>;
        required: true;
        default: import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined;
    };
    target: {
        type: PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables").MaybeHTMLElementOrSelector;
    };
    hoverOverTimeout: {
        type: PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    hoverOutTimeout: {
        type: PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    autoPlacement: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    stickToEdges: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    verticalScrollOnOverflow: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    onOpen: {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onAnchor-click": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onAnchor-right-click": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onContent-click": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-outside": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onFocus-outside": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onAnchor-dblclick": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    anchorSelector: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    innerAnchorSelector: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    closeOnClickOutside: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    closeOnFocusOutside: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    closeOnAnchorClick: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    isContentHoverable: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    cursor: {
        type: PropType<NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>>;
        required: true;
        default: boolean | import("../va-dropdown/types").CursorAnchor | undefined;
    };
    teleport: {
        type: PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables").MaybeHTMLElementOrSelector;
    };
    keyboardNavigation: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    contentClass: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    size: {
        type: PropType<NonNullable<"small" | "medium" | "large" | undefined>>;
        required: true;
        default: "small" | "medium" | "large" | undefined;
    };
    replace: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    preset: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    append: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    type: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    tag: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    href: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    color: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    to: {
        type: PropType<NonNullable<string | Record<string, any> | undefined>>;
        required: true;
        default: string | Record<string, any> | undefined;
    };
    exact: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    activeClass: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    exactActiveClass: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    sizesConfig: {
        type: PropType<Record<string, any>>;
        required: true;
        default: Record<string, any> | undefined;
    };
    textColor: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    round: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    fontSizesConfig: {
        type: PropType<Record<string, any>>;
        required: true;
        default: Record<string, any> | undefined;
    };
    textOpacity: {
        type: PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    backgroundOpacity: {
        type: PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    borderColor: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    gradient: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    plain: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    pressedBehavior: {
        type: PropType<NonNullable<"mask" | "opacity" | undefined>>;
        required: true;
        default: "mask" | "opacity" | undefined;
    };
    pressedOpacity: {
        type: PropType<number>;
        required: true;
        default: number | undefined;
    };
    pressedMaskColor: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    hoverBehavior: {
        type: PropType<NonNullable<"mask" | "opacity" | undefined>>;
        required: true;
        default: "mask" | "opacity" | undefined;
    };
    hoverOpacity: {
        type: PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    hoverMaskColor: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
}, {
    hideDropdown: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    [x: string]: (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    openedIcon: {
        type: StringConstructor;
        default: string;
    };
    hideIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    leftIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    iconColor: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableDropdown: {
        type: BooleanConstructor;
        default: boolean;
    };
    offset: {
        type: PropType<number | [number, number]>;
        default: number;
    };
    keepAnchorWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    split: {
        type: BooleanConstructor;
    };
    splitTo: {
        type: StringConstructor;
        default: string;
    };
    splitHref: {
        type: StringConstructor;
        default: string;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: StringConstructor;
    };
    ariaLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    placement: {
        type: PropType<import("../../composables").PlacementWithAlias>;
        default: string;
        validator: (position: import("../../composables").PlacementWithAlias) => boolean;
    };
    onClose: {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    anchor: {
        type: PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables").MaybeHTMLElementOrSelector;
    };
    role: {
        type: PropType<NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>>;
        required: true;
        default: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined;
    };
    readonly: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    "onUpdate:modelValue": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    trigger: {
        type: PropType<NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>>;
        required: true;
        default: import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined;
    };
    target: {
        type: PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables").MaybeHTMLElementOrSelector;
    };
    hoverOverTimeout: {
        type: PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    hoverOutTimeout: {
        type: PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    autoPlacement: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    stickToEdges: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    verticalScrollOnOverflow: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    onOpen: {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onAnchor-click": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onAnchor-right-click": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onContent-click": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-outside": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onFocus-outside": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onAnchor-dblclick": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    anchorSelector: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    innerAnchorSelector: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    closeOnClickOutside: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    closeOnFocusOutside: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    closeOnAnchorClick: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    isContentHoverable: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    cursor: {
        type: PropType<NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>>;
        required: true;
        default: boolean | import("../va-dropdown/types").CursorAnchor | undefined;
    };
    teleport: {
        type: PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables").MaybeHTMLElementOrSelector;
    };
    keyboardNavigation: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    contentClass: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    size: {
        type: PropType<NonNullable<"small" | "medium" | "large" | undefined>>;
        required: true;
        default: "small" | "medium" | "large" | undefined;
    };
    replace: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    preset: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    append: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    type: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    tag: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    href: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    color: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    to: {
        type: PropType<NonNullable<string | Record<string, any> | undefined>>;
        required: true;
        default: string | Record<string, any> | undefined;
    };
    exact: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    activeClass: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    exactActiveClass: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    sizesConfig: {
        type: PropType<Record<string, any>>;
        required: true;
        default: Record<string, any> | undefined;
    };
    textColor: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    round: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    fontSizesConfig: {
        type: PropType<Record<string, any>>;
        required: true;
        default: Record<string, any> | undefined;
    };
    textOpacity: {
        type: PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    backgroundOpacity: {
        type: PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    borderColor: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    gradient: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    plain: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    pressedBehavior: {
        type: PropType<NonNullable<"mask" | "opacity" | undefined>>;
        required: true;
        default: "mask" | "opacity" | undefined;
    };
    pressedOpacity: {
        type: PropType<number>;
        required: true;
        default: number | undefined;
    };
    pressedMaskColor: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    hoverBehavior: {
        type: PropType<NonNullable<"mask" | "opacity" | undefined>>;
        required: true;
        default: "mask" | "opacity" | undefined;
    };
    hoverOpacity: {
        type: PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    hoverMaskColor: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
}>>, {
    onClose: (...args: any[]) => any;
    size: NonNullable<"small" | "medium" | "large" | undefined>;
    replace: NonNullable<boolean | undefined>;
    split: boolean;
    anchor: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
    preset: string;
    ariaLabel: import("../../composables").TranslationProp;
    role: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>;
    append: NonNullable<boolean | undefined>;
    type: string;
    disabled: boolean;
    readonly: NonNullable<boolean | undefined>;
    "onUpdate:modelValue": (...args: any[]) => any;
    tag: string;
    trigger: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>;
    modelValue: boolean;
    stateful: boolean;
    href: string;
    color: string;
    loading: boolean;
    to: NonNullable<string | Record<string, any> | undefined>;
    exact: NonNullable<boolean | undefined>;
    activeClass: string;
    exactActiveClass: string;
    target: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
    sizesConfig: Record<string, any>;
    placement: import("../../composables").PlacementWithAlias;
    hoverOverTimeout: NonNullable<string | number | undefined>;
    hoverOutTimeout: NonNullable<string | number | undefined>;
    autoPlacement: NonNullable<boolean | undefined>;
    stickToEdges: NonNullable<boolean | undefined>;
    keepAnchorWidth: boolean;
    verticalScrollOnOverflow: NonNullable<boolean | undefined>;
    onOpen: (...args: any[]) => any;
    "onAnchor-click": (...args: any[]) => any;
    "onAnchor-right-click": (...args: any[]) => any;
    "onContent-click": (...args: any[]) => any;
    "onClick-outside": (...args: any[]) => any;
    "onFocus-outside": (...args: any[]) => any;
    "onAnchor-dblclick": (...args: any[]) => any;
    anchorSelector: string;
    innerAnchorSelector: string;
    closeOnClickOutside: NonNullable<boolean | undefined>;
    closeOnFocusOutside: NonNullable<boolean | undefined>;
    closeOnAnchorClick: NonNullable<boolean | undefined>;
    closeOnContentClick: boolean;
    isContentHoverable: NonNullable<boolean | undefined>;
    offset: number | [number, number];
    cursor: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>;
    teleport: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
    keyboardNavigation: NonNullable<boolean | undefined>;
    contentClass: string;
    textColor: string;
    round: NonNullable<boolean | undefined>;
    fontSizesConfig: Record<string, any>;
    icon: string;
    textOpacity: NonNullable<string | number | undefined>;
    backgroundOpacity: NonNullable<string | number | undefined>;
    borderColor: string;
    gradient: NonNullable<boolean | undefined>;
    plain: NonNullable<boolean | undefined>;
    iconColor: string;
    pressedBehavior: NonNullable<"mask" | "opacity" | undefined>;
    pressedOpacity: number;
    pressedMaskColor: string;
    hoverBehavior: NonNullable<"mask" | "opacity" | undefined>;
    hoverOpacity: NonNullable<string | number | undefined>;
    hoverMaskColor: string;
    leftIcon: boolean;
    openedIcon: string;
    hideIcon: boolean;
    disableButton: boolean;
    disableDropdown: boolean;
    splitTo: string;
    splitHref: string;
}, {}>, {
    label?(_: {}): any;
    content?(_: {}): any;
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
