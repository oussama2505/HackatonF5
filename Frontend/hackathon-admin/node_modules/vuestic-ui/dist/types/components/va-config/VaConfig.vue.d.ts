import { PropType } from 'vue';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    components: {
        type: PropType<Partial<{
            VaAccordion: {
                preset?: string | undefined;
                modelValue?: boolean[] | undefined;
                stateful?: boolean | undefined;
                multiple?: boolean | undefined;
                inset?: boolean | undefined;
                popout?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaAffix: {
                preset?: string | undefined;
                offsetTop?: string | number | undefined;
                target?: Window | HTMLElement | (() => Window | HTMLElement) | undefined;
                offsetBottom?: string | number | undefined;
            } & import("vue").HTMLAttributes;
            VaAlert: {
                title?: string | undefined;
                preset?: string | undefined;
                center?: boolean | undefined;
                modelValue?: boolean | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                textColor?: string | undefined;
                icon?: string | undefined;
                borderColor?: string | undefined;
                description?: string | undefined;
                closeText?: string | undefined;
                closeable?: boolean | undefined;
                dense?: boolean | undefined;
                outline?: boolean | undefined;
                border?: "" | "left" | "right" | "bottom" | "top" | undefined;
                closeIcon?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaAppBar: {
                fixed?: boolean | undefined;
                preset?: string | undefined;
                hideOnScroll?: boolean | undefined;
                bottom?: boolean | undefined;
                color?: string | undefined;
                target?: string | HTMLElement | undefined;
                gradient?: boolean | undefined;
                shadowOnScroll?: boolean | undefined;
                shadowColor?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaAspectRatio: {
                preset?: string | undefined;
                maxWidth?: string | number | undefined;
                ratio?: number | import("../../utils/types/prop-type").StringWithAutocomplete<"auto"> | undefined;
                contentHeight?: string | number | undefined;
                contentWidth?: string | number | undefined;
            } & import("vue").HTMLAttributes;
            VaAvatar: {
                size?: string | number | undefined;
                preset?: string | undefined;
                color?: string | undefined;
                loading?: boolean | undefined;
                sizesConfig?: Record<string, any> | undefined;
                fontSize?: string | undefined;
                readonly textColor?: string | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                icon?: string | undefined;
                alt?: string | undefined;
                src?: string | undefined;
                fallbackSrc?: string | undefined;
                fallbackText?: string | undefined;
                fallbackIcon?: string | undefined;
                fallbackRender?: (() => any) | undefined;
                square?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaAvatarGroup: {
                size?: NonNullable<string | number | undefined> | undefined;
                options?: Record<string, unknown>[] | undefined;
                preset?: string | undefined;
                color?: string | undefined;
                loading?: NonNullable<boolean | undefined> | undefined;
                sizesConfig?: Record<string, any> | undefined;
                fontSize?: string | undefined;
                vertical?: boolean | undefined;
                textColor?: string | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                icon?: string | undefined;
                alt?: string | undefined;
                max?: string | number | undefined;
                src?: string | undefined;
                fallbackSrc?: string | undefined;
                fallbackText?: string | undefined;
                fallbackIcon?: string | undefined;
                fallbackRender?: (() => any) | undefined;
                square?: NonNullable<boolean | undefined> | undefined;
                restColor?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaBacktop: {
                preset?: string | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                color?: string | undefined;
                target?: string | Element | undefined;
                visibilityHeight?: string | number | undefined;
                speed?: string | number | undefined;
                verticalOffset?: string | undefined;
                horizontalOffset?: string | undefined;
                horizontalPosition?: "left" | "right" | undefined;
                verticalPosition?: "bottom" | "top" | undefined;
            } & import("vue").HTMLAttributes;
            VaBadge: {
                preset?: string | undefined;
                text?: string | number | undefined;
                transparent?: boolean | undefined;
                color?: string | undefined;
                placement?: import("../../composables").PlacementWithAlias | undefined;
                offset?: import("../va-badge/types").BadgeOffsetProp | undefined;
                readonly textColor?: string | undefined;
                overlap?: boolean | undefined;
                multiLine?: boolean | undefined;
                visibleEmpty?: boolean | undefined;
                dot?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaBreadcrumbs: {
                preset?: string | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                color?: string | undefined;
                vertical?: boolean | undefined;
                align?: string | undefined;
                separator?: string | undefined;
                disabledColor?: string | undefined;
                activeColor?: string | undefined;
                separatorColor?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaBreadcrumbsItem: {
                label?: string | undefined;
                replace?: boolean | undefined;
                append?: boolean | undefined;
                disabled?: boolean | undefined;
                tag?: string | undefined;
                href?: string | undefined;
                to?: string | Record<string, any> | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaButton: {
                size?: "small" | "medium" | "large" | undefined;
                replace?: boolean | undefined;
                preset?: string | undefined;
                append?: boolean | undefined;
                type?: string | undefined;
                disabled?: boolean | undefined;
                tag?: string | undefined;
                href?: string | undefined;
                color?: string | undefined;
                loading?: boolean | undefined;
                to?: string | Record<string, any> | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: string | undefined;
                sizesConfig?: Record<string, any> | undefined;
                textColor?: string | undefined;
                round?: boolean | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                icon?: string | undefined;
                block?: boolean | undefined;
                textOpacity?: string | number | undefined;
                backgroundOpacity?: string | number | undefined;
                borderColor?: string | undefined;
                gradient?: boolean | undefined;
                plain?: boolean | undefined;
                iconRight?: string | undefined;
                iconColor?: string | undefined;
                pressedBehavior?: "mask" | "opacity" | undefined;
                pressedOpacity?: number | undefined;
                pressedMaskColor?: string | undefined;
                hoverBehavior?: "mask" | "opacity" | undefined;
                hoverOpacity?: string | number | undefined;
                hoverMaskColor?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaButtonDropdown: {
                readonly label?: string | undefined;
                size?: NonNullable<"small" | "medium" | "large" | undefined> | undefined;
                replace?: NonNullable<boolean | undefined> | undefined;
                split?: boolean | undefined;
                anchor?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                preset?: string | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                role?: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined> | undefined;
                append?: NonNullable<boolean | undefined> | undefined;
                type?: string | undefined;
                disabled?: boolean | undefined;
                readonly?: NonNullable<boolean | undefined> | undefined;
                tag?: string | undefined;
                trigger?: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined> | undefined;
                modelValue?: boolean | undefined;
                stateful?: boolean | undefined;
                href?: string | undefined;
                color?: string | undefined;
                loading?: boolean | undefined;
                to?: NonNullable<string | Record<string, any> | undefined> | undefined;
                exact?: NonNullable<boolean | undefined> | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                sizesConfig?: Record<string, any> | undefined;
                placement?: import("../../composables").PlacementWithAlias | undefined;
                hoverOverTimeout?: NonNullable<string | number | undefined> | undefined;
                hoverOutTimeout?: NonNullable<string | number | undefined> | undefined;
                autoPlacement?: NonNullable<boolean | undefined> | undefined;
                stickToEdges?: NonNullable<boolean | undefined> | undefined;
                keepAnchorWidth?: boolean | undefined;
                verticalScrollOnOverflow?: NonNullable<boolean | undefined> | undefined;
                anchorSelector?: string | undefined;
                innerAnchorSelector?: string | undefined;
                closeOnClickOutside?: NonNullable<boolean | undefined> | undefined;
                closeOnFocusOutside?: NonNullable<boolean | undefined> | undefined;
                closeOnAnchorClick?: NonNullable<boolean | undefined> | undefined;
                closeOnContentClick?: boolean | undefined;
                isContentHoverable?: NonNullable<boolean | undefined> | undefined;
                offset?: number | [number, number] | undefined;
                cursor?: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined> | undefined;
                teleport?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                keyboardNavigation?: NonNullable<boolean | undefined> | undefined;
                contentClass?: string | undefined;
                textColor?: string | undefined;
                round?: NonNullable<boolean | undefined> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                icon?: string | undefined;
                textOpacity?: NonNullable<string | number | undefined> | undefined;
                backgroundOpacity?: NonNullable<string | number | undefined> | undefined;
                borderColor?: string | undefined;
                gradient?: NonNullable<boolean | undefined> | undefined;
                plain?: NonNullable<boolean | undefined> | undefined;
                iconColor?: string | undefined;
                pressedBehavior?: NonNullable<"mask" | "opacity" | undefined> | undefined;
                pressedOpacity?: number | undefined;
                pressedMaskColor?: string | undefined;
                hoverBehavior?: NonNullable<"mask" | "opacity" | undefined> | undefined;
                hoverOpacity?: NonNullable<string | number | undefined> | undefined;
                hoverMaskColor?: string | undefined;
                leftIcon?: boolean | undefined;
                openedIcon?: string | undefined;
                hideIcon?: boolean | undefined;
                disableButton?: boolean | undefined;
                disableDropdown?: boolean | undefined;
                splitTo?: string | undefined;
                splitHref?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaButtonGroup: {
                size?: NonNullable<"small" | "medium" | "large" | undefined> | undefined;
                replace?: NonNullable<boolean | undefined> | undefined;
                preset?: string | undefined;
                append?: NonNullable<boolean | undefined> | undefined;
                type?: string | undefined;
                disabled?: NonNullable<boolean | undefined> | undefined;
                tag?: string | undefined;
                href?: string | undefined;
                color?: string | undefined;
                loading?: NonNullable<boolean | undefined> | undefined;
                to?: NonNullable<string | Record<string, any> | undefined> | undefined;
                exact?: NonNullable<boolean | undefined> | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: string | undefined;
                sizesConfig?: Record<string, any> | undefined;
                textColor?: string | undefined;
                round?: NonNullable<boolean | undefined> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                icon?: string | undefined;
                textOpacity?: NonNullable<string | number | undefined> | undefined;
                backgroundOpacity?: NonNullable<string | number | undefined> | undefined;
                borderColor?: string | undefined;
                gradient?: boolean | undefined;
                plain?: NonNullable<boolean | undefined> | undefined;
                iconRight?: string | undefined;
                iconColor?: string | undefined;
                pressedBehavior?: NonNullable<"mask" | "opacity" | undefined> | undefined;
                pressedOpacity?: number | undefined;
                pressedMaskColor?: string | undefined;
                hoverBehavior?: NonNullable<"mask" | "opacity" | undefined> | undefined;
                hoverOpacity?: NonNullable<string | number | undefined> | undefined;
                hoverMaskColor?: string | undefined;
                grow?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaButtonToggle: {
                size?: NonNullable<NonNullable<"small" | "medium" | "large" | undefined> | undefined> | undefined;
                replace?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                readonly options?: import("..").ButtonOption[] | undefined;
                preset?: string | undefined;
                append?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                type?: string | undefined;
                disabled?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                tag?: string | undefined;
                modelValue?: string | number | boolean | undefined;
                href?: string | undefined;
                color?: string | undefined;
                loading?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                to?: NonNullable<NonNullable<string | Record<string, any> | undefined> | undefined> | undefined;
                exact?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: string | undefined;
                textBy?: import("../../composables").StringOrFunction | undefined;
                valueBy?: import("../../composables").StringOrFunction | undefined;
                trackBy?: import("../../composables").StringOrFunction | undefined;
                disabledBy?: import("../../composables").StringOrFunction | undefined;
                groupBy?: import("../../composables").StringOrFunction | undefined;
                sizesConfig?: Record<string, any> | undefined;
                textColor?: string | undefined;
                round?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                icon?: string | undefined;
                textOpacity?: NonNullable<NonNullable<string | number | undefined> | undefined> | undefined;
                backgroundOpacity?: NonNullable<NonNullable<string | number | undefined> | undefined> | undefined;
                borderColor?: string | undefined;
                gradient?: NonNullable<boolean | undefined> | undefined;
                plain?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                iconRight?: string | undefined;
                iconColor?: string | undefined;
                pressedBehavior?: NonNullable<NonNullable<"mask" | "opacity" | undefined> | undefined> | undefined;
                pressedOpacity?: number | undefined;
                pressedMaskColor?: string | undefined;
                hoverBehavior?: NonNullable<NonNullable<"mask" | "opacity" | undefined> | undefined> | undefined;
                hoverOpacity?: NonNullable<NonNullable<string | number | undefined> | undefined> | undefined;
                hoverMaskColor?: string | undefined;
                grow?: NonNullable<boolean | undefined> | undefined;
                readonly activeButtonTextColor?: string | undefined;
                toggleColor?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaCard: {
                replace?: boolean | undefined;
                preset?: string | undefined;
                append?: boolean | undefined;
                disabled?: boolean | undefined;
                tag?: string | undefined;
                href?: string | undefined;
                color?: string | undefined;
                to?: string | Record<string, any> | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: string | undefined;
                readonly textColor?: string | undefined;
                gradient?: boolean | undefined;
                square?: boolean | undefined;
                outlined?: boolean | undefined;
                bordered?: boolean | undefined;
                stripe?: boolean | undefined;
                stripeColor?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaCardBlock: {
                horizontal?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaCardActions: {
                preset?: string | undefined;
                vertical?: boolean | undefined;
                align?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaCardContent: {} & import("vue").HTMLAttributes;
            VaCardTitle: {
                preset?: string | undefined;
                readonly textColor?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaCarousel: {
                title?: string | undefined;
                preset?: string | undefined;
                draggable?: NonNullable<boolean | undefined> | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                modelValue?: number | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                loading?: NonNullable<"lazy" | "eager" | undefined> | undefined;
                sizes?: string | undefined;
                vertical?: boolean | undefined;
                swipable?: boolean | undefined;
                swipeDistance?: number | undefined;
                swipeDirection?: ("all" | ("" | "left" | "right" | "up" | "down") | "horizontal" | "vertical") | undefined;
                height?: string | undefined;
                crossorigin?: NonNullable<"anonymous" | "use-credentials" | undefined> | undefined;
                fallbackSrc?: string | undefined;
                fallbackText?: string | undefined;
                fallbackIcon?: string | undefined;
                fallbackRender?: (() => any) | undefined;
                maxWidth?: NonNullable<string | number | undefined> | undefined;
                readonly items?: any[] | undefined;
                readonly ratio?: string | number | undefined;
                lazy?: NonNullable<boolean | undefined> | undefined;
                fit?: NonNullable<"fill" | "none" | "contain" | "cover" | "scale-down" | undefined> | undefined;
                placeholderSrc?: string | undefined;
                srcset?: string | undefined;
                decoding?: NonNullable<"auto" | "sync" | "async" | undefined> | undefined;
                fetchpriority?: NonNullable<"auto" | "high" | "low" | undefined> | undefined;
                referrerpolicy?: NonNullable<"origin" | "no-referrer" | "no-referrer-when-downgrade" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url" | undefined> | undefined;
                autoscroll?: boolean | undefined;
                autoscrollInterval?: string | number | undefined;
                autoscrollPauseDuration?: string | number | undefined;
                infinite?: boolean | undefined;
                fadeKeyframe?: string | undefined;
                arrows?: boolean | undefined;
                indicators?: boolean | undefined;
                indicatorTrigger?: "click" | "hover" | "none" | undefined;
                effect?: "transition" | "fade" | undefined;
                ariaPreviousLabel?: import("../../composables").TranslationProp | undefined;
                ariaNextLabel?: import("../../composables").TranslationProp | undefined;
                ariaGoToSlideLabel?: import("../../composables").TranslationProp | undefined;
                ariaSlideOfLabel?: import("../../composables").TranslationProp | undefined;
            } & import("vue").HTMLAttributes;
            VaCheckbox: {
                label?: string | undefined;
                error?: boolean | undefined;
                preset?: string | undefined;
                name?: string | undefined;
                success?: boolean | undefined;
                id?: string | undefined;
                ariaLabel?: string | undefined;
                disabled?: boolean | undefined;
                readonly?: boolean | undefined;
                errorMessages?: string | string[] | undefined;
                modelValue?: string | number | boolean | unknown[] | Record<any, unknown> | null | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                loading?: boolean | undefined;
                rules?: import("../../composables").ValidationRule<any>[] | undefined;
                dirty?: boolean | undefined;
                errorCount?: string | number | undefined;
                messages?: string | string[] | undefined;
                immediateValidation?: boolean | undefined;
                vertical?: boolean | undefined;
                indeterminate?: boolean | undefined;
                checkedIcon?: string | undefined;
                indeterminateValue?: string | number | boolean | unknown[] | Record<any, unknown> | null | undefined;
                indeterminateIcon?: string | undefined;
                arrayValue?: string | number | boolean | Record<string, any> | undefined;
                leftLabel?: boolean | undefined;
                trueValue?: any;
                falseValue?: any;
            } & import("vue").HTMLAttributes;
            VaChip: {
                size?: "small" | "medium" | "large" | undefined;
                flat?: boolean | undefined;
                replace?: boolean | undefined;
                preset?: string | undefined;
                shadow?: boolean | undefined;
                append?: boolean | undefined;
                disabled?: boolean | undefined;
                readonly?: boolean | undefined;
                tag?: string | undefined;
                modelValue?: boolean | undefined;
                stateful?: boolean | undefined;
                href?: string | undefined;
                color?: string | undefined;
                to?: string | Record<string, any> | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: string | undefined;
                icon?: string | undefined;
                ariaCloseLabel?: import("../../composables").TranslationProp | undefined;
                square?: boolean | undefined;
                closeable?: boolean | undefined;
                outline?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaCollapse: {
                header?: string | undefined;
                preset?: string | undefined;
                disabled?: boolean | undefined;
                modelValue?: boolean | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                textColor?: string | undefined;
                icon?: string | undefined;
                iconColor?: string | undefined;
                bodyColor?: string | undefined;
                bodyTextColor?: string | undefined;
                colorAll?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaColorIndicator: {
                size?: string | undefined;
                preset?: string | undefined;
                modelValue?: boolean | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                square?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaColorInput: {
                label?: string | undefined;
                error?: NonNullable<boolean | undefined> | undefined;
                preset?: string | undefined;
                name?: string | undefined;
                mask?: NonNullable<string | Record<string, number[]> | import("cleave.js/options").CleaveOptions | undefined> | undefined;
                pattern?: string | undefined;
                success?: NonNullable<boolean | undefined> | undefined;
                autofocus?: NonNullable<boolean | undefined> | undefined;
                type?: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"text" | "password"> | undefined> | undefined;
                disabled?: boolean | undefined;
                readonly?: NonNullable<boolean | undefined> | undefined;
                errorMessages?: NonNullable<string | string[] | undefined> | undefined;
                modelValue?: string | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                loading?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                rules?: import("../../composables").ValidationRule<string>[] | undefined;
                dirty?: NonNullable<boolean | undefined> | undefined;
                errorCount?: NonNullable<string | number | undefined> | undefined;
                messages?: NonNullable<string | string[] | undefined> | undefined;
                immediateValidation?: NonNullable<boolean | undefined> | undefined;
                background?: string | undefined;
                tabindex?: NonNullable<string | number | undefined> | undefined;
                requiredMark?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                inputAriaLabel?: NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined> | undefined;
                inputAriaLabelledby?: string | undefined;
                inputAriaDescribedby?: string | undefined;
                counter?: NonNullable<boolean | undefined> | undefined;
                maxLength?: NonNullable<NonNullable<string | number | undefined> | undefined> | undefined;
                placeholder?: string | undefined;
                innerLabel?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                returnRaw?: NonNullable<boolean | undefined> | undefined;
                inputClass?: string | undefined;
                inputmode?: string | undefined;
                ariaResetLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
                strictBindInputValue?: NonNullable<boolean | undefined> | undefined;
                clearable?: NonNullable<boolean | undefined> | undefined;
                clearableIcon?: string | undefined;
                clearValue?: string | undefined;
                indicator?: "square" | "dot" | undefined;
                ariaOpenColorPickerLabel?: import("../../composables").TranslationProp | undefined;
            } & import("vue").HTMLAttributes;
            VaColorPalette: {
                preset?: string | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                modelValue?: string | undefined;
                stateful?: boolean | undefined;
                indicator?: "square" | "dot" | undefined;
                palette?: string[] | undefined;
                ariaIndicatorLabel?: import("../../composables").TranslationProp | undefined;
            } & import("vue").HTMLAttributes;
            VaConfig: {
                preset?: string | undefined;
                components?: Partial<any & {
                    all: import("../../services/component-config").Props;
                    presets: import("../../services/component-config").Presets;
                }> | undefined;
                readonly colors?: {
                    variables?: {
                        [x: string]: string | undefined;
                        primary?: string | undefined;
                        secondary?: string | undefined;
                        success?: string | undefined;
                        info?: string | undefined;
                        danger?: string | undefined;
                        warning?: string | undefined;
                        backgroundPrimary?: string | undefined;
                        backgroundSecondary?: string | undefined;
                        backgroundElement?: string | undefined;
                        backgroundBorder?: string | undefined;
                        textPrimary?: string | undefined;
                        textInverted?: string | undefined;
                        shadow?: string | undefined;
                        focus?: string | undefined;
                        transparent?: string | undefined;
                        onFocus?: string | undefined;
                        onPrimary?: string | undefined;
                        onDanger?: string | undefined;
                        onSuccess?: string | undefined;
                        onSecondary?: string | undefined;
                        onInfo?: string | undefined;
                        onWarning?: string | undefined;
                        onBackgroundPrimary?: string | undefined;
                        onBackgroundSecondary?: string | undefined;
                        onBackgroundElement?: string | undefined;
                        onBackgroundBorder?: string | undefined;
                        onTextPrimary?: string | undefined;
                        onTextInverted?: string | undefined;
                        onShadow?: string | undefined;
                        onTransparent?: string | undefined;
                    } | undefined;
                    threshold?: number | undefined;
                    presets?: {
                        [x: string]: {
                            [x: string]: string | undefined;
                            primary?: string | undefined;
                            secondary?: string | undefined;
                            success?: string | undefined;
                            info?: string | undefined;
                            danger?: string | undefined;
                            warning?: string | undefined;
                            backgroundPrimary?: string | undefined;
                            backgroundSecondary?: string | undefined;
                            backgroundElement?: string | undefined;
                            backgroundBorder?: string | undefined;
                            textPrimary?: string | undefined;
                            textInverted?: string | undefined;
                            shadow?: string | undefined;
                            focus?: string | undefined;
                            transparent?: string | undefined;
                            onFocus?: string | undefined;
                            onPrimary?: string | undefined;
                            onDanger?: string | undefined;
                            onSuccess?: string | undefined;
                            onSecondary?: string | undefined;
                            onInfo?: string | undefined;
                            onWarning?: string | undefined;
                            onBackgroundPrimary?: string | undefined;
                            onBackgroundSecondary?: string | undefined;
                            onBackgroundElement?: string | undefined;
                            onBackgroundBorder?: string | undefined;
                            onTextPrimary?: string | undefined;
                            onTextInverted?: string | undefined;
                            onShadow?: string | undefined;
                            onTransparent?: string | undefined;
                        } | undefined;
                        light?: {
                            [x: string]: string | undefined;
                            primary?: string | undefined;
                            secondary?: string | undefined;
                            success?: string | undefined;
                            info?: string | undefined;
                            danger?: string | undefined;
                            warning?: string | undefined;
                            backgroundPrimary?: string | undefined;
                            backgroundSecondary?: string | undefined;
                            backgroundElement?: string | undefined;
                            backgroundBorder?: string | undefined;
                            textPrimary?: string | undefined;
                            textInverted?: string | undefined;
                            shadow?: string | undefined;
                            focus?: string | undefined;
                            transparent?: string | undefined;
                            onFocus?: string | undefined;
                            onPrimary?: string | undefined;
                            onDanger?: string | undefined;
                            onSuccess?: string | undefined;
                            onSecondary?: string | undefined;
                            onInfo?: string | undefined;
                            onWarning?: string | undefined;
                            onBackgroundPrimary?: string | undefined;
                            onBackgroundSecondary?: string | undefined;
                            onBackgroundElement?: string | undefined;
                            onBackgroundBorder?: string | undefined;
                            onTextPrimary?: string | undefined;
                            onTextInverted?: string | undefined;
                            onShadow?: string | undefined;
                            onTransparent?: string | undefined;
                        } | undefined;
                        dark?: {
                            [x: string]: string | undefined;
                            primary?: string | undefined;
                            secondary?: string | undefined;
                            success?: string | undefined;
                            info?: string | undefined;
                            danger?: string | undefined;
                            warning?: string | undefined;
                            backgroundPrimary?: string | undefined;
                            backgroundSecondary?: string | undefined;
                            backgroundElement?: string | undefined;
                            backgroundBorder?: string | undefined;
                            textPrimary?: string | undefined;
                            textInverted?: string | undefined;
                            shadow?: string | undefined;
                            focus?: string | undefined;
                            transparent?: string | undefined;
                            onFocus?: string | undefined;
                            onPrimary?: string | undefined;
                            onDanger?: string | undefined;
                            onSuccess?: string | undefined;
                            onSecondary?: string | undefined;
                            onInfo?: string | undefined;
                            onWarning?: string | undefined;
                            onBackgroundPrimary?: string | undefined;
                            onBackgroundSecondary?: string | undefined;
                            onBackgroundElement?: string | undefined;
                            onBackgroundBorder?: string | undefined;
                            onTextPrimary?: string | undefined;
                            onTextInverted?: string | undefined;
                            onShadow?: string | undefined;
                            onTransparent?: string | undefined;
                        } | undefined;
                    } | undefined;
                    currentPresetName?: string | undefined;
                } | undefined;
                readonly i18n?: {
                    [x: string]: string | undefined;
                    progress?: string | undefined;
                    search?: string | undefined;
                    cancel?: string | undefined;
                    close?: string | undefined;
                    reset?: string | undefined;
                    switch?: string | undefined;
                    carousel?: string | undefined;
                    pagination?: string | undefined;
                    breadcrumbs?: string | undefined;
                    color?: string | undefined;
                    step?: string | undefined;
                    noOptions?: string | undefined;
                    ok?: string | undefined;
                    uploadFile?: string | undefined;
                    undo?: string | undefined;
                    dropzone?: string | undefined;
                    fileDeleted?: string | undefined;
                    closeAlert?: string | undefined;
                    backToTop?: string | undefined;
                    toggleDropdown?: string | undefined;
                    goPreviousSlide?: string | undefined;
                    goNextSlide?: string | undefined;
                    goSlide?: string | undefined;
                    slideOf?: string | undefined;
                    openColorPicker?: string | undefined;
                    colorSelection?: string | undefined;
                    colorName?: string | undefined;
                    decreaseCounter?: string | undefined;
                    increaseCounter?: string | undefined;
                    selectAllRows?: string | undefined;
                    sortColumnBy?: string | undefined;
                    selectRowByIndex?: string | undefined;
                    resetDate?: string | undefined;
                    nextPeriod?: string | undefined;
                    switchView?: string | undefined;
                    previousPeriod?: string | undefined;
                    removeFile?: string | undefined;
                    goToTheFirstPage?: string | undefined;
                    goToPreviousPage?: string | undefined;
                    goToSpecificPage?: string | undefined;
                    goToSpecificPageInput?: string | undefined;
                    goNextPage?: string | undefined;
                    goLastPage?: string | undefined;
                    currentRating?: string | undefined;
                    voteRating?: string | undefined;
                    optionsFilter?: string | undefined;
                    splitPanels?: string | undefined;
                    movePaginationLeft?: string | undefined;
                    movePaginationRight?: string | undefined;
                    resetTime?: string | undefined;
                    closeToast?: string | undefined;
                    selectedOption?: string | undefined;
                    noSelectedOption?: string | undefined;
                    counterValue?: string | undefined;
                    selectedDate?: string | undefined;
                    selectedTime?: string | undefined;
                    progressState?: string | undefined;
                    next?: string | undefined;
                    back?: string | undefined;
                    finish?: string | undefined;
                    loading?: string | undefined;
                    sliderValue?: string | undefined;
                    inputField?: string | undefined;
                    fileTypeIncorrect?: string | undefined;
                } | undefined;
            } & import("vue").HTMLAttributes;
            VaContent: {} & import("vue").HTMLAttributes;
            VaCounter: {
                label?: string | undefined;
                error?: NonNullable<boolean | undefined> | undefined;
                flat?: boolean | undefined;
                preset?: string | undefined;
                name?: string | undefined;
                success?: NonNullable<boolean | undefined> | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                disabled?: NonNullable<boolean | undefined> | undefined;
                readonly?: NonNullable<boolean | undefined> | undefined;
                errorMessages?: NonNullable<string | string[] | undefined> | undefined;
                modelValue?: string | number | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                step?: string | number | undefined;
                loading?: NonNullable<boolean | undefined> | undefined;
                rules?: import("../../composables").ValidationRule<any>[] | undefined;
                dirty?: NonNullable<boolean | undefined> | undefined;
                errorCount?: NonNullable<string | number | undefined> | undefined;
                messages?: NonNullable<string | string[] | undefined> | undefined;
                immediateValidation?: NonNullable<boolean | undefined> | undefined;
                background?: string | undefined;
                requiredMark?: NonNullable<boolean | undefined> | undefined;
                inputAriaLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
                inputAriaLabelledby?: string | undefined;
                inputAriaDescribedby?: string | undefined;
                counter?: NonNullable<boolean | undefined> | undefined;
                maxLength?: NonNullable<string | number | undefined> | undefined;
                placeholder?: string | undefined;
                innerLabel?: NonNullable<boolean | undefined> | undefined;
                clearable?: boolean | undefined;
                clearableIcon?: string | undefined;
                clearValue?: string | undefined;
                readonly max?: string | number | undefined;
                readonly min?: string | number | undefined;
                manualInput?: boolean | undefined;
                increaseIcon?: string | undefined;
                decreaseIcon?: string | undefined;
                buttons?: boolean | undefined;
                rounded?: boolean | undefined;
                margins?: string | number | undefined;
                longPressDelay?: string | number | undefined;
                ariaDecreaseLabel?: import("../../composables").TranslationProp | undefined;
                ariaIncreaseLabel?: import("../../composables").TranslationProp | undefined;
            } & import("vue").HTMLAttributes;
            VaDataTable: {} & import("vue").HTMLAttributes;
            VaDateInput: {
                label?: string | undefined;
                error?: boolean | undefined;
                anchor?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                preset?: string | undefined;
                name?: string | undefined;
                view?: Partial<import("../va-date-picker/types").DatePickerView> | undefined;
                success?: boolean | undefined;
                ariaLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
                role?: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined> | undefined;
                type?: NonNullable<import("../va-date-picker/types").DatePickerType | undefined> | undefined;
                disabled?: NonNullable<boolean | undefined> | undefined;
                readonly?: NonNullable<boolean | undefined> | undefined;
                errorMessages?: string | string[] | undefined;
                trigger?: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined> | undefined;
                readonly modelValue?: import("../va-date-input/types").DateInputModelValue;
                stateful?: NonNullable<boolean | undefined> | undefined;
                color?: string | undefined;
                loading?: NonNullable<boolean | undefined> | undefined;
                target?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                rules?: import("../../composables").ValidationRule<import("../va-date-input/types").DateInputModelValue>[] | undefined;
                dirty?: boolean | undefined;
                errorCount?: string | number | undefined;
                messages?: string | string[] | undefined;
                immediateValidation?: boolean | undefined;
                placement?: NonNullable<import("../../composables").PlacementWithAlias | undefined> | undefined;
                mode?: NonNullable<NonNullable<import("../va-date-picker/types").DatePickerMode | undefined> | undefined> | undefined;
                hoverOverTimeout?: NonNullable<string | number | undefined> | undefined;
                hoverOutTimeout?: NonNullable<string | number | undefined> | undefined;
                autoPlacement?: NonNullable<boolean | undefined> | undefined;
                stickToEdges?: NonNullable<boolean | undefined> | undefined;
                keepAnchorWidth?: NonNullable<boolean | undefined> | undefined;
                verticalScrollOnOverflow?: NonNullable<boolean | undefined> | undefined;
                anchorSelector?: string | undefined;
                closeOnClickOutside?: NonNullable<boolean | undefined> | undefined;
                closeOnFocusOutside?: NonNullable<boolean | undefined> | undefined;
                closeOnAnchorClick?: NonNullable<boolean | undefined> | undefined;
                closeOnContentClick?: boolean | undefined;
                isContentHoverable?: NonNullable<boolean | undefined> | undefined;
                offset?: NonNullable<import("../va-dropdown/types").DropdownOffsetProp | undefined> | undefined;
                cursor?: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined> | undefined;
                teleport?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                contentClass?: string | undefined;
                background?: string | undefined;
                closeOnChange?: boolean | undefined;
                isOpen?: boolean | undefined;
                requiredMark?: NonNullable<boolean | undefined> | undefined;
                inputAriaLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
                inputAriaLabelledby?: string | undefined;
                inputAriaDescribedby?: string | undefined;
                counter?: NonNullable<boolean | undefined> | undefined;
                placeholder?: string | undefined;
                innerLabel?: NonNullable<boolean | undefined> | undefined;
                ariaResetLabel?: import("../../composables").TranslationProp | undefined;
                clearable?: boolean | undefined;
                clearableIcon?: string | undefined;
                clearValue?: any;
                icon?: string | undefined;
                leftIcon?: boolean | undefined;
                manualInput?: boolean | undefined;
                "child:prevButton"?: (Partial<{
                    size: "small" | "medium" | "large";
                    replace: boolean;
                    preset: string;
                    append: boolean;
                    type: string;
                    disabled: boolean;
                    tag: string;
                    href: string;
                    color: string;
                    loading: boolean;
                    to: string | Record<string, any>;
                    exact: boolean;
                    activeClass: string;
                    exactActiveClass: string;
                    target: string;
                    sizesConfig: Record<string, any>;
                    textColor: string;
                    round: boolean;
                    fontSizesConfig: Record<string, any>;
                    icon: string;
                    block: boolean;
                    textOpacity: string | number;
                    backgroundOpacity: string | number;
                    borderColor: string;
                    gradient: boolean;
                    plain: boolean;
                    iconRight: string;
                    iconColor: string;
                    pressedBehavior: "mask" | "opacity";
                    pressedOpacity: number;
                    pressedMaskColor: string;
                    hoverBehavior: "mask" | "opacity";
                    hoverOpacity: string | number;
                    hoverMaskColor: string;
                }> & Omit<{
                    readonly size: "small" | "medium" | "large";
                    readonly type: string;
                    readonly disabled: boolean;
                    readonly tag: string;
                    readonly color: string;
                    readonly loading: boolean;
                    readonly sizesConfig: Record<string, any>;
                    readonly textColor: string;
                    readonly round: boolean;
                    readonly fontSizesConfig: Record<string, any>;
                    readonly icon: string;
                    readonly block: boolean;
                    readonly textOpacity: string | number;
                    readonly backgroundOpacity: string | number;
                    readonly borderColor: string;
                    readonly gradient: boolean;
                    readonly plain: boolean;
                    readonly iconRight: string;
                    readonly iconColor: string;
                    readonly pressedBehavior: "mask" | "opacity";
                    readonly pressedOpacity: number;
                    readonly pressedMaskColor: string;
                    readonly hoverBehavior: "mask" | "opacity";
                    readonly hoverOpacity: string | number;
                    readonly hoverMaskColor: string;
                    readonly replace?: boolean | undefined;
                    readonly preset?: string | undefined;
                    readonly append?: boolean | undefined;
                    readonly href?: string | undefined;
                    readonly to?: string | Record<string, any> | undefined;
                    readonly exact?: boolean | undefined;
                    readonly activeClass?: string | undefined;
                    readonly exactActiveClass?: string | undefined;
                    readonly target?: string | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                    tag: {
                        type: StringConstructor;
                        default: string;
                    };
                    type: {
                        type: StringConstructor;
                        default: string;
                    };
                    block: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                    textColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    textOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    backgroundOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    borderColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    gradient: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    plain: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    round: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    size: {
                        type: PropType<"small" | "medium" | "large">;
                        default: string;
                        validator: (v: string) => boolean;
                    };
                    icon: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconRight: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    to: {
                        type: PropType<string | Record<string, any>>;
                        default: undefined;
                    };
                    replace: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    append: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    exact: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    activeClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    exactActiveClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    href: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    target: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    pressedBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    pressedOpacity: {
                        type: NumberConstructor;
                        default: number;
                    };
                    pressedMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    hoverBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    hoverOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    hoverMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    sizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    fontSizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    preset: {
                        type: StringConstructor;
                        default: undefined;
                    };
                }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">) | undefined;
                "child:nextButton"?: (Partial<{
                    size: "small" | "medium" | "large";
                    replace: boolean;
                    preset: string;
                    append: boolean;
                    type: string;
                    disabled: boolean;
                    tag: string;
                    href: string;
                    color: string;
                    loading: boolean;
                    to: string | Record<string, any>;
                    exact: boolean;
                    activeClass: string;
                    exactActiveClass: string;
                    target: string;
                    sizesConfig: Record<string, any>;
                    textColor: string;
                    round: boolean;
                    fontSizesConfig: Record<string, any>;
                    icon: string;
                    block: boolean;
                    textOpacity: string | number;
                    backgroundOpacity: string | number;
                    borderColor: string;
                    gradient: boolean;
                    plain: boolean;
                    iconRight: string;
                    iconColor: string;
                    pressedBehavior: "mask" | "opacity";
                    pressedOpacity: number;
                    pressedMaskColor: string;
                    hoverBehavior: "mask" | "opacity";
                    hoverOpacity: string | number;
                    hoverMaskColor: string;
                }> & Omit<{
                    readonly size: "small" | "medium" | "large";
                    readonly type: string;
                    readonly disabled: boolean;
                    readonly tag: string;
                    readonly color: string;
                    readonly loading: boolean;
                    readonly sizesConfig: Record<string, any>;
                    readonly textColor: string;
                    readonly round: boolean;
                    readonly fontSizesConfig: Record<string, any>;
                    readonly icon: string;
                    readonly block: boolean;
                    readonly textOpacity: string | number;
                    readonly backgroundOpacity: string | number;
                    readonly borderColor: string;
                    readonly gradient: boolean;
                    readonly plain: boolean;
                    readonly iconRight: string;
                    readonly iconColor: string;
                    readonly pressedBehavior: "mask" | "opacity";
                    readonly pressedOpacity: number;
                    readonly pressedMaskColor: string;
                    readonly hoverBehavior: "mask" | "opacity";
                    readonly hoverOpacity: string | number;
                    readonly hoverMaskColor: string;
                    readonly replace?: boolean | undefined;
                    readonly preset?: string | undefined;
                    readonly append?: boolean | undefined;
                    readonly href?: string | undefined;
                    readonly to?: string | Record<string, any> | undefined;
                    readonly exact?: boolean | undefined;
                    readonly activeClass?: string | undefined;
                    readonly exactActiveClass?: string | undefined;
                    readonly target?: string | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                    tag: {
                        type: StringConstructor;
                        default: string;
                    };
                    type: {
                        type: StringConstructor;
                        default: string;
                    };
                    block: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                    textColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    textOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    backgroundOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    borderColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    gradient: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    plain: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    round: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    size: {
                        type: PropType<"small" | "medium" | "large">;
                        default: string;
                        validator: (v: string) => boolean;
                    };
                    icon: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconRight: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    to: {
                        type: PropType<string | Record<string, any>>;
                        default: undefined;
                    };
                    replace: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    append: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    exact: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    activeClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    exactActiveClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    href: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    target: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    pressedBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    pressedOpacity: {
                        type: NumberConstructor;
                        default: number;
                    };
                    pressedMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    hoverBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    hoverOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    hoverMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    sizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    fontSizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    preset: {
                        type: StringConstructor;
                        default: undefined;
                    };
                }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">) | undefined;
                "child:middleButton"?: (Partial<{
                    size: "small" | "medium" | "large";
                    replace: boolean;
                    preset: string;
                    append: boolean;
                    type: string;
                    disabled: boolean;
                    tag: string;
                    href: string;
                    color: string;
                    loading: boolean;
                    to: string | Record<string, any>;
                    exact: boolean;
                    activeClass: string;
                    exactActiveClass: string;
                    target: string;
                    sizesConfig: Record<string, any>;
                    textColor: string;
                    round: boolean;
                    fontSizesConfig: Record<string, any>;
                    icon: string;
                    block: boolean;
                    textOpacity: string | number;
                    backgroundOpacity: string | number;
                    borderColor: string;
                    gradient: boolean;
                    plain: boolean;
                    iconRight: string;
                    iconColor: string;
                    pressedBehavior: "mask" | "opacity";
                    pressedOpacity: number;
                    pressedMaskColor: string;
                    hoverBehavior: "mask" | "opacity";
                    hoverOpacity: string | number;
                    hoverMaskColor: string;
                }> & Omit<{
                    readonly size: "small" | "medium" | "large";
                    readonly type: string;
                    readonly disabled: boolean;
                    readonly tag: string;
                    readonly color: string;
                    readonly loading: boolean;
                    readonly sizesConfig: Record<string, any>;
                    readonly textColor: string;
                    readonly round: boolean;
                    readonly fontSizesConfig: Record<string, any>;
                    readonly icon: string;
                    readonly block: boolean;
                    readonly textOpacity: string | number;
                    readonly backgroundOpacity: string | number;
                    readonly borderColor: string;
                    readonly gradient: boolean;
                    readonly plain: boolean;
                    readonly iconRight: string;
                    readonly iconColor: string;
                    readonly pressedBehavior: "mask" | "opacity";
                    readonly pressedOpacity: number;
                    readonly pressedMaskColor: string;
                    readonly hoverBehavior: "mask" | "opacity";
                    readonly hoverOpacity: string | number;
                    readonly hoverMaskColor: string;
                    readonly replace?: boolean | undefined;
                    readonly preset?: string | undefined;
                    readonly append?: boolean | undefined;
                    readonly href?: string | undefined;
                    readonly to?: string | Record<string, any> | undefined;
                    readonly exact?: boolean | undefined;
                    readonly activeClass?: string | undefined;
                    readonly exactActiveClass?: string | undefined;
                    readonly target?: string | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                    tag: {
                        type: StringConstructor;
                        default: string;
                    };
                    type: {
                        type: StringConstructor;
                        default: string;
                    };
                    block: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                    textColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    textOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    backgroundOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    borderColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    gradient: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    plain: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    round: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    size: {
                        type: PropType<"small" | "medium" | "large">;
                        default: string;
                        validator: (v: string) => boolean;
                    };
                    icon: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconRight: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    to: {
                        type: PropType<string | Record<string, any>>;
                        default: undefined;
                    };
                    replace: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    append: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    exact: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    activeClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    exactActiveClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    href: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    target: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    pressedBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    pressedOpacity: {
                        type: NumberConstructor;
                        default: number;
                    };
                    pressedMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    hoverBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    hoverOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    hoverMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    sizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    fontSizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    preset: {
                        type: StringConstructor;
                        default: undefined;
                    };
                }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">) | undefined;
                monthNames?: string[] | undefined;
                ariaNextPeriodLabel?: NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined> | undefined;
                ariaPreviousPeriodLabel?: NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined> | undefined;
                ariaSwitchViewLabel?: NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined> | undefined;
                weekdayNames?: string[] | undefined;
                firstWeekday?: NonNullable<NonNullable<("Monday" | "Sunday" | "monday" | "sunday") | undefined> | undefined> | undefined;
                hideWeekDays?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                showOtherMonths?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                allowedDays?: ((date: Date) => boolean) | undefined;
                weekends?: ((date: Date) => boolean) | undefined;
                highlightWeekend?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                highlightToday?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                allowedMonths?: ((date: Date) => boolean) | undefined;
                allowedYears?: ((date: Date) => boolean) | undefined;
                startYear?: NonNullable<NonNullable<string | number | undefined> | undefined> | undefined;
                endYear?: NonNullable<NonNullable<string | number | undefined> | undefined> | undefined;
                weekendsColor?: string | undefined;
                resetOnClose?: boolean | undefined;
                readonly format?: ((date: import("../va-date-input/types").DateInputModelValue) => string) | undefined;
                formatDate?: ((date: Date) => string) | undefined;
                readonly formatValue?: ((date: import("../va-date-input/types").DateInputModelValue) => string) | undefined;
                readonly parse?: ((input: string) => import("../va-date-input/types").DateInputValue) | undefined;
                readonly parseDate?: ((input: string) => Date) | undefined;
                delimiter?: string | undefined;
                rangeDelimiter?: string | undefined;
                ariaToggleDropdownLabel?: import("../../composables").TranslationProp | undefined;
                ariaSelectedDateLabel?: import("../../composables").TranslationProp | undefined;
            } & import("vue").HTMLAttributes;
            VaDatePicker: {
                preset?: string | undefined;
                readonly view?: Partial<import("../va-date-picker/types").DatePickerView> | undefined;
                type?: import("../va-date-picker/types").DatePickerType | undefined;
                disabled?: boolean | undefined;
                readonly?: boolean | undefined;
                readonly modelValue?: import("../va-date-picker/types").DatePickerModelValue;
                stateful?: boolean | undefined;
                color?: string | undefined;
                mode?: NonNullable<import("../va-date-picker/types").DatePickerMode | undefined> | undefined;
                "child:prevButton"?: NonNullable<Partial<{
                    size: "small" | "medium" | "large";
                    replace: boolean;
                    preset: string;
                    append: boolean;
                    type: string;
                    disabled: boolean;
                    tag: string;
                    href: string;
                    color: string;
                    loading: boolean;
                    to: string | Record<string, any>;
                    exact: boolean;
                    activeClass: string;
                    exactActiveClass: string;
                    target: string;
                    sizesConfig: Record<string, any>;
                    textColor: string;
                    round: boolean;
                    fontSizesConfig: Record<string, any>;
                    icon: string;
                    block: boolean;
                    textOpacity: string | number;
                    backgroundOpacity: string | number;
                    borderColor: string;
                    gradient: boolean;
                    plain: boolean;
                    iconRight: string;
                    iconColor: string;
                    pressedBehavior: "mask" | "opacity";
                    pressedOpacity: number;
                    pressedMaskColor: string;
                    hoverBehavior: "mask" | "opacity";
                    hoverOpacity: string | number;
                    hoverMaskColor: string;
                }> & Omit<{
                    readonly size: "small" | "medium" | "large";
                    readonly type: string;
                    readonly disabled: boolean;
                    readonly tag: string;
                    readonly color: string;
                    readonly loading: boolean;
                    readonly sizesConfig: Record<string, any>;
                    readonly textColor: string;
                    readonly round: boolean;
                    readonly fontSizesConfig: Record<string, any>;
                    readonly icon: string;
                    readonly block: boolean;
                    readonly textOpacity: string | number;
                    readonly backgroundOpacity: string | number;
                    readonly borderColor: string;
                    readonly gradient: boolean;
                    readonly plain: boolean;
                    readonly iconRight: string;
                    readonly iconColor: string;
                    readonly pressedBehavior: "mask" | "opacity";
                    readonly pressedOpacity: number;
                    readonly pressedMaskColor: string;
                    readonly hoverBehavior: "mask" | "opacity";
                    readonly hoverOpacity: string | number;
                    readonly hoverMaskColor: string;
                    readonly replace?: boolean | undefined;
                    readonly preset?: string | undefined;
                    readonly append?: boolean | undefined;
                    readonly href?: string | undefined;
                    readonly to?: string | Record<string, any> | undefined;
                    readonly exact?: boolean | undefined;
                    readonly activeClass?: string | undefined;
                    readonly exactActiveClass?: string | undefined;
                    readonly target?: string | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                    tag: {
                        type: StringConstructor;
                        default: string;
                    };
                    type: {
                        type: StringConstructor;
                        default: string;
                    };
                    block: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                    textColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    textOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    backgroundOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    borderColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    gradient: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    plain: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    round: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    size: {
                        type: PropType<"small" | "medium" | "large">;
                        default: string;
                        validator: (v: string) => boolean;
                    };
                    icon: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconRight: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    to: {
                        type: PropType<string | Record<string, any>>;
                        default: undefined;
                    };
                    replace: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    append: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    exact: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    activeClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    exactActiveClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    href: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    target: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    pressedBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    pressedOpacity: {
                        type: NumberConstructor;
                        default: number;
                    };
                    pressedMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    hoverBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    hoverOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    hoverMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    sizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    fontSizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    preset: {
                        type: StringConstructor;
                        default: undefined;
                    };
                }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
                "child:nextButton"?: NonNullable<Partial<{
                    size: "small" | "medium" | "large";
                    replace: boolean;
                    preset: string;
                    append: boolean;
                    type: string;
                    disabled: boolean;
                    tag: string;
                    href: string;
                    color: string;
                    loading: boolean;
                    to: string | Record<string, any>;
                    exact: boolean;
                    activeClass: string;
                    exactActiveClass: string;
                    target: string;
                    sizesConfig: Record<string, any>;
                    textColor: string;
                    round: boolean;
                    fontSizesConfig: Record<string, any>;
                    icon: string;
                    block: boolean;
                    textOpacity: string | number;
                    backgroundOpacity: string | number;
                    borderColor: string;
                    gradient: boolean;
                    plain: boolean;
                    iconRight: string;
                    iconColor: string;
                    pressedBehavior: "mask" | "opacity";
                    pressedOpacity: number;
                    pressedMaskColor: string;
                    hoverBehavior: "mask" | "opacity";
                    hoverOpacity: string | number;
                    hoverMaskColor: string;
                }> & Omit<{
                    readonly size: "small" | "medium" | "large";
                    readonly type: string;
                    readonly disabled: boolean;
                    readonly tag: string;
                    readonly color: string;
                    readonly loading: boolean;
                    readonly sizesConfig: Record<string, any>;
                    readonly textColor: string;
                    readonly round: boolean;
                    readonly fontSizesConfig: Record<string, any>;
                    readonly icon: string;
                    readonly block: boolean;
                    readonly textOpacity: string | number;
                    readonly backgroundOpacity: string | number;
                    readonly borderColor: string;
                    readonly gradient: boolean;
                    readonly plain: boolean;
                    readonly iconRight: string;
                    readonly iconColor: string;
                    readonly pressedBehavior: "mask" | "opacity";
                    readonly pressedOpacity: number;
                    readonly pressedMaskColor: string;
                    readonly hoverBehavior: "mask" | "opacity";
                    readonly hoverOpacity: string | number;
                    readonly hoverMaskColor: string;
                    readonly replace?: boolean | undefined;
                    readonly preset?: string | undefined;
                    readonly append?: boolean | undefined;
                    readonly href?: string | undefined;
                    readonly to?: string | Record<string, any> | undefined;
                    readonly exact?: boolean | undefined;
                    readonly activeClass?: string | undefined;
                    readonly exactActiveClass?: string | undefined;
                    readonly target?: string | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                    tag: {
                        type: StringConstructor;
                        default: string;
                    };
                    type: {
                        type: StringConstructor;
                        default: string;
                    };
                    block: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                    textColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    textOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    backgroundOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    borderColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    gradient: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    plain: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    round: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    size: {
                        type: PropType<"small" | "medium" | "large">;
                        default: string;
                        validator: (v: string) => boolean;
                    };
                    icon: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconRight: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    to: {
                        type: PropType<string | Record<string, any>>;
                        default: undefined;
                    };
                    replace: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    append: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    exact: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    activeClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    exactActiveClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    href: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    target: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    pressedBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    pressedOpacity: {
                        type: NumberConstructor;
                        default: number;
                    };
                    pressedMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    hoverBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    hoverOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    hoverMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    sizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    fontSizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    preset: {
                        type: StringConstructor;
                        default: undefined;
                    };
                }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
                "child:middleButton"?: NonNullable<Partial<{
                    size: "small" | "medium" | "large";
                    replace: boolean;
                    preset: string;
                    append: boolean;
                    type: string;
                    disabled: boolean;
                    tag: string;
                    href: string;
                    color: string;
                    loading: boolean;
                    to: string | Record<string, any>;
                    exact: boolean;
                    activeClass: string;
                    exactActiveClass: string;
                    target: string;
                    sizesConfig: Record<string, any>;
                    textColor: string;
                    round: boolean;
                    fontSizesConfig: Record<string, any>;
                    icon: string;
                    block: boolean;
                    textOpacity: string | number;
                    backgroundOpacity: string | number;
                    borderColor: string;
                    gradient: boolean;
                    plain: boolean;
                    iconRight: string;
                    iconColor: string;
                    pressedBehavior: "mask" | "opacity";
                    pressedOpacity: number;
                    pressedMaskColor: string;
                    hoverBehavior: "mask" | "opacity";
                    hoverOpacity: string | number;
                    hoverMaskColor: string;
                }> & Omit<{
                    readonly size: "small" | "medium" | "large";
                    readonly type: string;
                    readonly disabled: boolean;
                    readonly tag: string;
                    readonly color: string;
                    readonly loading: boolean;
                    readonly sizesConfig: Record<string, any>;
                    readonly textColor: string;
                    readonly round: boolean;
                    readonly fontSizesConfig: Record<string, any>;
                    readonly icon: string;
                    readonly block: boolean;
                    readonly textOpacity: string | number;
                    readonly backgroundOpacity: string | number;
                    readonly borderColor: string;
                    readonly gradient: boolean;
                    readonly plain: boolean;
                    readonly iconRight: string;
                    readonly iconColor: string;
                    readonly pressedBehavior: "mask" | "opacity";
                    readonly pressedOpacity: number;
                    readonly pressedMaskColor: string;
                    readonly hoverBehavior: "mask" | "opacity";
                    readonly hoverOpacity: string | number;
                    readonly hoverMaskColor: string;
                    readonly replace?: boolean | undefined;
                    readonly preset?: string | undefined;
                    readonly append?: boolean | undefined;
                    readonly href?: string | undefined;
                    readonly to?: string | Record<string, any> | undefined;
                    readonly exact?: boolean | undefined;
                    readonly activeClass?: string | undefined;
                    readonly exactActiveClass?: string | undefined;
                    readonly target?: string | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                    tag: {
                        type: StringConstructor;
                        default: string;
                    };
                    type: {
                        type: StringConstructor;
                        default: string;
                    };
                    block: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                    textColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    textOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    backgroundOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    borderColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    gradient: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    plain: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    round: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    size: {
                        type: PropType<"small" | "medium" | "large">;
                        default: string;
                        validator: (v: string) => boolean;
                    };
                    icon: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconRight: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    to: {
                        type: PropType<string | Record<string, any>>;
                        default: undefined;
                    };
                    replace: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    append: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    exact: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    activeClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    exactActiveClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    href: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    target: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    pressedBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    pressedOpacity: {
                        type: NumberConstructor;
                        default: number;
                    };
                    pressedMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    hoverBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    hoverOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    hoverMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    sizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    fontSizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    preset: {
                        type: StringConstructor;
                        default: undefined;
                    };
                }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
                monthNames?: string[] | undefined;
                ariaNextPeriodLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
                ariaPreviousPeriodLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
                ariaSwitchViewLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
                weekdayNames?: string[] | undefined;
                firstWeekday?: NonNullable<("Monday" | "Sunday" | "monday" | "sunday") | undefined> | undefined;
                hideWeekDays?: NonNullable<boolean | undefined> | undefined;
                showOtherMonths?: NonNullable<boolean | undefined> | undefined;
                allowedDays?: ((date: Date) => boolean) | undefined;
                weekends?: ((date: Date) => boolean) | undefined;
                highlightWeekend?: NonNullable<boolean | undefined> | undefined;
                highlightToday?: NonNullable<boolean | undefined> | undefined;
                allowedMonths?: ((date: Date) => boolean) | undefined;
                allowedYears?: ((date: Date) => boolean) | undefined;
                startYear?: NonNullable<string | number | undefined> | undefined;
                endYear?: NonNullable<string | number | undefined> | undefined;
                weekendsColor?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaDivider: {
                preset?: string | undefined;
                color?: string | undefined;
                orientation?: "left" | "center" | "right" | undefined;
                vertical?: boolean | undefined;
                inset?: boolean | undefined;
                dashed?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaDropdown: {
                anchor?: import("../../composables").MaybeHTMLElementOrSelector;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                role?: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined;
                disabled?: boolean | undefined;
                readonly?: boolean | undefined;
                trigger?: import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined;
                modelValue?: boolean | undefined;
                stateful?: boolean | undefined;
                target?: import("../../composables").MaybeHTMLElementOrSelector;
                placement?: import("../../composables").PlacementWithAlias | undefined;
                hoverOverTimeout?: string | number | undefined;
                hoverOutTimeout?: string | number | undefined;
                autoPlacement?: boolean | undefined;
                stickToEdges?: boolean | undefined;
                keepAnchorWidth?: boolean | undefined;
                verticalScrollOnOverflow?: boolean | undefined;
                anchorSelector?: string | undefined;
                innerAnchorSelector?: string | undefined;
                closeOnClickOutside?: boolean | undefined;
                closeOnFocusOutside?: boolean | undefined;
                closeOnAnchorClick?: boolean | undefined;
                closeOnContentClick?: boolean | undefined;
                isContentHoverable?: boolean | undefined;
                offset?: import("../va-dropdown/types").DropdownOffsetProp | undefined;
                cursor?: boolean | import("../va-dropdown/types").CursorAnchor | undefined;
                teleport?: import("../../composables").MaybeHTMLElementOrSelector;
                keyboardNavigation?: boolean | undefined;
                contentClass?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaDropdownContent: {
                noPadding?: boolean | undefined;
                background?: string | undefined;
                readonly textColor?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaFallback: {
                readonly fallbackSrc?: string | undefined;
                readonly fallbackText?: string | undefined;
                readonly fallbackIcon?: string | undefined;
                readonly fallbackRender?: (() => any) | undefined;
            } & import("vue").HTMLAttributes;
            VaFileUpload: {
                preset?: string | undefined;
                type?: "list" | "single" | "gallery" | undefined;
                disabled?: boolean | undefined;
                modelValue?: import("..").VaFile | import("..").VaFile[] | undefined;
                color?: string | undefined;
                undo?: boolean | undefined;
                dropzone?: boolean | undefined;
                file?: import("..").ConvertedFile | undefined;
                ariaRemoveFileLabel?: NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined> | undefined;
                files?: import("..").VaFile[] | undefined;
                fileTypes?: string | undefined;
                hideFileList?: boolean | undefined;
                undoDuration?: string | number | undefined;
                undoButtonText?: import("../../composables").TranslationProp | undefined;
                dropZoneText?: import("../../composables").TranslationProp | undefined;
                uploadButtonText?: import("../../composables").TranslationProp | undefined;
                deletedFileMessage?: import("../../composables").TranslationProp | undefined;
                fileIncorrectMessage?: import("../../composables").TranslationProp | undefined;
            } & import("vue").HTMLAttributes;
            VaForm: {
                preset?: string | undefined;
                name?: string | undefined;
                immediate?: boolean | undefined;
                autofocus?: boolean | undefined;
                tag?: string | undefined;
                trigger?: "blur" | "change" | undefined;
                modelValue?: boolean | undefined;
                hideErrors?: boolean | undefined;
                hideErrorMessages?: boolean | undefined;
                hideLoading?: boolean | undefined;
                stateful?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaHover: {
                preset?: string | undefined;
                disabled?: boolean | undefined;
                modelValue?: boolean | undefined;
                stateful?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaIcon: {
                size?: string | number | undefined;
                preset?: string | undefined;
                name?: string | undefined;
                readonly tag?: string | undefined;
                readonly color?: string | undefined;
                sizesConfig?: Record<string, any> | undefined;
                readonly component?: any;
                readonly rotation?: string | number | undefined;
                readonly spin?: string | boolean | undefined;
                flip?: "horizontal" | "vertical" | "off" | "both" | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
            } & import("vue").HTMLAttributes;
            VaImage: {
                title?: string | undefined;
                preset?: string | undefined;
                draggable?: boolean | undefined;
                readonly loading?: "lazy" | "eager" | undefined;
                sizes?: string | undefined;
                alt?: string | undefined;
                readonly crossorigin?: "anonymous" | "use-credentials" | undefined;
                readonly src?: string | undefined;
                fallbackSrc?: string | undefined;
                fallbackText?: string | undefined;
                fallbackIcon?: string | undefined;
                fallbackRender?: (() => any) | undefined;
                maxWidth?: string | number | undefined;
                ratio?: number | "auto" | undefined;
                lazy?: boolean | undefined;
                fit?: "fill" | "none" | "contain" | "cover" | "scale-down" | undefined;
                placeholderSrc?: string | undefined;
                srcset?: string | undefined;
                readonly decoding?: "auto" | "sync" | "async" | undefined;
                fetchpriority?: "auto" | "high" | "low" | undefined;
                readonly referrerpolicy?: "origin" | "no-referrer" | "no-referrer-when-downgrade" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url" | undefined;
            } & import("vue").HTMLAttributes;
            VaInfiniteScroll: {
                readonly load?: Function | undefined;
                reverse?: boolean | undefined;
                preset?: string | undefined;
                disabled?: boolean | undefined;
                tag?: string | undefined;
                offset?: string | number | undefined;
                scrollTarget?: string | HTMLElement | undefined;
                debounce?: string | number | undefined;
            } & import("vue").HTMLAttributes;
            VaInnerLoading: {
                size?: string | number | undefined;
                preset?: string | undefined;
                readonly color?: string | undefined;
                loading?: boolean | undefined;
                icon?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaInput: {
                label?: string | undefined;
                error?: boolean | undefined;
                preset?: string | undefined;
                name?: string | undefined;
                mask?: string | Record<string, number[]> | import("cleave.js/options").CleaveOptions | undefined;
                readonly pattern?: string | undefined;
                success?: boolean | undefined;
                autofocus?: boolean | undefined;
                type?: import("../../utils/types/prop-type").StringWithAutocomplete<"text" | "password"> | undefined;
                disabled?: boolean | undefined;
                readonly?: boolean | undefined;
                errorMessages?: string | string[] | undefined;
                modelValue?: string | number | null | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                loading?: NonNullable<boolean | undefined> | undefined;
                rules?: import("../../composables").ValidationRule<string>[] | undefined;
                dirty?: boolean | undefined;
                errorCount?: string | number | undefined;
                messages?: string | string[] | undefined;
                immediateValidation?: boolean | undefined;
                background?: string | undefined;
                tabindex?: string | number | undefined;
                requiredMark?: NonNullable<boolean | undefined> | undefined;
                inputAriaLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
                inputAriaLabelledby?: string | undefined;
                inputAriaDescribedby?: string | undefined;
                counter?: boolean | undefined;
                maxLength?: NonNullable<string | number | undefined> | undefined;
                placeholder?: string | undefined;
                innerLabel?: NonNullable<boolean | undefined> | undefined;
                returnRaw?: boolean | undefined;
                inputClass?: string | undefined;
                inputmode?: string | undefined;
                ariaResetLabel?: import("../../composables").TranslationProp | undefined;
                strictBindInputValue?: boolean | undefined;
                clearable?: boolean | undefined;
                clearableIcon?: string | undefined;
                clearValue?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaLayout: {
                left?: {
                    absolute?: boolean | undefined;
                    order?: number | undefined;
                    fixed?: boolean | undefined;
                    overlay?: boolean | undefined;
                } | undefined;
                right?: {
                    absolute?: boolean | undefined;
                    order?: number | undefined;
                    fixed?: boolean | undefined;
                    overlay?: boolean | undefined;
                } | undefined;
                bottom?: {
                    absolute?: boolean | undefined;
                    order?: number | undefined;
                    fixed?: boolean | undefined;
                    overlay?: boolean | undefined;
                } | undefined;
                top?: {
                    absolute?: boolean | undefined;
                    order?: number | undefined;
                    fixed?: boolean | undefined;
                    overlay?: boolean | undefined;
                } | undefined;
                allowBodyScrollOnOverlay?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaInputWrapper: {
                label?: string | undefined;
                error?: boolean | undefined;
                preset?: string | undefined;
                name?: string | undefined;
                success?: boolean | undefined;
                disabled?: boolean | undefined;
                readonly?: boolean | undefined;
                errorMessages?: string | string[] | undefined;
                modelValue?: any;
                color?: string | undefined;
                loading?: boolean | undefined;
                rules?: import("../../composables").ValidationRule<any>[] | undefined;
                dirty?: boolean | undefined;
                errorCount?: string | number | undefined;
                messages?: string | string[] | undefined;
                immediateValidation?: boolean | undefined;
                readonly background?: string | undefined;
                requiredMark?: boolean | undefined;
                inputAriaLabel?: import("../../composables").TranslationProp | undefined;
                readonly inputAriaLabelledby?: string | undefined;
                readonly inputAriaDescribedby?: string | undefined;
                counter?: boolean | undefined;
                maxLength?: string | number | undefined;
                placeholder?: string | undefined;
                innerLabel?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaList: {
                preset?: string | undefined;
                fit?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaListItem: {
                replace?: boolean | undefined;
                preset?: string | undefined;
                append?: boolean | undefined;
                disabled?: boolean | undefined;
                tag?: string | undefined;
                href?: string | undefined;
                to?: string | Record<string, any> | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaListItemLabel: {
                caption?: boolean | undefined;
                preset?: string | undefined;
                lines?: string | number | undefined;
            } & import("vue").HTMLAttributes;
            VaListItemSection: {
                preset?: string | undefined;
                icon?: boolean | undefined;
                avatar?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaListLabel: {
                preset?: string | undefined;
                color?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaListSeparator: {
                preset?: string | undefined;
                fit?: boolean | undefined;
                spaced?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaMessageList: {
                modelValue?: string | string[] | undefined;
                readonly color?: string | undefined;
                limit?: string | number | undefined;
                hasError?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaModal: {
                title?: string | undefined;
                blur?: boolean | undefined;
                size?: import("../../utils/types/prop-type").StringWithAutocomplete<"small" | "medium" | "large" | "auto"> | undefined;
                message?: string | undefined;
                modelValue?: boolean | undefined;
                stateful?: boolean | undefined;
                sizesConfig?: Record<string, any> | undefined;
                readonly anchorClass?: string | undefined;
                zIndex?: string | number | undefined;
                noPadding?: boolean | undefined;
                backgroundColor?: string | undefined;
                closeButton?: boolean | undefined;
                "child:cancelButton"?: NonNullable<Partial<{
                    size: "small" | "medium" | "large";
                    replace: boolean;
                    preset: string;
                    append: boolean;
                    type: string;
                    disabled: boolean;
                    tag: string;
                    href: string;
                    color: string;
                    loading: boolean;
                    to: string | Record<string, any>;
                    exact: boolean;
                    activeClass: string;
                    exactActiveClass: string;
                    target: string;
                    sizesConfig: Record<string, any>;
                    textColor: string;
                    round: boolean;
                    fontSizesConfig: Record<string, any>;
                    icon: string;
                    block: boolean;
                    textOpacity: string | number;
                    backgroundOpacity: string | number;
                    borderColor: string;
                    gradient: boolean;
                    plain: boolean;
                    iconRight: string;
                    iconColor: string;
                    pressedBehavior: "mask" | "opacity";
                    pressedOpacity: number;
                    pressedMaskColor: string;
                    hoverBehavior: "mask" | "opacity";
                    hoverOpacity: string | number;
                    hoverMaskColor: string;
                }> & Omit<{
                    readonly size: "small" | "medium" | "large";
                    readonly type: string;
                    readonly disabled: boolean;
                    readonly tag: string;
                    readonly color: string;
                    readonly loading: boolean;
                    readonly sizesConfig: Record<string, any>;
                    readonly textColor: string;
                    readonly round: boolean;
                    readonly fontSizesConfig: Record<string, any>;
                    readonly icon: string;
                    readonly block: boolean;
                    readonly textOpacity: string | number;
                    readonly backgroundOpacity: string | number;
                    readonly borderColor: string;
                    readonly gradient: boolean;
                    readonly plain: boolean;
                    readonly iconRight: string;
                    readonly iconColor: string;
                    readonly pressedBehavior: "mask" | "opacity";
                    readonly pressedOpacity: number;
                    readonly pressedMaskColor: string;
                    readonly hoverBehavior: "mask" | "opacity";
                    readonly hoverOpacity: string | number;
                    readonly hoverMaskColor: string;
                    readonly replace?: boolean | undefined;
                    readonly preset?: string | undefined;
                    readonly append?: boolean | undefined;
                    readonly href?: string | undefined;
                    readonly to?: string | Record<string, any> | undefined;
                    readonly exact?: boolean | undefined;
                    readonly activeClass?: string | undefined;
                    readonly exactActiveClass?: string | undefined;
                    readonly target?: string | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                    tag: {
                        type: StringConstructor;
                        default: string;
                    };
                    type: {
                        type: StringConstructor;
                        default: string;
                    };
                    block: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                    textColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    textOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    backgroundOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    borderColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    gradient: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    plain: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    round: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    size: {
                        type: PropType<"small" | "medium" | "large">;
                        default: string;
                        validator: (v: string) => boolean;
                    };
                    icon: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconRight: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    to: {
                        type: PropType<string | Record<string, any>>;
                        default: undefined;
                    };
                    replace: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    append: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    exact: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    activeClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    exactActiveClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    href: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    target: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    pressedBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    pressedOpacity: {
                        type: NumberConstructor;
                        default: number;
                    };
                    pressedMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    hoverBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    hoverOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    hoverMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    sizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    fontSizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    preset: {
                        type: StringConstructor;
                        default: undefined;
                    };
                }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
                "child:okButton"?: NonNullable<Partial<{
                    size: "small" | "medium" | "large";
                    replace: boolean;
                    preset: string;
                    append: boolean;
                    type: string;
                    disabled: boolean;
                    tag: string;
                    href: string;
                    color: string;
                    loading: boolean;
                    to: string | Record<string, any>;
                    exact: boolean;
                    activeClass: string;
                    exactActiveClass: string;
                    target: string;
                    sizesConfig: Record<string, any>;
                    textColor: string;
                    round: boolean;
                    fontSizesConfig: Record<string, any>;
                    icon: string;
                    block: boolean;
                    textOpacity: string | number;
                    backgroundOpacity: string | number;
                    borderColor: string;
                    gradient: boolean;
                    plain: boolean;
                    iconRight: string;
                    iconColor: string;
                    pressedBehavior: "mask" | "opacity";
                    pressedOpacity: number;
                    pressedMaskColor: string;
                    hoverBehavior: "mask" | "opacity";
                    hoverOpacity: string | number;
                    hoverMaskColor: string;
                }> & Omit<{
                    readonly size: "small" | "medium" | "large";
                    readonly type: string;
                    readonly disabled: boolean;
                    readonly tag: string;
                    readonly color: string;
                    readonly loading: boolean;
                    readonly sizesConfig: Record<string, any>;
                    readonly textColor: string;
                    readonly round: boolean;
                    readonly fontSizesConfig: Record<string, any>;
                    readonly icon: string;
                    readonly block: boolean;
                    readonly textOpacity: string | number;
                    readonly backgroundOpacity: string | number;
                    readonly borderColor: string;
                    readonly gradient: boolean;
                    readonly plain: boolean;
                    readonly iconRight: string;
                    readonly iconColor: string;
                    readonly pressedBehavior: "mask" | "opacity";
                    readonly pressedOpacity: number;
                    readonly pressedMaskColor: string;
                    readonly hoverBehavior: "mask" | "opacity";
                    readonly hoverOpacity: string | number;
                    readonly hoverMaskColor: string;
                    readonly replace?: boolean | undefined;
                    readonly preset?: string | undefined;
                    readonly append?: boolean | undefined;
                    readonly href?: string | undefined;
                    readonly to?: string | Record<string, any> | undefined;
                    readonly exact?: boolean | undefined;
                    readonly activeClass?: string | undefined;
                    readonly exactActiveClass?: string | undefined;
                    readonly target?: string | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                    tag: {
                        type: StringConstructor;
                        default: string;
                    };
                    type: {
                        type: StringConstructor;
                        default: string;
                    };
                    block: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                    textColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    textOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    backgroundOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    borderColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    gradient: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    plain: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    round: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    size: {
                        type: PropType<"small" | "medium" | "large">;
                        default: string;
                        validator: (v: string) => boolean;
                    };
                    icon: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconRight: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    to: {
                        type: PropType<string | Record<string, any>>;
                        default: undefined;
                    };
                    replace: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    append: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    exact: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    activeClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    exactActiveClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    href: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    target: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    pressedBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    pressedOpacity: {
                        type: NumberConstructor;
                        default: number;
                    };
                    pressedMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    hoverBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    hoverOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    hoverMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    sizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    fontSizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    preset: {
                        type: StringConstructor;
                        default: undefined;
                    };
                }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
                "child:closeButton"?: NonNullable<Partial<{
                    size: string | number;
                    preset: string;
                    name: string;
                    sizesConfig: Record<string, any>;
                    flip: "horizontal" | "vertical" | "off" | "both";
                    fontSizesConfig: Record<string, any>;
                }> & Omit<{
                    readonly size: string | number;
                    readonly name: string;
                    readonly sizesConfig: Record<string, any>;
                    readonly flip: "horizontal" | "vertical" | "off" | "both";
                    readonly fontSizesConfig: Record<string, any>;
                    readonly preset?: string | undefined;
                    readonly tag?: string | undefined;
                    readonly color?: string | undefined;
                    readonly component?: any;
                    readonly rotation?: string | number | undefined;
                    readonly spin?: string | boolean | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                    name: {
                        type: StringConstructor;
                        default: string;
                    };
                    tag: {
                        type: StringConstructor;
                    };
                    component: {
                        type: PropType<any>;
                    };
                    color: {
                        type: StringConstructor;
                    };
                    rotation: {
                        type: (StringConstructor | NumberConstructor)[];
                    };
                    spin: {
                        type: (BooleanConstructor | StringConstructor)[];
                    };
                    flip: {
                        type: PropType<"horizontal" | "vertical" | "off" | "both">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    preset: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    size: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: string;
                        validator: (size: string | number) => boolean;
                    };
                    sizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    fontSizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                }>>, "size" | "preset" | "name" | "sizesConfig" | "flip" | "fontSizesConfig">> | undefined;
                attachElement?: string | undefined;
                allowBodyScroll?: boolean | undefined;
                disableAttachment?: boolean | undefined;
                okText?: import("../../composables").TranslationProp | undefined;
                cancelText?: import("../../composables").TranslationProp | undefined;
                hideDefaultActions?: boolean | undefined;
                fullscreen?: boolean | undefined;
                mobileFullscreen?: boolean | undefined;
                noDismiss?: boolean | undefined;
                noOutsideDismiss?: boolean | undefined;
                noEscDismiss?: boolean | undefined;
                maxWidth?: string | undefined;
                maxHeight?: string | undefined;
                fixedLayout?: boolean | undefined;
                withoutTransitions?: boolean | undefined;
                overlay?: boolean | undefined;
                overlayOpacity?: string | number | undefined;
                showNestedOverlay?: boolean | undefined;
                readonly beforeClose?: ((hide: () => void) => any) | undefined;
                readonly beforeOk?: ((hide: () => void) => any) | undefined;
                readonly beforeCancel?: ((hide: () => void) => any) | undefined;
                ariaCloseLabel?: import("../../composables").TranslationProp | undefined;
            } & import("vue").HTMLAttributes;
            VaNavbar: {
                fixed?: boolean | undefined;
                preset?: string | undefined;
                hideOnScroll?: boolean | undefined;
                bottom?: boolean | undefined;
                color?: string | undefined;
                readonly textColor?: string | undefined;
                bordered?: boolean | undefined;
                shape?: boolean | undefined;
                shadowed?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaNavbarItem: {} & import("vue").HTMLAttributes;
            VaOptionList: {
                error?: boolean | undefined;
                options?: import("../../composables").SelectableOption[] | undefined;
                preset?: string | undefined;
                name?: string | undefined;
                success?: boolean | undefined;
                type?: "switch" | "checkbox" | "radio" | undefined;
                disabled?: boolean | undefined;
                readonly?: boolean | undefined;
                errorMessages?: string | string[] | undefined;
                readonly modelValue?: import("../../composables").SelectableOption | import("../../composables").SelectableOption[];
                stateful?: boolean | undefined;
                color?: string | undefined;
                readonly defaultValue?: import("../../composables").SelectableOption | import("../../composables").SelectableOption[];
                rules?: import("../../composables").ValidationRule<any>[] | undefined;
                dirty?: boolean | undefined;
                errorCount?: string | number | undefined;
                messages?: string | string[] | undefined;
                immediateValidation?: boolean | undefined;
                textBy?: import("../../composables").StringOrFunction | undefined;
                valueBy?: import("../../composables").StringOrFunction | undefined;
                trackBy?: import("../../composables").StringOrFunction | undefined;
                disabledBy?: import("../../composables").StringOrFunction | undefined;
                groupBy?: import("../../composables").StringOrFunction | undefined;
                leftLabel?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaPagination: {
                input?: boolean | undefined;
                size?: "small" | "medium" | "large" | undefined;
                preset?: string | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                disabled?: boolean | undefined;
                modelValue?: number | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                borderColor?: string | undefined;
                rounded?: boolean | undefined;
                visiblePages?: string | number | undefined;
                pages?: string | number | undefined;
                boundaryLinks?: boolean | undefined;
                boundaryNumbers?: boolean | undefined;
                directionLinks?: boolean | undefined;
                hideOnSinglePage?: boolean | undefined;
                total?: string | number | undefined;
                pageSize?: string | number | undefined;
                boundaryIconLeft?: string | undefined;
                boundaryIconRight?: string | undefined;
                directionIconLeft?: string | undefined;
                directionIconRight?: string | undefined;
                gapped?: boolean | undefined;
                activePageColor?: string | undefined;
                activeButtonProps?: NonNullable<Partial<{
                    size: "small" | "medium" | "large";
                    replace: boolean;
                    preset: string;
                    append: boolean;
                    type: string;
                    disabled: boolean;
                    tag: string;
                    href: string;
                    color: string;
                    loading: boolean;
                    to: string | Record<string, any>;
                    exact: boolean;
                    activeClass: string;
                    exactActiveClass: string;
                    target: string;
                    sizesConfig: Record<string, any>;
                    textColor: string;
                    round: boolean;
                    fontSizesConfig: Record<string, any>;
                    icon: string;
                    block: boolean;
                    textOpacity: string | number;
                    backgroundOpacity: string | number;
                    borderColor: string;
                    gradient: boolean;
                    plain: boolean;
                    iconRight: string;
                    iconColor: string;
                    pressedBehavior: "mask" | "opacity";
                    pressedOpacity: number;
                    pressedMaskColor: string;
                    hoverBehavior: "mask" | "opacity";
                    hoverOpacity: string | number;
                    hoverMaskColor: string;
                }> & Omit<{
                    readonly size: "small" | "medium" | "large";
                    readonly type: string;
                    readonly disabled: boolean;
                    readonly tag: string;
                    readonly color: string;
                    readonly loading: boolean;
                    readonly sizesConfig: Record<string, any>;
                    readonly textColor: string;
                    readonly round: boolean;
                    readonly fontSizesConfig: Record<string, any>;
                    readonly icon: string;
                    readonly block: boolean;
                    readonly textOpacity: string | number;
                    readonly backgroundOpacity: string | number;
                    readonly borderColor: string;
                    readonly gradient: boolean;
                    readonly plain: boolean;
                    readonly iconRight: string;
                    readonly iconColor: string;
                    readonly pressedBehavior: "mask" | "opacity";
                    readonly pressedOpacity: number;
                    readonly pressedMaskColor: string;
                    readonly hoverBehavior: "mask" | "opacity";
                    readonly hoverOpacity: string | number;
                    readonly hoverMaskColor: string;
                    readonly replace?: boolean | undefined;
                    readonly preset?: string | undefined;
                    readonly append?: boolean | undefined;
                    readonly href?: string | undefined;
                    readonly to?: string | Record<string, any> | undefined;
                    readonly exact?: boolean | undefined;
                    readonly activeClass?: string | undefined;
                    readonly exactActiveClass?: string | undefined;
                    readonly target?: string | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                    tag: {
                        type: StringConstructor;
                        default: string;
                    };
                    type: {
                        type: StringConstructor;
                        default: string;
                    };
                    block: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                    textColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    textOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    backgroundOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    borderColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    gradient: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    plain: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    round: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    size: {
                        type: PropType<"small" | "medium" | "large">;
                        default: string;
                        validator: (v: string) => boolean;
                    };
                    icon: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconRight: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    to: {
                        type: PropType<string | Record<string, any>>;
                        default: undefined;
                    };
                    replace: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    append: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    exact: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    activeClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    exactActiveClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    href: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    target: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    pressedBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    pressedOpacity: {
                        type: NumberConstructor;
                        default: number;
                    };
                    pressedMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    hoverBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    hoverOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    hoverMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    sizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    fontSizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    preset: {
                        type: StringConstructor;
                        default: undefined;
                    };
                }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
                buttonProps?: NonNullable<Partial<{
                    size: "small" | "medium" | "large";
                    replace: boolean;
                    preset: string;
                    append: boolean;
                    type: string;
                    disabled: boolean;
                    tag: string;
                    href: string;
                    color: string;
                    loading: boolean;
                    to: string | Record<string, any>;
                    exact: boolean;
                    activeClass: string;
                    exactActiveClass: string;
                    target: string;
                    sizesConfig: Record<string, any>;
                    textColor: string;
                    round: boolean;
                    fontSizesConfig: Record<string, any>;
                    icon: string;
                    block: boolean;
                    textOpacity: string | number;
                    backgroundOpacity: string | number;
                    borderColor: string;
                    gradient: boolean;
                    plain: boolean;
                    iconRight: string;
                    iconColor: string;
                    pressedBehavior: "mask" | "opacity";
                    pressedOpacity: number;
                    pressedMaskColor: string;
                    hoverBehavior: "mask" | "opacity";
                    hoverOpacity: string | number;
                    hoverMaskColor: string;
                }> & Omit<{
                    readonly size: "small" | "medium" | "large";
                    readonly type: string;
                    readonly disabled: boolean;
                    readonly tag: string;
                    readonly color: string;
                    readonly loading: boolean;
                    readonly sizesConfig: Record<string, any>;
                    readonly textColor: string;
                    readonly round: boolean;
                    readonly fontSizesConfig: Record<string, any>;
                    readonly icon: string;
                    readonly block: boolean;
                    readonly textOpacity: string | number;
                    readonly backgroundOpacity: string | number;
                    readonly borderColor: string;
                    readonly gradient: boolean;
                    readonly plain: boolean;
                    readonly iconRight: string;
                    readonly iconColor: string;
                    readonly pressedBehavior: "mask" | "opacity";
                    readonly pressedOpacity: number;
                    readonly pressedMaskColor: string;
                    readonly hoverBehavior: "mask" | "opacity";
                    readonly hoverOpacity: string | number;
                    readonly hoverMaskColor: string;
                    readonly replace?: boolean | undefined;
                    readonly preset?: string | undefined;
                    readonly append?: boolean | undefined;
                    readonly href?: string | undefined;
                    readonly to?: string | Record<string, any> | undefined;
                    readonly exact?: boolean | undefined;
                    readonly activeClass?: string | undefined;
                    readonly exactActiveClass?: string | undefined;
                    readonly target?: string | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                    tag: {
                        type: StringConstructor;
                        default: string;
                    };
                    type: {
                        type: StringConstructor;
                        default: string;
                    };
                    block: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                    textColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    textOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    backgroundOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    borderColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    gradient: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    plain: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    round: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    size: {
                        type: PropType<"small" | "medium" | "large">;
                        default: string;
                        validator: (v: string) => boolean;
                    };
                    icon: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconRight: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    to: {
                        type: PropType<string | Record<string, any>>;
                        default: undefined;
                    };
                    replace: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    append: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    exact: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    activeClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    exactActiveClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    href: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    target: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    pressedBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    pressedOpacity: {
                        type: NumberConstructor;
                        default: number;
                    };
                    pressedMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    hoverBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    hoverOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    hoverMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    sizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    fontSizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    preset: {
                        type: StringConstructor;
                        default: undefined;
                    };
                }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
                buttonsPreset?: string | undefined;
                ariaGoToTheFirstPageLabel?: import("../../composables").TranslationProp | undefined;
                ariaGoToPreviousPageLabel?: import("../../composables").TranslationProp | undefined;
                ariaGoToSpecificPageLabel?: import("../../composables").TranslationProp | undefined;
                ariaGoToSpecificPageInputLabel?: import("../../composables").TranslationProp | undefined;
                ariaGoToNextPageLabel?: import("../../composables").TranslationProp | undefined;
                ariaGoToLastPageLabel?: import("../../composables").TranslationProp | undefined;
            } & import("vue").HTMLAttributes;
            VaParallax: {
                preset?: string | undefined;
                readonly target?: string | HTMLElement | undefined;
                height?: string | number | undefined;
                alt?: string | undefined;
                src?: string | undefined;
                speed?: string | number | undefined;
                reversed?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaPopover: {
                title?: string | undefined;
                anchor?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                preset?: string | undefined;
                message?: string | undefined;
                ariaLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
                role?: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined> | undefined;
                disabled?: NonNullable<boolean | undefined> | undefined;
                readonly?: NonNullable<boolean | undefined> | undefined;
                trigger?: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined> | undefined;
                modelValue?: NonNullable<boolean | undefined> | undefined;
                stateful?: NonNullable<boolean | undefined> | undefined;
                color?: string | undefined;
                target?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                placement?: NonNullable<import("../../composables").PlacementWithAlias | undefined> | undefined;
                hoverOverTimeout?: NonNullable<string | number | undefined> | undefined;
                hoverOutTimeout?: NonNullable<string | number | undefined> | undefined;
                autoPlacement?: NonNullable<boolean | undefined> | undefined;
                stickToEdges?: NonNullable<boolean | undefined> | undefined;
                keepAnchorWidth?: NonNullable<boolean | undefined> | undefined;
                verticalScrollOnOverflow?: NonNullable<boolean | undefined> | undefined;
                anchorSelector?: string | undefined;
                innerAnchorSelector?: string | undefined;
                closeOnFocusOutside?: NonNullable<boolean | undefined> | undefined;
                closeOnAnchorClick?: NonNullable<boolean | undefined> | undefined;
                closeOnContentClick?: NonNullable<boolean | undefined> | undefined;
                isContentHoverable?: NonNullable<boolean | undefined> | undefined;
                offset?: number | [number, number] | undefined;
                cursor?: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined> | undefined;
                teleport?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                keyboardNavigation?: NonNullable<boolean | undefined> | undefined;
                contentClass?: string | undefined;
                readonly textColor?: string | undefined;
                icon?: string | undefined;
                autoHide?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaProgressBar: {
                size?: string | number | undefined;
                reverse?: boolean | undefined;
                preset?: string | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                modelValue?: string | number | undefined;
                color?: string | undefined;
                indeterminate?: boolean | undefined;
                max?: string | number | undefined;
                rounded?: boolean | undefined;
                buffer?: string | number | undefined;
                contentInside?: boolean | undefined;
                showPercent?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaProgressCircle: {
                size?: string | number | undefined;
                preset?: string | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                modelValue?: string | number | undefined;
                color?: string | undefined;
                sizesConfig?: Record<string, any> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                indeterminate?: boolean | undefined;
                thickness?: string | number | undefined;
            } & import("vue").HTMLAttributes;
            VaRadio: {
                label?: string | undefined;
                option?: any;
                error?: boolean | undefined;
                options?: any[] | undefined;
                preset?: string | undefined;
                name?: string | undefined;
                success?: boolean | undefined;
                disabled?: boolean | undefined;
                readonly?: boolean | undefined;
                errorMessages?: string | string[] | undefined;
                modelValue?: any;
                stateful?: boolean | undefined;
                color?: string | undefined;
                loading?: boolean | undefined;
                rules?: import("../../composables").ValidationRule<any>[] | undefined;
                dirty?: boolean | undefined;
                errorCount?: string | number | undefined;
                messages?: string | string[] | undefined;
                immediateValidation?: boolean | undefined;
                textBy?: import("../../composables").StringOrFunction | undefined;
                valueBy?: import("../../composables").StringOrFunction | undefined;
                trackBy?: import("../../composables").StringOrFunction | undefined;
                disabledBy?: import("../../composables").StringOrFunction | undefined;
                groupBy?: import("../../composables").StringOrFunction | undefined;
                vertical?: boolean | undefined;
                indeterminate?: boolean | undefined;
                indeterminateValue?: any;
                arrayValue?: string | number | boolean | Record<string, any> | undefined;
                leftLabel?: boolean | undefined;
                trueValue?: any;
                falseValue?: any;
            } & import("vue").HTMLAttributes;
            VaRating: {
                size?: NonNullable<string | number | undefined> | undefined;
                preset?: string | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                disabled?: NonNullable<boolean | undefined> | undefined;
                readonly?: NonNullable<boolean | undefined> | undefined;
                modelValue?: number | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                sizesConfig?: Record<string, any> | undefined;
                hover?: NonNullable<boolean | undefined> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                tabindex?: NonNullable<string | number | undefined> | undefined;
                clearable?: boolean | undefined;
                icon?: string | undefined;
                max?: string | number | undefined;
                unselectedColor?: string | undefined;
                halfIcon?: string | undefined;
                emptyIcon?: string | undefined;
                halves?: boolean | undefined;
                numbers?: boolean | undefined;
                texts?: string[] | undefined;
                ariaItemLabel?: import("../../composables").TranslationProp | undefined;
            } & import("vue").HTMLAttributes;
            VaSelect: {
                label?: string | undefined;
                search?: string | undefined;
                error?: boolean | undefined;
                anchor?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                options?: import("../../composables").SelectableOption[] | undefined;
                preset?: string | undefined;
                name?: string | undefined;
                success?: boolean | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                role?: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined> | undefined;
                disabled?: NonNullable<boolean | undefined> | undefined;
                readonly?: NonNullable<boolean | undefined> | undefined;
                errorMessages?: string | string[] | undefined;
                trigger?: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined> | undefined;
                modelValue?: import("../../composables").SelectableOption | import("../../composables").SelectableOption[];
                color?: string | undefined;
                loading?: boolean | undefined;
                delay?: number | undefined;
                target?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                rules?: import("../../composables").ValidationRule<import("../../composables").SelectableOption>[] | undefined;
                dirty?: boolean | undefined;
                errorCount?: string | number | undefined;
                messages?: string | string[] | undefined;
                immediateValidation?: boolean | undefined;
                textBy?: import("../../composables").StringOrFunction | undefined;
                valueBy?: import("../../composables").StringOrFunction | undefined;
                trackBy?: import("../../composables").StringOrFunction | undefined;
                disabledBy?: import("../../composables").StringOrFunction | undefined;
                groupBy?: import("../../composables").StringOrFunction | undefined;
                width?: string | undefined;
                placement?: NonNullable<import("../../composables").PlacementWithAlias | undefined> | undefined;
                hoverOverTimeout?: NonNullable<string | number | undefined> | undefined;
                hoverOutTimeout?: NonNullable<string | number | undefined> | undefined;
                autoPlacement?: NonNullable<boolean | undefined> | undefined;
                stickToEdges?: NonNullable<boolean | undefined> | undefined;
                keepAnchorWidth?: NonNullable<boolean | undefined> | undefined;
                verticalScrollOnOverflow?: NonNullable<boolean | undefined> | undefined;
                anchorSelector?: string | undefined;
                closeOnClickOutside?: NonNullable<boolean | undefined> | undefined;
                closeOnFocusOutside?: NonNullable<boolean | undefined> | undefined;
                closeOnAnchorClick?: NonNullable<boolean | undefined> | undefined;
                closeOnContentClick?: NonNullable<boolean | undefined> | undefined;
                isContentHoverable?: NonNullable<boolean | undefined> | undefined;
                offset?: NonNullable<import("../va-dropdown/types").DropdownOffsetProp | undefined> | undefined;
                cursor?: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined> | undefined;
                teleport?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                contentClass?: string | undefined;
                background?: string | undefined;
                closeOnChange?: boolean | undefined;
                isOpen?: boolean | undefined;
                tabindex?: string | number | undefined;
                requiredMark?: NonNullable<boolean | undefined> | undefined;
                inputAriaLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
                inputAriaLabelledby?: string | undefined;
                inputAriaDescribedby?: string | undefined;
                counter?: NonNullable<boolean | undefined> | undefined;
                maxLength?: NonNullable<string | number | undefined> | undefined;
                placeholder?: string | undefined;
                innerLabel?: NonNullable<boolean | undefined> | undefined;
                clearable?: boolean | undefined;
                clearableIcon?: string | undefined;
                clearValue?: string | undefined;
                autocomplete?: boolean | undefined;
                multiple?: boolean | undefined;
                maxHeight?: string | undefined;
                separator?: string | undefined;
                virtualScroller?: boolean | undefined;
                allowCreate?: boolean | "unique" | undefined;
                searchable?: boolean | undefined;
                noOptionsText?: import("../../composables").TranslationProp | undefined;
                hideSelected?: boolean | undefined;
                selectedTopShown?: boolean | undefined;
                highlightMatchedText?: boolean | undefined;
                minSearchChars?: string | number | undefined;
                autoSelectFirstOption?: boolean | undefined;
                searchPlaceholderText?: import("../../composables").TranslationProp | undefined;
                ariaSearchLabel?: import("../../composables").TranslationProp | undefined;
                ariaClearLabel?: import("../../composables").TranslationProp | undefined;
                dropdownIcon?: string | import("..").SelectDropdownIcon | undefined;
                maxVisibleOptions?: number | undefined;
                maxSelections?: string | number | undefined;
            } & import("vue").HTMLAttributes;
            VaSeparator: {} & import("vue").HTMLAttributes;
            VaSkeleton: {
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                tag?: string | undefined;
                color?: string | undefined;
                delay?: string | number | undefined;
                width?: string | undefined;
                height?: string | undefined;
                lines?: string | number | undefined;
                animation?: "none" | "pulse" | "wave" | undefined;
                lineGap?: string | undefined;
                lastLineWidth?: string | undefined;
                variant?: "circle" | "text" | "rounded" | "squared" | undefined;
            } & import("vue").HTMLAttributes;
            VaSkeletonGroup: {
                color?: string | undefined;
                delay?: string | number | undefined;
                lines?: string | number | undefined;
                animation?: "none" | "pulse" | "wave" | undefined;
                lineGap?: string | undefined;
                lastLineWidth?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaSidebar: {
                preset?: string | undefined;
                modelValue?: boolean | undefined;
                color?: string | undefined;
                width?: string | undefined;
                closeOnClickOutside?: boolean | undefined;
                readonly textColor?: string | undefined;
                borderColor?: string | undefined;
                gradient?: boolean | undefined;
                hoverOpacity?: string | number | undefined;
                activeColor?: string | undefined;
                hoverable?: boolean | undefined;
                animated?: string | boolean | undefined;
                hoverColor?: string | undefined;
                minimized?: boolean | undefined;
                minimizedWidth?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaSidebarItem: {
                replace?: boolean | undefined;
                preset?: string | undefined;
                append?: boolean | undefined;
                disabled?: boolean | undefined;
                tag?: string | undefined;
                href?: string | undefined;
                to?: string | Record<string, any> | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: string | undefined;
                textColor?: string | undefined;
                borderColor?: string | undefined;
                hoverOpacity?: string | number | undefined;
                active?: boolean | undefined;
                activeColor?: string | undefined;
                hoverColor?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaSidebarItemContent: {} & import("vue").HTMLAttributes;
            VaSidebarItemTitle: {} & import("vue").HTMLAttributes;
            VaSlider: {
                label?: string | undefined;
                preset?: string | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                disabled?: boolean | undefined;
                readonly?: boolean | undefined;
                modelValue?: number | number[] | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                step?: string | number | undefined;
                vertical?: boolean | undefined;
                max?: string | number | undefined;
                min?: string | number | undefined;
                range?: boolean | undefined;
                readonly trackLabel?: string | ((val: number, order?: number | undefined) => string) | undefined;
                trackColor?: string | undefined;
                labelColor?: string | undefined;
                trackLabelVisible?: boolean | undefined;
                invertLabel?: boolean | undefined;
                pins?: boolean | undefined;
                iconPrepend?: string | undefined;
                iconAppend?: string | undefined;
                showTrack?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaSpacer: {} & import("vue").HTMLAttributes;
            VaSplit: {
                preset?: string | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                disabled?: boolean | undefined;
                modelValue?: number | undefined;
                stateful?: boolean | undefined;
                vertical?: boolean | undefined;
                maximization?: boolean | undefined;
                maximizeStart?: boolean | undefined;
                limits?: [import("../va-split/types").SplitLimit, import("../va-split/types").SplitLimit] | undefined;
                snapping?: import("../va-split/types").SnappingMark[] | undefined;
                snappingRange?: string | number | undefined;
            } & import("vue").HTMLAttributes;
            VaSwitch: {
                label?: string | undefined;
                error?: boolean | undefined;
                size?: "small" | "medium" | "large" | undefined;
                preset?: string | undefined;
                name?: string | undefined;
                success?: boolean | undefined;
                id?: string | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                disabled?: boolean | undefined;
                readonly?: boolean | undefined;
                errorMessages?: string | string[] | undefined;
                modelValue?: string | number | boolean | unknown[] | Record<string, unknown> | null | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                loading?: boolean | undefined;
                rules?: import("../../composables").ValidationRule<any>[] | undefined;
                dirty?: boolean | undefined;
                errorCount?: string | number | undefined;
                messages?: string | string[] | undefined;
                immediateValidation?: boolean | undefined;
                indeterminate?: boolean | undefined;
                indeterminateValue?: any;
                arrayValue?: string | number | boolean | Record<string, any> | undefined;
                leftLabel?: boolean | undefined;
                trueValue?: any;
                falseValue?: any;
                trueLabel?: string | undefined;
                falseLabel?: string | undefined;
                trueInnerLabel?: string | undefined;
                falseInnerLabel?: string | undefined;
                offColor?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaTabs: {
                preset?: string | undefined;
                left?: boolean | undefined;
                center?: boolean | undefined;
                right?: boolean | undefined;
                disabled?: boolean | undefined;
                modelValue?: string | number | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                vertical?: boolean | undefined;
                grow?: boolean | undefined;
                hidePagination?: boolean | undefined;
                hideSlider?: boolean | undefined;
                prevIcon?: string | undefined;
                nextIcon?: string | undefined;
                ariaMoveRightLabel?: import("../../composables").TranslationProp | undefined;
                ariaMoveLeftLabel?: import("../../composables").TranslationProp | undefined;
            } & import("vue").HTMLAttributes;
            VaTab: {
                label?: string | undefined;
                replace?: boolean | undefined;
                preset?: string | undefined;
                readonly name?: string | number | undefined;
                append?: boolean | undefined;
                disabled?: boolean | undefined;
                tag?: string | undefined;
                href?: string | undefined;
                color?: string | undefined;
                to?: string | Record<string, any> | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: string | undefined;
                icon?: string | undefined;
                selected?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaStepper: {
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                modelValue?: number | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                vertical?: boolean | undefined;
                linear?: boolean | undefined;
                steps?: import("../va-stepper/types").Step[] | undefined;
                navigationDisabled?: boolean | undefined;
                controlsHidden?: boolean | undefined;
                nextDisabled?: boolean | undefined;
                nextDisabledOnError?: boolean | undefined;
                finishButtonHidden?: boolean | undefined;
                readonly finishStep?: import("../va-stepper/types").Step | undefined;
            } & import("vue").HTMLAttributes;
            VaTimeInput: {
                label?: string | undefined;
                error?: boolean | undefined;
                anchor?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                preset?: string | undefined;
                name?: string | undefined;
                view?: NonNullable<"hours" | "minutes" | "seconds" | undefined> | undefined;
                success?: boolean | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                role?: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined> | undefined;
                disabled?: NonNullable<boolean | undefined> | undefined;
                readonly?: NonNullable<boolean | undefined> | undefined;
                errorMessages?: string | string[] | undefined;
                trigger?: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined> | undefined;
                modelValue?: Date | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                loading?: NonNullable<boolean | undefined> | undefined;
                target?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                rules?: import("../../composables").ValidationRule<Date>[] | undefined;
                dirty?: boolean | undefined;
                errorCount?: string | number | undefined;
                messages?: string | string[] | undefined;
                immediateValidation?: boolean | undefined;
                placement?: NonNullable<import("../../composables").PlacementWithAlias | undefined> | undefined;
                hoverOverTimeout?: NonNullable<string | number | undefined> | undefined;
                hoverOutTimeout?: NonNullable<string | number | undefined> | undefined;
                autoPlacement?: NonNullable<boolean | undefined> | undefined;
                stickToEdges?: NonNullable<boolean | undefined> | undefined;
                keepAnchorWidth?: NonNullable<boolean | undefined> | undefined;
                verticalScrollOnOverflow?: NonNullable<boolean | undefined> | undefined;
                anchorSelector?: string | undefined;
                closeOnClickOutside?: NonNullable<boolean | undefined> | undefined;
                closeOnFocusOutside?: NonNullable<boolean | undefined> | undefined;
                closeOnAnchorClick?: NonNullable<boolean | undefined> | undefined;
                closeOnContentClick?: boolean | undefined;
                isContentHoverable?: NonNullable<boolean | undefined> | undefined;
                offset?: NonNullable<import("../va-dropdown/types").DropdownOffsetProp | undefined> | undefined;
                cursor?: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined> | undefined;
                teleport?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                contentClass?: string | undefined;
                background?: string | undefined;
                closeOnChange?: boolean | undefined;
                isOpen?: boolean | undefined;
                requiredMark?: NonNullable<boolean | undefined> | undefined;
                inputAriaLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
                inputAriaLabelledby?: string | undefined;
                inputAriaDescribedby?: string | undefined;
                counter?: NonNullable<boolean | undefined> | undefined;
                placeholder?: string | undefined;
                innerLabel?: NonNullable<boolean | undefined> | undefined;
                ariaResetLabel?: import("../../composables").TranslationProp | undefined;
                clearable?: boolean | undefined;
                clearableIcon?: string | undefined;
                clearValue?: Date | undefined;
                icon?: string | undefined;
                leftIcon?: boolean | undefined;
                manualInput?: boolean | undefined;
                readonly format?: ((date?: Date | undefined) => string) | undefined;
                readonly parse?: ((input: string) => Date) | undefined;
                ariaToggleDropdownLabel?: import("../../composables").TranslationProp | undefined;
                ampm?: NonNullable<boolean | undefined> | undefined;
                hidePeriodSwitch?: NonNullable<boolean | undefined> | undefined;
                periodUpdatesModelValue?: NonNullable<boolean | undefined> | undefined;
                hoursFilter?: ((h: number) => boolean) | undefined;
                minutesFilter?: ((h: number) => boolean) | undefined;
                secondsFilter?: ((h: number) => boolean) | undefined;
                framed?: NonNullable<boolean | undefined> | undefined;
                cellHeight?: NonNullable<string | number | undefined> | undefined;
                visibleCellsCount?: NonNullable<string | number | undefined> | undefined;
            } & import("vue").HTMLAttributes;
            VaTimeline: {} & import("vue").HTMLAttributes;
            VaTimelineItem: {
                preset?: string | undefined;
                color?: string | undefined;
                vertical?: NonNullable<boolean | undefined> | undefined;
                active?: NonNullable<boolean | undefined> | undefined;
                activePrevious?: NonNullable<boolean | undefined> | undefined;
                activeNext?: NonNullable<boolean | undefined> | undefined;
                isFirst?: boolean | undefined;
                isLast?: boolean | undefined;
                inverted?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaTimePicker: {
                preset?: string | undefined;
                view?: "hours" | "minutes" | "seconds" | undefined;
                disabled?: boolean | undefined;
                readonly?: boolean | undefined;
                readonly modelValue?: Date | undefined;
                stateful?: boolean | undefined;
                ampm?: boolean | undefined;
                hidePeriodSwitch?: boolean | undefined;
                periodUpdatesModelValue?: boolean | undefined;
                readonly hoursFilter?: ((h: number) => boolean) | undefined;
                readonly minutesFilter?: ((h: number) => boolean) | undefined;
                readonly secondsFilter?: ((h: number) => boolean) | undefined;
                framed?: boolean | undefined;
                cellHeight?: string | number | undefined;
                visibleCellsCount?: string | number | undefined;
            } & import("vue").HTMLAttributes;
            VaToast: {
                title?: string | undefined;
                preset?: string | undefined;
                readonly render?: Function | undefined;
                message?: string | Function | undefined;
                role?: import("../../utils/types/prop-type").StringWithAutocomplete<"status" | "alert" | "alertdialog"> | undefined;
                color?: string | undefined;
                duration?: string | number | undefined;
                position?: import("..").ToastPosition | undefined;
                icon?: string | undefined;
                inline?: boolean | undefined;
                ariaCloseLabel?: import("../../composables").TranslationProp | undefined;
                closeable?: boolean | undefined;
                multiLine?: boolean | undefined;
                offsetY?: string | number | undefined;
                offsetX?: string | number | undefined;
                dangerouslyUseHtmlString?: boolean | undefined;
                customClass?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaTreeView: {
                filter?: string | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                textBy?: import("../va-tree-view/types").TreeViewPropKey | undefined;
                valueBy?: import("../va-tree-view/types").TreeViewPropKey | undefined;
                trackBy?: import("../va-tree-view/types").TreeViewPropKey | undefined;
                disabledBy?: import("../va-tree-view/types").TreeViewPropKey | undefined;
                checked?: (string | number | import("..").TreeNode)[] | undefined;
                expanded?: (string | number | import("..").TreeNode)[] | undefined;
                selectable?: boolean | undefined;
                filterMethod?: import("../va-tree-view/types").TreeViewFilterMethod | undefined;
                nodes?: import("..").TreeNode[] | undefined;
                selectionType?: string | undefined;
                iconBy?: import("../va-tree-view/types").TreeViewPropKey | undefined;
                expandedBy?: import("../va-tree-view/types").TreeViewPropKey | undefined;
                checkedBy?: import("../va-tree-view/types").TreeViewPropKey | undefined;
                childrenBy?: import("../va-tree-view/types").TreeViewPropKey | undefined;
                expandAll?: boolean | undefined;
                expandNodeBy?: "leaf" | "node" | undefined;
            } & import("vue").HTMLAttributes;
            VaScrollContainer: {
                size?: "small" | "medium" | "large" | undefined;
                color?: string | undefined;
                sizesConfig?: Record<string, any> | undefined;
                horizontal?: boolean | undefined;
                vertical?: boolean | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                gradient?: boolean | undefined;
                rtl?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaViewer: {} & import("vue").HTMLAttributes;
            VaValue: {
                defaultValue?: any;
            } & import("vue").HTMLAttributes;
            VaVirtualScroller: {} & import("vue").HTMLAttributes;
            VaTextarea: {
                label?: string | undefined;
                error?: boolean | undefined;
                resize?: boolean | undefined;
                preset?: string | undefined;
                name?: string | undefined;
                success?: boolean | undefined;
                disabled?: NonNullable<boolean | undefined> | undefined;
                readonly?: NonNullable<boolean | undefined> | undefined;
                errorMessages?: string | string[] | undefined;
                modelValue?: string | number | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                loading?: NonNullable<boolean | undefined> | undefined;
                rules?: import("../../composables").ValidationRule<any>[] | undefined;
                dirty?: boolean | undefined;
                errorCount?: string | number | undefined;
                messages?: string | string[] | undefined;
                immediateValidation?: boolean | undefined;
                background?: string | undefined;
                requiredMark?: NonNullable<boolean | undefined> | undefined;
                inputAriaLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
                inputAriaLabelledby?: string | undefined;
                inputAriaDescribedby?: string | undefined;
                counter?: NonNullable<boolean | undefined> | undefined;
                maxLength?: NonNullable<string | number | undefined> | undefined;
                readonly placeholder?: string | undefined;
                innerLabel?: NonNullable<boolean | undefined> | undefined;
                clearValue?: string | undefined;
                autosize?: boolean | undefined;
                minRows?: string | number | undefined;
                readonly maxRows?: string | number | undefined;
            } & import("vue").HTMLAttributes;
            VaMenu: {
                anchor?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                options?: import("../va-menu-list/types").VaMenuOption[] | undefined;
                preset?: string | undefined;
                ariaLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
                role?: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined> | undefined;
                disabled?: NonNullable<boolean | undefined> | undefined;
                readonly?: NonNullable<boolean | undefined> | undefined;
                trigger?: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined> | undefined;
                modelValue?: NonNullable<boolean | undefined> | undefined;
                stateful?: NonNullable<boolean | undefined> | undefined;
                target?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                textBy?: NonNullable<import("../../composables").StringOrFunction | undefined> | undefined;
                valueBy?: NonNullable<import("../../composables").StringOrFunction | undefined> | undefined;
                trackBy?: NonNullable<import("../../composables").StringOrFunction | undefined> | undefined;
                disabledBy?: NonNullable<import("../../composables").StringOrFunction | undefined> | undefined;
                groupBy?: NonNullable<import("../../composables").StringOrFunction | undefined> | undefined;
                placement?: NonNullable<import("../../composables").PlacementWithAlias | undefined> | undefined;
                hoverOverTimeout?: NonNullable<string | number | undefined> | undefined;
                hoverOutTimeout?: NonNullable<string | number | undefined> | undefined;
                autoPlacement?: NonNullable<boolean | undefined> | undefined;
                stickToEdges?: boolean | undefined;
                keepAnchorWidth?: NonNullable<boolean | undefined> | undefined;
                verticalScrollOnOverflow?: NonNullable<boolean | undefined> | undefined;
                anchorSelector?: string | undefined;
                innerAnchorSelector?: string | undefined;
                closeOnClickOutside?: NonNullable<boolean | undefined> | undefined;
                closeOnFocusOutside?: NonNullable<boolean | undefined> | undefined;
                closeOnAnchorClick?: NonNullable<boolean | undefined> | undefined;
                closeOnContentClick?: NonNullable<boolean | undefined> | undefined;
                isContentHoverable?: NonNullable<boolean | undefined> | undefined;
                offset?: NonNullable<import("../va-dropdown/types").DropdownOffsetProp | undefined> | undefined;
                cursor?: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined> | undefined;
                teleport?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                keyboardNavigation?: NonNullable<boolean | undefined> | undefined;
                contentClass?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaMenuList: {
                options?: import("../va-menu-list/types").VaMenuOption[] | undefined;
                textBy?: import("../../composables").StringOrFunction | undefined;
                valueBy?: import("../../composables").StringOrFunction | undefined;
                trackBy?: import("../../composables").StringOrFunction | undefined;
                disabledBy?: import("../../composables").StringOrFunction | undefined;
                groupBy?: import("../../composables").StringOrFunction | undefined;
            } & import("vue").HTMLAttributes;
            VaMenuItem: {
                name?: string | undefined;
                disabled?: boolean | undefined;
                readonly icon?: string | undefined;
                readonly rightIcon?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaMenuGroup: {
                color?: string | undefined;
                readonly groupName?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaFormField: {} & import("vue").HTMLAttributes;
        } & {
            all: import("../../services/component-config").Props;
            presets: import("../../services/component-config").Presets;
        }>>;
        default: () => {};
    };
    colors: {
        type: PropType<{
            variables?: {
                [x: string]: string | undefined;
                primary?: string | undefined;
                secondary?: string | undefined;
                success?: string | undefined;
                info?: string | undefined;
                danger?: string | undefined;
                warning?: string | undefined;
                backgroundPrimary?: string | undefined;
                backgroundSecondary?: string | undefined;
                backgroundElement?: string | undefined;
                backgroundBorder?: string | undefined;
                textPrimary?: string | undefined;
                textInverted?: string | undefined;
                shadow?: string | undefined;
                focus?: string | undefined;
                transparent?: string | undefined;
                onFocus?: string | undefined;
                onPrimary?: string | undefined;
                onDanger?: string | undefined;
                onSuccess?: string | undefined;
                onSecondary?: string | undefined;
                onInfo?: string | undefined;
                onWarning?: string | undefined;
                onBackgroundPrimary?: string | undefined;
                onBackgroundSecondary?: string | undefined;
                onBackgroundElement?: string | undefined;
                onBackgroundBorder?: string | undefined;
                onTextPrimary?: string | undefined;
                onTextInverted?: string | undefined;
                onShadow?: string | undefined;
                onTransparent?: string | undefined;
            } | undefined;
            threshold?: number | undefined;
            presets?: {
                [x: string]: {
                    [x: string]: string | undefined;
                    primary?: string | undefined;
                    secondary?: string | undefined;
                    success?: string | undefined;
                    info?: string | undefined;
                    danger?: string | undefined;
                    warning?: string | undefined;
                    backgroundPrimary?: string | undefined;
                    backgroundSecondary?: string | undefined;
                    backgroundElement?: string | undefined;
                    backgroundBorder?: string | undefined;
                    textPrimary?: string | undefined;
                    textInverted?: string | undefined;
                    shadow?: string | undefined;
                    focus?: string | undefined;
                    transparent?: string | undefined;
                    onFocus?: string | undefined;
                    onPrimary?: string | undefined;
                    onDanger?: string | undefined;
                    onSuccess?: string | undefined;
                    onSecondary?: string | undefined;
                    onInfo?: string | undefined;
                    onWarning?: string | undefined;
                    onBackgroundPrimary?: string | undefined;
                    onBackgroundSecondary?: string | undefined;
                    onBackgroundElement?: string | undefined;
                    onBackgroundBorder?: string | undefined;
                    onTextPrimary?: string | undefined;
                    onTextInverted?: string | undefined;
                    onShadow?: string | undefined;
                    onTransparent?: string | undefined;
                } | undefined;
                light?: {
                    [x: string]: string | undefined;
                    primary?: string | undefined;
                    secondary?: string | undefined;
                    success?: string | undefined;
                    info?: string | undefined;
                    danger?: string | undefined;
                    warning?: string | undefined;
                    backgroundPrimary?: string | undefined;
                    backgroundSecondary?: string | undefined;
                    backgroundElement?: string | undefined;
                    backgroundBorder?: string | undefined;
                    textPrimary?: string | undefined;
                    textInverted?: string | undefined;
                    shadow?: string | undefined;
                    focus?: string | undefined;
                    transparent?: string | undefined;
                    onFocus?: string | undefined;
                    onPrimary?: string | undefined;
                    onDanger?: string | undefined;
                    onSuccess?: string | undefined;
                    onSecondary?: string | undefined;
                    onInfo?: string | undefined;
                    onWarning?: string | undefined;
                    onBackgroundPrimary?: string | undefined;
                    onBackgroundSecondary?: string | undefined;
                    onBackgroundElement?: string | undefined;
                    onBackgroundBorder?: string | undefined;
                    onTextPrimary?: string | undefined;
                    onTextInverted?: string | undefined;
                    onShadow?: string | undefined;
                    onTransparent?: string | undefined;
                } | undefined;
                dark?: {
                    [x: string]: string | undefined;
                    primary?: string | undefined;
                    secondary?: string | undefined;
                    success?: string | undefined;
                    info?: string | undefined;
                    danger?: string | undefined;
                    warning?: string | undefined;
                    backgroundPrimary?: string | undefined;
                    backgroundSecondary?: string | undefined;
                    backgroundElement?: string | undefined;
                    backgroundBorder?: string | undefined;
                    textPrimary?: string | undefined;
                    textInverted?: string | undefined;
                    shadow?: string | undefined;
                    focus?: string | undefined;
                    transparent?: string | undefined;
                    onFocus?: string | undefined;
                    onPrimary?: string | undefined;
                    onDanger?: string | undefined;
                    onSuccess?: string | undefined;
                    onSecondary?: string | undefined;
                    onInfo?: string | undefined;
                    onWarning?: string | undefined;
                    onBackgroundPrimary?: string | undefined;
                    onBackgroundSecondary?: string | undefined;
                    onBackgroundElement?: string | undefined;
                    onBackgroundBorder?: string | undefined;
                    onTextPrimary?: string | undefined;
                    onTextInverted?: string | undefined;
                    onShadow?: string | undefined;
                    onTransparent?: string | undefined;
                } | undefined;
            } | undefined;
            currentPresetName?: string | undefined;
        } | undefined>;
    };
    i18n: {
        type: PropType<{
            [x: string]: string | undefined;
            progress?: string | undefined;
            search?: string | undefined;
            cancel?: string | undefined;
            close?: string | undefined;
            reset?: string | undefined;
            switch?: string | undefined;
            carousel?: string | undefined;
            pagination?: string | undefined;
            breadcrumbs?: string | undefined;
            color?: string | undefined;
            step?: string | undefined;
            noOptions?: string | undefined;
            ok?: string | undefined;
            uploadFile?: string | undefined;
            undo?: string | undefined;
            dropzone?: string | undefined;
            fileDeleted?: string | undefined;
            closeAlert?: string | undefined;
            backToTop?: string | undefined;
            toggleDropdown?: string | undefined;
            goPreviousSlide?: string | undefined;
            goNextSlide?: string | undefined;
            goSlide?: string | undefined;
            slideOf?: string | undefined;
            openColorPicker?: string | undefined;
            colorSelection?: string | undefined;
            colorName?: string | undefined;
            decreaseCounter?: string | undefined;
            increaseCounter?: string | undefined;
            selectAllRows?: string | undefined;
            sortColumnBy?: string | undefined;
            selectRowByIndex?: string | undefined;
            resetDate?: string | undefined;
            nextPeriod?: string | undefined;
            switchView?: string | undefined;
            previousPeriod?: string | undefined;
            removeFile?: string | undefined;
            goToTheFirstPage?: string | undefined;
            goToPreviousPage?: string | undefined;
            goToSpecificPage?: string | undefined;
            goToSpecificPageInput?: string | undefined;
            goNextPage?: string | undefined;
            goLastPage?: string | undefined;
            currentRating?: string | undefined;
            voteRating?: string | undefined;
            optionsFilter?: string | undefined;
            splitPanels?: string | undefined;
            movePaginationLeft?: string | undefined;
            movePaginationRight?: string | undefined;
            resetTime?: string | undefined;
            closeToast?: string | undefined;
            selectedOption?: string | undefined;
            noSelectedOption?: string | undefined;
            counterValue?: string | undefined;
            selectedDate?: string | undefined;
            selectedTime?: string | undefined;
            progressState?: string | undefined;
            next?: string | undefined;
            back?: string | undefined;
            finish?: string | undefined;
            loading?: string | undefined;
            sliderValue?: string | undefined;
            inputField?: string | undefined;
            fileTypeIncorrect?: string | undefined;
        } | undefined>;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    components: {
        type: PropType<Partial<{
            VaAccordion: {
                preset?: string | undefined;
                modelValue?: boolean[] | undefined;
                stateful?: boolean | undefined;
                multiple?: boolean | undefined;
                inset?: boolean | undefined;
                popout?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaAffix: {
                preset?: string | undefined;
                offsetTop?: string | number | undefined;
                target?: Window | HTMLElement | (() => Window | HTMLElement) | undefined;
                offsetBottom?: string | number | undefined;
            } & import("vue").HTMLAttributes;
            VaAlert: {
                title?: string | undefined;
                preset?: string | undefined;
                center?: boolean | undefined;
                modelValue?: boolean | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                textColor?: string | undefined;
                icon?: string | undefined;
                borderColor?: string | undefined;
                description?: string | undefined;
                closeText?: string | undefined;
                closeable?: boolean | undefined;
                dense?: boolean | undefined;
                outline?: boolean | undefined;
                border?: "" | "left" | "right" | "bottom" | "top" | undefined;
                closeIcon?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaAppBar: {
                fixed?: boolean | undefined;
                preset?: string | undefined;
                hideOnScroll?: boolean | undefined;
                bottom?: boolean | undefined;
                color?: string | undefined;
                target?: string | HTMLElement | undefined;
                gradient?: boolean | undefined;
                shadowOnScroll?: boolean | undefined;
                shadowColor?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaAspectRatio: {
                preset?: string | undefined;
                maxWidth?: string | number | undefined;
                ratio?: number | import("../../utils/types/prop-type").StringWithAutocomplete<"auto"> | undefined;
                contentHeight?: string | number | undefined;
                contentWidth?: string | number | undefined;
            } & import("vue").HTMLAttributes;
            VaAvatar: {
                size?: string | number | undefined;
                preset?: string | undefined;
                color?: string | undefined;
                loading?: boolean | undefined;
                sizesConfig?: Record<string, any> | undefined;
                fontSize?: string | undefined;
                readonly textColor?: string | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                icon?: string | undefined;
                alt?: string | undefined;
                src?: string | undefined;
                fallbackSrc?: string | undefined;
                fallbackText?: string | undefined;
                fallbackIcon?: string | undefined;
                fallbackRender?: (() => any) | undefined;
                square?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaAvatarGroup: {
                size?: NonNullable<string | number | undefined> | undefined;
                options?: Record<string, unknown>[] | undefined;
                preset?: string | undefined;
                color?: string | undefined;
                loading?: NonNullable<boolean | undefined> | undefined;
                sizesConfig?: Record<string, any> | undefined;
                fontSize?: string | undefined;
                vertical?: boolean | undefined;
                textColor?: string | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                icon?: string | undefined;
                alt?: string | undefined;
                max?: string | number | undefined;
                src?: string | undefined;
                fallbackSrc?: string | undefined;
                fallbackText?: string | undefined;
                fallbackIcon?: string | undefined;
                fallbackRender?: (() => any) | undefined;
                square?: NonNullable<boolean | undefined> | undefined;
                restColor?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaBacktop: {
                preset?: string | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                color?: string | undefined;
                target?: string | Element | undefined;
                visibilityHeight?: string | number | undefined;
                speed?: string | number | undefined;
                verticalOffset?: string | undefined;
                horizontalOffset?: string | undefined;
                horizontalPosition?: "left" | "right" | undefined;
                verticalPosition?: "bottom" | "top" | undefined;
            } & import("vue").HTMLAttributes;
            VaBadge: {
                preset?: string | undefined;
                text?: string | number | undefined;
                transparent?: boolean | undefined;
                color?: string | undefined;
                placement?: import("../../composables").PlacementWithAlias | undefined;
                offset?: import("../va-badge/types").BadgeOffsetProp | undefined;
                readonly textColor?: string | undefined;
                overlap?: boolean | undefined;
                multiLine?: boolean | undefined;
                visibleEmpty?: boolean | undefined;
                dot?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaBreadcrumbs: {
                preset?: string | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                color?: string | undefined;
                vertical?: boolean | undefined;
                align?: string | undefined;
                separator?: string | undefined;
                disabledColor?: string | undefined;
                activeColor?: string | undefined;
                separatorColor?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaBreadcrumbsItem: {
                label?: string | undefined;
                replace?: boolean | undefined;
                append?: boolean | undefined;
                disabled?: boolean | undefined;
                tag?: string | undefined;
                href?: string | undefined;
                to?: string | Record<string, any> | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaButton: {
                size?: "small" | "medium" | "large" | undefined;
                replace?: boolean | undefined;
                preset?: string | undefined;
                append?: boolean | undefined;
                type?: string | undefined;
                disabled?: boolean | undefined;
                tag?: string | undefined;
                href?: string | undefined;
                color?: string | undefined;
                loading?: boolean | undefined;
                to?: string | Record<string, any> | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: string | undefined;
                sizesConfig?: Record<string, any> | undefined;
                textColor?: string | undefined;
                round?: boolean | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                icon?: string | undefined;
                block?: boolean | undefined;
                textOpacity?: string | number | undefined;
                backgroundOpacity?: string | number | undefined;
                borderColor?: string | undefined;
                gradient?: boolean | undefined;
                plain?: boolean | undefined;
                iconRight?: string | undefined;
                iconColor?: string | undefined;
                pressedBehavior?: "mask" | "opacity" | undefined;
                pressedOpacity?: number | undefined;
                pressedMaskColor?: string | undefined;
                hoverBehavior?: "mask" | "opacity" | undefined;
                hoverOpacity?: string | number | undefined;
                hoverMaskColor?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaButtonDropdown: {
                readonly label?: string | undefined;
                size?: NonNullable<"small" | "medium" | "large" | undefined> | undefined;
                replace?: NonNullable<boolean | undefined> | undefined;
                split?: boolean | undefined;
                anchor?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                preset?: string | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                role?: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined> | undefined;
                append?: NonNullable<boolean | undefined> | undefined;
                type?: string | undefined;
                disabled?: boolean | undefined;
                readonly?: NonNullable<boolean | undefined> | undefined;
                tag?: string | undefined;
                trigger?: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined> | undefined;
                modelValue?: boolean | undefined;
                stateful?: boolean | undefined;
                href?: string | undefined;
                color?: string | undefined;
                loading?: boolean | undefined;
                to?: NonNullable<string | Record<string, any> | undefined> | undefined;
                exact?: NonNullable<boolean | undefined> | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                sizesConfig?: Record<string, any> | undefined;
                placement?: import("../../composables").PlacementWithAlias | undefined;
                hoverOverTimeout?: NonNullable<string | number | undefined> | undefined;
                hoverOutTimeout?: NonNullable<string | number | undefined> | undefined;
                autoPlacement?: NonNullable<boolean | undefined> | undefined;
                stickToEdges?: NonNullable<boolean | undefined> | undefined;
                keepAnchorWidth?: boolean | undefined;
                verticalScrollOnOverflow?: NonNullable<boolean | undefined> | undefined;
                anchorSelector?: string | undefined;
                innerAnchorSelector?: string | undefined;
                closeOnClickOutside?: NonNullable<boolean | undefined> | undefined;
                closeOnFocusOutside?: NonNullable<boolean | undefined> | undefined;
                closeOnAnchorClick?: NonNullable<boolean | undefined> | undefined;
                closeOnContentClick?: boolean | undefined;
                isContentHoverable?: NonNullable<boolean | undefined> | undefined;
                offset?: number | [number, number] | undefined;
                cursor?: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined> | undefined;
                teleport?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                keyboardNavigation?: NonNullable<boolean | undefined> | undefined;
                contentClass?: string | undefined;
                textColor?: string | undefined;
                round?: NonNullable<boolean | undefined> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                icon?: string | undefined;
                textOpacity?: NonNullable<string | number | undefined> | undefined;
                backgroundOpacity?: NonNullable<string | number | undefined> | undefined;
                borderColor?: string | undefined;
                gradient?: NonNullable<boolean | undefined> | undefined;
                plain?: NonNullable<boolean | undefined> | undefined;
                iconColor?: string | undefined;
                pressedBehavior?: NonNullable<"mask" | "opacity" | undefined> | undefined;
                pressedOpacity?: number | undefined;
                pressedMaskColor?: string | undefined;
                hoverBehavior?: NonNullable<"mask" | "opacity" | undefined> | undefined;
                hoverOpacity?: NonNullable<string | number | undefined> | undefined;
                hoverMaskColor?: string | undefined;
                leftIcon?: boolean | undefined;
                openedIcon?: string | undefined;
                hideIcon?: boolean | undefined;
                disableButton?: boolean | undefined;
                disableDropdown?: boolean | undefined;
                splitTo?: string | undefined;
                splitHref?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaButtonGroup: {
                size?: NonNullable<"small" | "medium" | "large" | undefined> | undefined;
                replace?: NonNullable<boolean | undefined> | undefined;
                preset?: string | undefined;
                append?: NonNullable<boolean | undefined> | undefined;
                type?: string | undefined;
                disabled?: NonNullable<boolean | undefined> | undefined;
                tag?: string | undefined;
                href?: string | undefined;
                color?: string | undefined;
                loading?: NonNullable<boolean | undefined> | undefined;
                to?: NonNullable<string | Record<string, any> | undefined> | undefined;
                exact?: NonNullable<boolean | undefined> | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: string | undefined;
                sizesConfig?: Record<string, any> | undefined;
                textColor?: string | undefined;
                round?: NonNullable<boolean | undefined> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                icon?: string | undefined;
                textOpacity?: NonNullable<string | number | undefined> | undefined;
                backgroundOpacity?: NonNullable<string | number | undefined> | undefined;
                borderColor?: string | undefined;
                gradient?: boolean | undefined;
                plain?: NonNullable<boolean | undefined> | undefined;
                iconRight?: string | undefined;
                iconColor?: string | undefined;
                pressedBehavior?: NonNullable<"mask" | "opacity" | undefined> | undefined;
                pressedOpacity?: number | undefined;
                pressedMaskColor?: string | undefined;
                hoverBehavior?: NonNullable<"mask" | "opacity" | undefined> | undefined;
                hoverOpacity?: NonNullable<string | number | undefined> | undefined;
                hoverMaskColor?: string | undefined;
                grow?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaButtonToggle: {
                size?: NonNullable<NonNullable<"small" | "medium" | "large" | undefined> | undefined> | undefined;
                replace?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                readonly options?: import("..").ButtonOption[] | undefined;
                preset?: string | undefined;
                append?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                type?: string | undefined;
                disabled?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                tag?: string | undefined;
                modelValue?: string | number | boolean | undefined;
                href?: string | undefined;
                color?: string | undefined;
                loading?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                to?: NonNullable<NonNullable<string | Record<string, any> | undefined> | undefined> | undefined;
                exact?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: string | undefined;
                textBy?: import("../../composables").StringOrFunction | undefined;
                valueBy?: import("../../composables").StringOrFunction | undefined;
                trackBy?: import("../../composables").StringOrFunction | undefined;
                disabledBy?: import("../../composables").StringOrFunction | undefined;
                groupBy?: import("../../composables").StringOrFunction | undefined;
                sizesConfig?: Record<string, any> | undefined;
                textColor?: string | undefined;
                round?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                icon?: string | undefined;
                textOpacity?: NonNullable<NonNullable<string | number | undefined> | undefined> | undefined;
                backgroundOpacity?: NonNullable<NonNullable<string | number | undefined> | undefined> | undefined;
                borderColor?: string | undefined;
                gradient?: NonNullable<boolean | undefined> | undefined;
                plain?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                iconRight?: string | undefined;
                iconColor?: string | undefined;
                pressedBehavior?: NonNullable<NonNullable<"mask" | "opacity" | undefined> | undefined> | undefined;
                pressedOpacity?: number | undefined;
                pressedMaskColor?: string | undefined;
                hoverBehavior?: NonNullable<NonNullable<"mask" | "opacity" | undefined> | undefined> | undefined;
                hoverOpacity?: NonNullable<NonNullable<string | number | undefined> | undefined> | undefined;
                hoverMaskColor?: string | undefined;
                grow?: NonNullable<boolean | undefined> | undefined;
                readonly activeButtonTextColor?: string | undefined;
                toggleColor?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaCard: {
                replace?: boolean | undefined;
                preset?: string | undefined;
                append?: boolean | undefined;
                disabled?: boolean | undefined;
                tag?: string | undefined;
                href?: string | undefined;
                color?: string | undefined;
                to?: string | Record<string, any> | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: string | undefined;
                readonly textColor?: string | undefined;
                gradient?: boolean | undefined;
                square?: boolean | undefined;
                outlined?: boolean | undefined;
                bordered?: boolean | undefined;
                stripe?: boolean | undefined;
                stripeColor?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaCardBlock: {
                horizontal?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaCardActions: {
                preset?: string | undefined;
                vertical?: boolean | undefined;
                align?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaCardContent: {} & import("vue").HTMLAttributes;
            VaCardTitle: {
                preset?: string | undefined;
                readonly textColor?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaCarousel: {
                title?: string | undefined;
                preset?: string | undefined;
                draggable?: NonNullable<boolean | undefined> | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                modelValue?: number | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                loading?: NonNullable<"lazy" | "eager" | undefined> | undefined;
                sizes?: string | undefined;
                vertical?: boolean | undefined;
                swipable?: boolean | undefined;
                swipeDistance?: number | undefined;
                swipeDirection?: ("all" | ("" | "left" | "right" | "up" | "down") | "horizontal" | "vertical") | undefined;
                height?: string | undefined;
                crossorigin?: NonNullable<"anonymous" | "use-credentials" | undefined> | undefined;
                fallbackSrc?: string | undefined;
                fallbackText?: string | undefined;
                fallbackIcon?: string | undefined;
                fallbackRender?: (() => any) | undefined;
                maxWidth?: NonNullable<string | number | undefined> | undefined;
                readonly items?: any[] | undefined;
                readonly ratio?: string | number | undefined;
                lazy?: NonNullable<boolean | undefined> | undefined;
                fit?: NonNullable<"fill" | "none" | "contain" | "cover" | "scale-down" | undefined> | undefined;
                placeholderSrc?: string | undefined;
                srcset?: string | undefined;
                decoding?: NonNullable<"auto" | "sync" | "async" | undefined> | undefined;
                fetchpriority?: NonNullable<"auto" | "high" | "low" | undefined> | undefined;
                referrerpolicy?: NonNullable<"origin" | "no-referrer" | "no-referrer-when-downgrade" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url" | undefined> | undefined;
                autoscroll?: boolean | undefined;
                autoscrollInterval?: string | number | undefined;
                autoscrollPauseDuration?: string | number | undefined;
                infinite?: boolean | undefined;
                fadeKeyframe?: string | undefined;
                arrows?: boolean | undefined;
                indicators?: boolean | undefined;
                indicatorTrigger?: "click" | "hover" | "none" | undefined;
                effect?: "transition" | "fade" | undefined;
                ariaPreviousLabel?: import("../../composables").TranslationProp | undefined;
                ariaNextLabel?: import("../../composables").TranslationProp | undefined;
                ariaGoToSlideLabel?: import("../../composables").TranslationProp | undefined;
                ariaSlideOfLabel?: import("../../composables").TranslationProp | undefined;
            } & import("vue").HTMLAttributes;
            VaCheckbox: {
                label?: string | undefined;
                error?: boolean | undefined;
                preset?: string | undefined;
                name?: string | undefined;
                success?: boolean | undefined;
                id?: string | undefined;
                ariaLabel?: string | undefined;
                disabled?: boolean | undefined;
                readonly?: boolean | undefined;
                errorMessages?: string | string[] | undefined;
                modelValue?: string | number | boolean | unknown[] | Record<any, unknown> | null | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                loading?: boolean | undefined;
                rules?: import("../../composables").ValidationRule<any>[] | undefined;
                dirty?: boolean | undefined;
                errorCount?: string | number | undefined;
                messages?: string | string[] | undefined;
                immediateValidation?: boolean | undefined;
                vertical?: boolean | undefined;
                indeterminate?: boolean | undefined;
                checkedIcon?: string | undefined;
                indeterminateValue?: string | number | boolean | unknown[] | Record<any, unknown> | null | undefined;
                indeterminateIcon?: string | undefined;
                arrayValue?: string | number | boolean | Record<string, any> | undefined;
                leftLabel?: boolean | undefined;
                trueValue?: any;
                falseValue?: any;
            } & import("vue").HTMLAttributes;
            VaChip: {
                size?: "small" | "medium" | "large" | undefined;
                flat?: boolean | undefined;
                replace?: boolean | undefined;
                preset?: string | undefined;
                shadow?: boolean | undefined;
                append?: boolean | undefined;
                disabled?: boolean | undefined;
                readonly?: boolean | undefined;
                tag?: string | undefined;
                modelValue?: boolean | undefined;
                stateful?: boolean | undefined;
                href?: string | undefined;
                color?: string | undefined;
                to?: string | Record<string, any> | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: string | undefined;
                icon?: string | undefined;
                ariaCloseLabel?: import("../../composables").TranslationProp | undefined;
                square?: boolean | undefined;
                closeable?: boolean | undefined;
                outline?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaCollapse: {
                header?: string | undefined;
                preset?: string | undefined;
                disabled?: boolean | undefined;
                modelValue?: boolean | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                textColor?: string | undefined;
                icon?: string | undefined;
                iconColor?: string | undefined;
                bodyColor?: string | undefined;
                bodyTextColor?: string | undefined;
                colorAll?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaColorIndicator: {
                size?: string | undefined;
                preset?: string | undefined;
                modelValue?: boolean | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                square?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaColorInput: {
                label?: string | undefined;
                error?: NonNullable<boolean | undefined> | undefined;
                preset?: string | undefined;
                name?: string | undefined;
                mask?: NonNullable<string | Record<string, number[]> | import("cleave.js/options").CleaveOptions | undefined> | undefined;
                pattern?: string | undefined;
                success?: NonNullable<boolean | undefined> | undefined;
                autofocus?: NonNullable<boolean | undefined> | undefined;
                type?: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"text" | "password"> | undefined> | undefined;
                disabled?: boolean | undefined;
                readonly?: NonNullable<boolean | undefined> | undefined;
                errorMessages?: NonNullable<string | string[] | undefined> | undefined;
                modelValue?: string | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                loading?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                rules?: import("../../composables").ValidationRule<string>[] | undefined;
                dirty?: NonNullable<boolean | undefined> | undefined;
                errorCount?: NonNullable<string | number | undefined> | undefined;
                messages?: NonNullable<string | string[] | undefined> | undefined;
                immediateValidation?: NonNullable<boolean | undefined> | undefined;
                background?: string | undefined;
                tabindex?: NonNullable<string | number | undefined> | undefined;
                requiredMark?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                inputAriaLabel?: NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined> | undefined;
                inputAriaLabelledby?: string | undefined;
                inputAriaDescribedby?: string | undefined;
                counter?: NonNullable<boolean | undefined> | undefined;
                maxLength?: NonNullable<NonNullable<string | number | undefined> | undefined> | undefined;
                placeholder?: string | undefined;
                innerLabel?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                returnRaw?: NonNullable<boolean | undefined> | undefined;
                inputClass?: string | undefined;
                inputmode?: string | undefined;
                ariaResetLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
                strictBindInputValue?: NonNullable<boolean | undefined> | undefined;
                clearable?: NonNullable<boolean | undefined> | undefined;
                clearableIcon?: string | undefined;
                clearValue?: string | undefined;
                indicator?: "square" | "dot" | undefined;
                ariaOpenColorPickerLabel?: import("../../composables").TranslationProp | undefined;
            } & import("vue").HTMLAttributes;
            VaColorPalette: {
                preset?: string | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                modelValue?: string | undefined;
                stateful?: boolean | undefined;
                indicator?: "square" | "dot" | undefined;
                palette?: string[] | undefined;
                ariaIndicatorLabel?: import("../../composables").TranslationProp | undefined;
            } & import("vue").HTMLAttributes;
            VaConfig: {
                preset?: string | undefined;
                components?: Partial<any & {
                    all: import("../../services/component-config").Props;
                    presets: import("../../services/component-config").Presets;
                }> | undefined;
                readonly colors?: {
                    variables?: {
                        [x: string]: string | undefined;
                        primary?: string | undefined;
                        secondary?: string | undefined;
                        success?: string | undefined;
                        info?: string | undefined;
                        danger?: string | undefined;
                        warning?: string | undefined;
                        backgroundPrimary?: string | undefined;
                        backgroundSecondary?: string | undefined;
                        backgroundElement?: string | undefined;
                        backgroundBorder?: string | undefined;
                        textPrimary?: string | undefined;
                        textInverted?: string | undefined;
                        shadow?: string | undefined;
                        focus?: string | undefined;
                        transparent?: string | undefined;
                        onFocus?: string | undefined;
                        onPrimary?: string | undefined;
                        onDanger?: string | undefined;
                        onSuccess?: string | undefined;
                        onSecondary?: string | undefined;
                        onInfo?: string | undefined;
                        onWarning?: string | undefined;
                        onBackgroundPrimary?: string | undefined;
                        onBackgroundSecondary?: string | undefined;
                        onBackgroundElement?: string | undefined;
                        onBackgroundBorder?: string | undefined;
                        onTextPrimary?: string | undefined;
                        onTextInverted?: string | undefined;
                        onShadow?: string | undefined;
                        onTransparent?: string | undefined;
                    } | undefined;
                    threshold?: number | undefined;
                    presets?: {
                        [x: string]: {
                            [x: string]: string | undefined;
                            primary?: string | undefined;
                            secondary?: string | undefined;
                            success?: string | undefined;
                            info?: string | undefined;
                            danger?: string | undefined;
                            warning?: string | undefined;
                            backgroundPrimary?: string | undefined;
                            backgroundSecondary?: string | undefined;
                            backgroundElement?: string | undefined;
                            backgroundBorder?: string | undefined;
                            textPrimary?: string | undefined;
                            textInverted?: string | undefined;
                            shadow?: string | undefined;
                            focus?: string | undefined;
                            transparent?: string | undefined;
                            onFocus?: string | undefined;
                            onPrimary?: string | undefined;
                            onDanger?: string | undefined;
                            onSuccess?: string | undefined;
                            onSecondary?: string | undefined;
                            onInfo?: string | undefined;
                            onWarning?: string | undefined;
                            onBackgroundPrimary?: string | undefined;
                            onBackgroundSecondary?: string | undefined;
                            onBackgroundElement?: string | undefined;
                            onBackgroundBorder?: string | undefined;
                            onTextPrimary?: string | undefined;
                            onTextInverted?: string | undefined;
                            onShadow?: string | undefined;
                            onTransparent?: string | undefined;
                        } | undefined;
                        light?: {
                            [x: string]: string | undefined;
                            primary?: string | undefined;
                            secondary?: string | undefined;
                            success?: string | undefined;
                            info?: string | undefined;
                            danger?: string | undefined;
                            warning?: string | undefined;
                            backgroundPrimary?: string | undefined;
                            backgroundSecondary?: string | undefined;
                            backgroundElement?: string | undefined;
                            backgroundBorder?: string | undefined;
                            textPrimary?: string | undefined;
                            textInverted?: string | undefined;
                            shadow?: string | undefined;
                            focus?: string | undefined;
                            transparent?: string | undefined;
                            onFocus?: string | undefined;
                            onPrimary?: string | undefined;
                            onDanger?: string | undefined;
                            onSuccess?: string | undefined;
                            onSecondary?: string | undefined;
                            onInfo?: string | undefined;
                            onWarning?: string | undefined;
                            onBackgroundPrimary?: string | undefined;
                            onBackgroundSecondary?: string | undefined;
                            onBackgroundElement?: string | undefined;
                            onBackgroundBorder?: string | undefined;
                            onTextPrimary?: string | undefined;
                            onTextInverted?: string | undefined;
                            onShadow?: string | undefined;
                            onTransparent?: string | undefined;
                        } | undefined;
                        dark?: {
                            [x: string]: string | undefined;
                            primary?: string | undefined;
                            secondary?: string | undefined;
                            success?: string | undefined;
                            info?: string | undefined;
                            danger?: string | undefined;
                            warning?: string | undefined;
                            backgroundPrimary?: string | undefined;
                            backgroundSecondary?: string | undefined;
                            backgroundElement?: string | undefined;
                            backgroundBorder?: string | undefined;
                            textPrimary?: string | undefined;
                            textInverted?: string | undefined;
                            shadow?: string | undefined;
                            focus?: string | undefined;
                            transparent?: string | undefined;
                            onFocus?: string | undefined;
                            onPrimary?: string | undefined;
                            onDanger?: string | undefined;
                            onSuccess?: string | undefined;
                            onSecondary?: string | undefined;
                            onInfo?: string | undefined;
                            onWarning?: string | undefined;
                            onBackgroundPrimary?: string | undefined;
                            onBackgroundSecondary?: string | undefined;
                            onBackgroundElement?: string | undefined;
                            onBackgroundBorder?: string | undefined;
                            onTextPrimary?: string | undefined;
                            onTextInverted?: string | undefined;
                            onShadow?: string | undefined;
                            onTransparent?: string | undefined;
                        } | undefined;
                    } | undefined;
                    currentPresetName?: string | undefined;
                } | undefined;
                readonly i18n?: {
                    [x: string]: string | undefined;
                    progress?: string | undefined;
                    search?: string | undefined;
                    cancel?: string | undefined;
                    close?: string | undefined;
                    reset?: string | undefined;
                    switch?: string | undefined;
                    carousel?: string | undefined;
                    pagination?: string | undefined;
                    breadcrumbs?: string | undefined;
                    color?: string | undefined;
                    step?: string | undefined;
                    noOptions?: string | undefined;
                    ok?: string | undefined;
                    uploadFile?: string | undefined;
                    undo?: string | undefined;
                    dropzone?: string | undefined;
                    fileDeleted?: string | undefined;
                    closeAlert?: string | undefined;
                    backToTop?: string | undefined;
                    toggleDropdown?: string | undefined;
                    goPreviousSlide?: string | undefined;
                    goNextSlide?: string | undefined;
                    goSlide?: string | undefined;
                    slideOf?: string | undefined;
                    openColorPicker?: string | undefined;
                    colorSelection?: string | undefined;
                    colorName?: string | undefined;
                    decreaseCounter?: string | undefined;
                    increaseCounter?: string | undefined;
                    selectAllRows?: string | undefined;
                    sortColumnBy?: string | undefined;
                    selectRowByIndex?: string | undefined;
                    resetDate?: string | undefined;
                    nextPeriod?: string | undefined;
                    switchView?: string | undefined;
                    previousPeriod?: string | undefined;
                    removeFile?: string | undefined;
                    goToTheFirstPage?: string | undefined;
                    goToPreviousPage?: string | undefined;
                    goToSpecificPage?: string | undefined;
                    goToSpecificPageInput?: string | undefined;
                    goNextPage?: string | undefined;
                    goLastPage?: string | undefined;
                    currentRating?: string | undefined;
                    voteRating?: string | undefined;
                    optionsFilter?: string | undefined;
                    splitPanels?: string | undefined;
                    movePaginationLeft?: string | undefined;
                    movePaginationRight?: string | undefined;
                    resetTime?: string | undefined;
                    closeToast?: string | undefined;
                    selectedOption?: string | undefined;
                    noSelectedOption?: string | undefined;
                    counterValue?: string | undefined;
                    selectedDate?: string | undefined;
                    selectedTime?: string | undefined;
                    progressState?: string | undefined;
                    next?: string | undefined;
                    back?: string | undefined;
                    finish?: string | undefined;
                    loading?: string | undefined;
                    sliderValue?: string | undefined;
                    inputField?: string | undefined;
                    fileTypeIncorrect?: string | undefined;
                } | undefined;
            } & import("vue").HTMLAttributes;
            VaContent: {} & import("vue").HTMLAttributes;
            VaCounter: {
                label?: string | undefined;
                error?: NonNullable<boolean | undefined> | undefined;
                flat?: boolean | undefined;
                preset?: string | undefined;
                name?: string | undefined;
                success?: NonNullable<boolean | undefined> | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                disabled?: NonNullable<boolean | undefined> | undefined;
                readonly?: NonNullable<boolean | undefined> | undefined;
                errorMessages?: NonNullable<string | string[] | undefined> | undefined;
                modelValue?: string | number | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                step?: string | number | undefined;
                loading?: NonNullable<boolean | undefined> | undefined;
                rules?: import("../../composables").ValidationRule<any>[] | undefined;
                dirty?: NonNullable<boolean | undefined> | undefined;
                errorCount?: NonNullable<string | number | undefined> | undefined;
                messages?: NonNullable<string | string[] | undefined> | undefined;
                immediateValidation?: NonNullable<boolean | undefined> | undefined;
                background?: string | undefined;
                requiredMark?: NonNullable<boolean | undefined> | undefined;
                inputAriaLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
                inputAriaLabelledby?: string | undefined;
                inputAriaDescribedby?: string | undefined;
                counter?: NonNullable<boolean | undefined> | undefined;
                maxLength?: NonNullable<string | number | undefined> | undefined;
                placeholder?: string | undefined;
                innerLabel?: NonNullable<boolean | undefined> | undefined;
                clearable?: boolean | undefined;
                clearableIcon?: string | undefined;
                clearValue?: string | undefined;
                readonly max?: string | number | undefined;
                readonly min?: string | number | undefined;
                manualInput?: boolean | undefined;
                increaseIcon?: string | undefined;
                decreaseIcon?: string | undefined;
                buttons?: boolean | undefined;
                rounded?: boolean | undefined;
                margins?: string | number | undefined;
                longPressDelay?: string | number | undefined;
                ariaDecreaseLabel?: import("../../composables").TranslationProp | undefined;
                ariaIncreaseLabel?: import("../../composables").TranslationProp | undefined;
            } & import("vue").HTMLAttributes;
            VaDataTable: {} & import("vue").HTMLAttributes;
            VaDateInput: {
                label?: string | undefined;
                error?: boolean | undefined;
                anchor?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                preset?: string | undefined;
                name?: string | undefined;
                view?: Partial<import("../va-date-picker/types").DatePickerView> | undefined;
                success?: boolean | undefined;
                ariaLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
                role?: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined> | undefined;
                type?: NonNullable<import("../va-date-picker/types").DatePickerType | undefined> | undefined;
                disabled?: NonNullable<boolean | undefined> | undefined;
                readonly?: NonNullable<boolean | undefined> | undefined;
                errorMessages?: string | string[] | undefined;
                trigger?: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined> | undefined;
                readonly modelValue?: import("../va-date-input/types").DateInputModelValue;
                stateful?: NonNullable<boolean | undefined> | undefined;
                color?: string | undefined;
                loading?: NonNullable<boolean | undefined> | undefined;
                target?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                rules?: import("../../composables").ValidationRule<import("../va-date-input/types").DateInputModelValue>[] | undefined;
                dirty?: boolean | undefined;
                errorCount?: string | number | undefined;
                messages?: string | string[] | undefined;
                immediateValidation?: boolean | undefined;
                placement?: NonNullable<import("../../composables").PlacementWithAlias | undefined> | undefined;
                mode?: NonNullable<NonNullable<import("../va-date-picker/types").DatePickerMode | undefined> | undefined> | undefined;
                hoverOverTimeout?: NonNullable<string | number | undefined> | undefined;
                hoverOutTimeout?: NonNullable<string | number | undefined> | undefined;
                autoPlacement?: NonNullable<boolean | undefined> | undefined;
                stickToEdges?: NonNullable<boolean | undefined> | undefined;
                keepAnchorWidth?: NonNullable<boolean | undefined> | undefined;
                verticalScrollOnOverflow?: NonNullable<boolean | undefined> | undefined;
                anchorSelector?: string | undefined;
                closeOnClickOutside?: NonNullable<boolean | undefined> | undefined;
                closeOnFocusOutside?: NonNullable<boolean | undefined> | undefined;
                closeOnAnchorClick?: NonNullable<boolean | undefined> | undefined;
                closeOnContentClick?: boolean | undefined;
                isContentHoverable?: NonNullable<boolean | undefined> | undefined;
                offset?: NonNullable<import("../va-dropdown/types").DropdownOffsetProp | undefined> | undefined;
                cursor?: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined> | undefined;
                teleport?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                contentClass?: string | undefined;
                background?: string | undefined;
                closeOnChange?: boolean | undefined;
                isOpen?: boolean | undefined;
                requiredMark?: NonNullable<boolean | undefined> | undefined;
                inputAriaLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
                inputAriaLabelledby?: string | undefined;
                inputAriaDescribedby?: string | undefined;
                counter?: NonNullable<boolean | undefined> | undefined;
                placeholder?: string | undefined;
                innerLabel?: NonNullable<boolean | undefined> | undefined;
                ariaResetLabel?: import("../../composables").TranslationProp | undefined;
                clearable?: boolean | undefined;
                clearableIcon?: string | undefined;
                clearValue?: any;
                icon?: string | undefined;
                leftIcon?: boolean | undefined;
                manualInput?: boolean | undefined;
                "child:prevButton"?: (Partial<{
                    size: "small" | "medium" | "large";
                    replace: boolean;
                    preset: string;
                    append: boolean;
                    type: string;
                    disabled: boolean;
                    tag: string;
                    href: string;
                    color: string;
                    loading: boolean;
                    to: string | Record<string, any>;
                    exact: boolean;
                    activeClass: string;
                    exactActiveClass: string;
                    target: string;
                    sizesConfig: Record<string, any>;
                    textColor: string;
                    round: boolean;
                    fontSizesConfig: Record<string, any>;
                    icon: string;
                    block: boolean;
                    textOpacity: string | number;
                    backgroundOpacity: string | number;
                    borderColor: string;
                    gradient: boolean;
                    plain: boolean;
                    iconRight: string;
                    iconColor: string;
                    pressedBehavior: "mask" | "opacity";
                    pressedOpacity: number;
                    pressedMaskColor: string;
                    hoverBehavior: "mask" | "opacity";
                    hoverOpacity: string | number;
                    hoverMaskColor: string;
                }> & Omit<{
                    readonly size: "small" | "medium" | "large";
                    readonly type: string;
                    readonly disabled: boolean;
                    readonly tag: string;
                    readonly color: string;
                    readonly loading: boolean;
                    readonly sizesConfig: Record<string, any>;
                    readonly textColor: string;
                    readonly round: boolean;
                    readonly fontSizesConfig: Record<string, any>;
                    readonly icon: string;
                    readonly block: boolean;
                    readonly textOpacity: string | number;
                    readonly backgroundOpacity: string | number;
                    readonly borderColor: string;
                    readonly gradient: boolean;
                    readonly plain: boolean;
                    readonly iconRight: string;
                    readonly iconColor: string;
                    readonly pressedBehavior: "mask" | "opacity";
                    readonly pressedOpacity: number;
                    readonly pressedMaskColor: string;
                    readonly hoverBehavior: "mask" | "opacity";
                    readonly hoverOpacity: string | number;
                    readonly hoverMaskColor: string;
                    readonly replace?: boolean | undefined;
                    readonly preset?: string | undefined;
                    readonly append?: boolean | undefined;
                    readonly href?: string | undefined;
                    readonly to?: string | Record<string, any> | undefined;
                    readonly exact?: boolean | undefined;
                    readonly activeClass?: string | undefined;
                    readonly exactActiveClass?: string | undefined;
                    readonly target?: string | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                    tag: {
                        type: StringConstructor;
                        default: string;
                    };
                    type: {
                        type: StringConstructor;
                        default: string;
                    };
                    block: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                    textColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    textOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    backgroundOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    borderColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    gradient: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    plain: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    round: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    size: {
                        type: PropType<"small" | "medium" | "large">;
                        default: string;
                        validator: (v: string) => boolean;
                    };
                    icon: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconRight: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    to: {
                        type: PropType<string | Record<string, any>>;
                        default: undefined;
                    };
                    replace: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    append: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    exact: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    activeClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    exactActiveClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    href: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    target: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    pressedBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    pressedOpacity: {
                        type: NumberConstructor;
                        default: number;
                    };
                    pressedMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    hoverBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    hoverOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    hoverMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    sizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    fontSizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    preset: {
                        type: StringConstructor;
                        default: undefined;
                    };
                }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">) | undefined;
                "child:nextButton"?: (Partial<{
                    size: "small" | "medium" | "large";
                    replace: boolean;
                    preset: string;
                    append: boolean;
                    type: string;
                    disabled: boolean;
                    tag: string;
                    href: string;
                    color: string;
                    loading: boolean;
                    to: string | Record<string, any>;
                    exact: boolean;
                    activeClass: string;
                    exactActiveClass: string;
                    target: string;
                    sizesConfig: Record<string, any>;
                    textColor: string;
                    round: boolean;
                    fontSizesConfig: Record<string, any>;
                    icon: string;
                    block: boolean;
                    textOpacity: string | number;
                    backgroundOpacity: string | number;
                    borderColor: string;
                    gradient: boolean;
                    plain: boolean;
                    iconRight: string;
                    iconColor: string;
                    pressedBehavior: "mask" | "opacity";
                    pressedOpacity: number;
                    pressedMaskColor: string;
                    hoverBehavior: "mask" | "opacity";
                    hoverOpacity: string | number;
                    hoverMaskColor: string;
                }> & Omit<{
                    readonly size: "small" | "medium" | "large";
                    readonly type: string;
                    readonly disabled: boolean;
                    readonly tag: string;
                    readonly color: string;
                    readonly loading: boolean;
                    readonly sizesConfig: Record<string, any>;
                    readonly textColor: string;
                    readonly round: boolean;
                    readonly fontSizesConfig: Record<string, any>;
                    readonly icon: string;
                    readonly block: boolean;
                    readonly textOpacity: string | number;
                    readonly backgroundOpacity: string | number;
                    readonly borderColor: string;
                    readonly gradient: boolean;
                    readonly plain: boolean;
                    readonly iconRight: string;
                    readonly iconColor: string;
                    readonly pressedBehavior: "mask" | "opacity";
                    readonly pressedOpacity: number;
                    readonly pressedMaskColor: string;
                    readonly hoverBehavior: "mask" | "opacity";
                    readonly hoverOpacity: string | number;
                    readonly hoverMaskColor: string;
                    readonly replace?: boolean | undefined;
                    readonly preset?: string | undefined;
                    readonly append?: boolean | undefined;
                    readonly href?: string | undefined;
                    readonly to?: string | Record<string, any> | undefined;
                    readonly exact?: boolean | undefined;
                    readonly activeClass?: string | undefined;
                    readonly exactActiveClass?: string | undefined;
                    readonly target?: string | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                    tag: {
                        type: StringConstructor;
                        default: string;
                    };
                    type: {
                        type: StringConstructor;
                        default: string;
                    };
                    block: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                    textColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    textOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    backgroundOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    borderColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    gradient: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    plain: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    round: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    size: {
                        type: PropType<"small" | "medium" | "large">;
                        default: string;
                        validator: (v: string) => boolean;
                    };
                    icon: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconRight: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    to: {
                        type: PropType<string | Record<string, any>>;
                        default: undefined;
                    };
                    replace: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    append: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    exact: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    activeClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    exactActiveClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    href: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    target: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    pressedBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    pressedOpacity: {
                        type: NumberConstructor;
                        default: number;
                    };
                    pressedMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    hoverBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    hoverOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    hoverMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    sizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    fontSizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    preset: {
                        type: StringConstructor;
                        default: undefined;
                    };
                }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">) | undefined;
                "child:middleButton"?: (Partial<{
                    size: "small" | "medium" | "large";
                    replace: boolean;
                    preset: string;
                    append: boolean;
                    type: string;
                    disabled: boolean;
                    tag: string;
                    href: string;
                    color: string;
                    loading: boolean;
                    to: string | Record<string, any>;
                    exact: boolean;
                    activeClass: string;
                    exactActiveClass: string;
                    target: string;
                    sizesConfig: Record<string, any>;
                    textColor: string;
                    round: boolean;
                    fontSizesConfig: Record<string, any>;
                    icon: string;
                    block: boolean;
                    textOpacity: string | number;
                    backgroundOpacity: string | number;
                    borderColor: string;
                    gradient: boolean;
                    plain: boolean;
                    iconRight: string;
                    iconColor: string;
                    pressedBehavior: "mask" | "opacity";
                    pressedOpacity: number;
                    pressedMaskColor: string;
                    hoverBehavior: "mask" | "opacity";
                    hoverOpacity: string | number;
                    hoverMaskColor: string;
                }> & Omit<{
                    readonly size: "small" | "medium" | "large";
                    readonly type: string;
                    readonly disabled: boolean;
                    readonly tag: string;
                    readonly color: string;
                    readonly loading: boolean;
                    readonly sizesConfig: Record<string, any>;
                    readonly textColor: string;
                    readonly round: boolean;
                    readonly fontSizesConfig: Record<string, any>;
                    readonly icon: string;
                    readonly block: boolean;
                    readonly textOpacity: string | number;
                    readonly backgroundOpacity: string | number;
                    readonly borderColor: string;
                    readonly gradient: boolean;
                    readonly plain: boolean;
                    readonly iconRight: string;
                    readonly iconColor: string;
                    readonly pressedBehavior: "mask" | "opacity";
                    readonly pressedOpacity: number;
                    readonly pressedMaskColor: string;
                    readonly hoverBehavior: "mask" | "opacity";
                    readonly hoverOpacity: string | number;
                    readonly hoverMaskColor: string;
                    readonly replace?: boolean | undefined;
                    readonly preset?: string | undefined;
                    readonly append?: boolean | undefined;
                    readonly href?: string | undefined;
                    readonly to?: string | Record<string, any> | undefined;
                    readonly exact?: boolean | undefined;
                    readonly activeClass?: string | undefined;
                    readonly exactActiveClass?: string | undefined;
                    readonly target?: string | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                    tag: {
                        type: StringConstructor;
                        default: string;
                    };
                    type: {
                        type: StringConstructor;
                        default: string;
                    };
                    block: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                    textColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    textOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    backgroundOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    borderColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    gradient: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    plain: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    round: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    size: {
                        type: PropType<"small" | "medium" | "large">;
                        default: string;
                        validator: (v: string) => boolean;
                    };
                    icon: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconRight: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    to: {
                        type: PropType<string | Record<string, any>>;
                        default: undefined;
                    };
                    replace: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    append: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    exact: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    activeClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    exactActiveClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    href: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    target: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    pressedBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    pressedOpacity: {
                        type: NumberConstructor;
                        default: number;
                    };
                    pressedMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    hoverBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    hoverOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    hoverMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    sizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    fontSizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    preset: {
                        type: StringConstructor;
                        default: undefined;
                    };
                }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">) | undefined;
                monthNames?: string[] | undefined;
                ariaNextPeriodLabel?: NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined> | undefined;
                ariaPreviousPeriodLabel?: NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined> | undefined;
                ariaSwitchViewLabel?: NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined> | undefined;
                weekdayNames?: string[] | undefined;
                firstWeekday?: NonNullable<NonNullable<("Monday" | "Sunday" | "monday" | "sunday") | undefined> | undefined> | undefined;
                hideWeekDays?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                showOtherMonths?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                allowedDays?: ((date: Date) => boolean) | undefined;
                weekends?: ((date: Date) => boolean) | undefined;
                highlightWeekend?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                highlightToday?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
                allowedMonths?: ((date: Date) => boolean) | undefined;
                allowedYears?: ((date: Date) => boolean) | undefined;
                startYear?: NonNullable<NonNullable<string | number | undefined> | undefined> | undefined;
                endYear?: NonNullable<NonNullable<string | number | undefined> | undefined> | undefined;
                weekendsColor?: string | undefined;
                resetOnClose?: boolean | undefined;
                readonly format?: ((date: import("../va-date-input/types").DateInputModelValue) => string) | undefined;
                formatDate?: ((date: Date) => string) | undefined;
                readonly formatValue?: ((date: import("../va-date-input/types").DateInputModelValue) => string) | undefined;
                readonly parse?: ((input: string) => import("../va-date-input/types").DateInputValue) | undefined;
                readonly parseDate?: ((input: string) => Date) | undefined;
                delimiter?: string | undefined;
                rangeDelimiter?: string | undefined;
                ariaToggleDropdownLabel?: import("../../composables").TranslationProp | undefined;
                ariaSelectedDateLabel?: import("../../composables").TranslationProp | undefined;
            } & import("vue").HTMLAttributes;
            VaDatePicker: {
                preset?: string | undefined;
                readonly view?: Partial<import("../va-date-picker/types").DatePickerView> | undefined;
                type?: import("../va-date-picker/types").DatePickerType | undefined;
                disabled?: boolean | undefined;
                readonly?: boolean | undefined;
                readonly modelValue?: import("../va-date-picker/types").DatePickerModelValue;
                stateful?: boolean | undefined;
                color?: string | undefined;
                mode?: NonNullable<import("../va-date-picker/types").DatePickerMode | undefined> | undefined;
                "child:prevButton"?: NonNullable<Partial<{
                    size: "small" | "medium" | "large";
                    replace: boolean;
                    preset: string;
                    append: boolean;
                    type: string;
                    disabled: boolean;
                    tag: string;
                    href: string;
                    color: string;
                    loading: boolean;
                    to: string | Record<string, any>;
                    exact: boolean;
                    activeClass: string;
                    exactActiveClass: string;
                    target: string;
                    sizesConfig: Record<string, any>;
                    textColor: string;
                    round: boolean;
                    fontSizesConfig: Record<string, any>;
                    icon: string;
                    block: boolean;
                    textOpacity: string | number;
                    backgroundOpacity: string | number;
                    borderColor: string;
                    gradient: boolean;
                    plain: boolean;
                    iconRight: string;
                    iconColor: string;
                    pressedBehavior: "mask" | "opacity";
                    pressedOpacity: number;
                    pressedMaskColor: string;
                    hoverBehavior: "mask" | "opacity";
                    hoverOpacity: string | number;
                    hoverMaskColor: string;
                }> & Omit<{
                    readonly size: "small" | "medium" | "large";
                    readonly type: string;
                    readonly disabled: boolean;
                    readonly tag: string;
                    readonly color: string;
                    readonly loading: boolean;
                    readonly sizesConfig: Record<string, any>;
                    readonly textColor: string;
                    readonly round: boolean;
                    readonly fontSizesConfig: Record<string, any>;
                    readonly icon: string;
                    readonly block: boolean;
                    readonly textOpacity: string | number;
                    readonly backgroundOpacity: string | number;
                    readonly borderColor: string;
                    readonly gradient: boolean;
                    readonly plain: boolean;
                    readonly iconRight: string;
                    readonly iconColor: string;
                    readonly pressedBehavior: "mask" | "opacity";
                    readonly pressedOpacity: number;
                    readonly pressedMaskColor: string;
                    readonly hoverBehavior: "mask" | "opacity";
                    readonly hoverOpacity: string | number;
                    readonly hoverMaskColor: string;
                    readonly replace?: boolean | undefined;
                    readonly preset?: string | undefined;
                    readonly append?: boolean | undefined;
                    readonly href?: string | undefined;
                    readonly to?: string | Record<string, any> | undefined;
                    readonly exact?: boolean | undefined;
                    readonly activeClass?: string | undefined;
                    readonly exactActiveClass?: string | undefined;
                    readonly target?: string | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                    tag: {
                        type: StringConstructor;
                        default: string;
                    };
                    type: {
                        type: StringConstructor;
                        default: string;
                    };
                    block: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                    textColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    textOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    backgroundOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    borderColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    gradient: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    plain: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    round: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    size: {
                        type: PropType<"small" | "medium" | "large">;
                        default: string;
                        validator: (v: string) => boolean;
                    };
                    icon: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconRight: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    to: {
                        type: PropType<string | Record<string, any>>;
                        default: undefined;
                    };
                    replace: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    append: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    exact: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    activeClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    exactActiveClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    href: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    target: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    pressedBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    pressedOpacity: {
                        type: NumberConstructor;
                        default: number;
                    };
                    pressedMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    hoverBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    hoverOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    hoverMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    sizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    fontSizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    preset: {
                        type: StringConstructor;
                        default: undefined;
                    };
                }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
                "child:nextButton"?: NonNullable<Partial<{
                    size: "small" | "medium" | "large";
                    replace: boolean;
                    preset: string;
                    append: boolean;
                    type: string;
                    disabled: boolean;
                    tag: string;
                    href: string;
                    color: string;
                    loading: boolean;
                    to: string | Record<string, any>;
                    exact: boolean;
                    activeClass: string;
                    exactActiveClass: string;
                    target: string;
                    sizesConfig: Record<string, any>;
                    textColor: string;
                    round: boolean;
                    fontSizesConfig: Record<string, any>;
                    icon: string;
                    block: boolean;
                    textOpacity: string | number;
                    backgroundOpacity: string | number;
                    borderColor: string;
                    gradient: boolean;
                    plain: boolean;
                    iconRight: string;
                    iconColor: string;
                    pressedBehavior: "mask" | "opacity";
                    pressedOpacity: number;
                    pressedMaskColor: string;
                    hoverBehavior: "mask" | "opacity";
                    hoverOpacity: string | number;
                    hoverMaskColor: string;
                }> & Omit<{
                    readonly size: "small" | "medium" | "large";
                    readonly type: string;
                    readonly disabled: boolean;
                    readonly tag: string;
                    readonly color: string;
                    readonly loading: boolean;
                    readonly sizesConfig: Record<string, any>;
                    readonly textColor: string;
                    readonly round: boolean;
                    readonly fontSizesConfig: Record<string, any>;
                    readonly icon: string;
                    readonly block: boolean;
                    readonly textOpacity: string | number;
                    readonly backgroundOpacity: string | number;
                    readonly borderColor: string;
                    readonly gradient: boolean;
                    readonly plain: boolean;
                    readonly iconRight: string;
                    readonly iconColor: string;
                    readonly pressedBehavior: "mask" | "opacity";
                    readonly pressedOpacity: number;
                    readonly pressedMaskColor: string;
                    readonly hoverBehavior: "mask" | "opacity";
                    readonly hoverOpacity: string | number;
                    readonly hoverMaskColor: string;
                    readonly replace?: boolean | undefined;
                    readonly preset?: string | undefined;
                    readonly append?: boolean | undefined;
                    readonly href?: string | undefined;
                    readonly to?: string | Record<string, any> | undefined;
                    readonly exact?: boolean | undefined;
                    readonly activeClass?: string | undefined;
                    readonly exactActiveClass?: string | undefined;
                    readonly target?: string | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                    tag: {
                        type: StringConstructor;
                        default: string;
                    };
                    type: {
                        type: StringConstructor;
                        default: string;
                    };
                    block: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                    textColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    textOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    backgroundOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    borderColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    gradient: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    plain: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    round: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    size: {
                        type: PropType<"small" | "medium" | "large">;
                        default: string;
                        validator: (v: string) => boolean;
                    };
                    icon: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconRight: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    to: {
                        type: PropType<string | Record<string, any>>;
                        default: undefined;
                    };
                    replace: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    append: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    exact: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    activeClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    exactActiveClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    href: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    target: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    pressedBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    pressedOpacity: {
                        type: NumberConstructor;
                        default: number;
                    };
                    pressedMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    hoverBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    hoverOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    hoverMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    sizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    fontSizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    preset: {
                        type: StringConstructor;
                        default: undefined;
                    };
                }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
                "child:middleButton"?: NonNullable<Partial<{
                    size: "small" | "medium" | "large";
                    replace: boolean;
                    preset: string;
                    append: boolean;
                    type: string;
                    disabled: boolean;
                    tag: string;
                    href: string;
                    color: string;
                    loading: boolean;
                    to: string | Record<string, any>;
                    exact: boolean;
                    activeClass: string;
                    exactActiveClass: string;
                    target: string;
                    sizesConfig: Record<string, any>;
                    textColor: string;
                    round: boolean;
                    fontSizesConfig: Record<string, any>;
                    icon: string;
                    block: boolean;
                    textOpacity: string | number;
                    backgroundOpacity: string | number;
                    borderColor: string;
                    gradient: boolean;
                    plain: boolean;
                    iconRight: string;
                    iconColor: string;
                    pressedBehavior: "mask" | "opacity";
                    pressedOpacity: number;
                    pressedMaskColor: string;
                    hoverBehavior: "mask" | "opacity";
                    hoverOpacity: string | number;
                    hoverMaskColor: string;
                }> & Omit<{
                    readonly size: "small" | "medium" | "large";
                    readonly type: string;
                    readonly disabled: boolean;
                    readonly tag: string;
                    readonly color: string;
                    readonly loading: boolean;
                    readonly sizesConfig: Record<string, any>;
                    readonly textColor: string;
                    readonly round: boolean;
                    readonly fontSizesConfig: Record<string, any>;
                    readonly icon: string;
                    readonly block: boolean;
                    readonly textOpacity: string | number;
                    readonly backgroundOpacity: string | number;
                    readonly borderColor: string;
                    readonly gradient: boolean;
                    readonly plain: boolean;
                    readonly iconRight: string;
                    readonly iconColor: string;
                    readonly pressedBehavior: "mask" | "opacity";
                    readonly pressedOpacity: number;
                    readonly pressedMaskColor: string;
                    readonly hoverBehavior: "mask" | "opacity";
                    readonly hoverOpacity: string | number;
                    readonly hoverMaskColor: string;
                    readonly replace?: boolean | undefined;
                    readonly preset?: string | undefined;
                    readonly append?: boolean | undefined;
                    readonly href?: string | undefined;
                    readonly to?: string | Record<string, any> | undefined;
                    readonly exact?: boolean | undefined;
                    readonly activeClass?: string | undefined;
                    readonly exactActiveClass?: string | undefined;
                    readonly target?: string | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                    tag: {
                        type: StringConstructor;
                        default: string;
                    };
                    type: {
                        type: StringConstructor;
                        default: string;
                    };
                    block: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                    textColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    textOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    backgroundOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    borderColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    gradient: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    plain: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    round: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    size: {
                        type: PropType<"small" | "medium" | "large">;
                        default: string;
                        validator: (v: string) => boolean;
                    };
                    icon: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconRight: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    to: {
                        type: PropType<string | Record<string, any>>;
                        default: undefined;
                    };
                    replace: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    append: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    exact: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    activeClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    exactActiveClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    href: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    target: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    pressedBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    pressedOpacity: {
                        type: NumberConstructor;
                        default: number;
                    };
                    pressedMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    hoverBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    hoverOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    hoverMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    sizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    fontSizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    preset: {
                        type: StringConstructor;
                        default: undefined;
                    };
                }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
                monthNames?: string[] | undefined;
                ariaNextPeriodLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
                ariaPreviousPeriodLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
                ariaSwitchViewLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
                weekdayNames?: string[] | undefined;
                firstWeekday?: NonNullable<("Monday" | "Sunday" | "monday" | "sunday") | undefined> | undefined;
                hideWeekDays?: NonNullable<boolean | undefined> | undefined;
                showOtherMonths?: NonNullable<boolean | undefined> | undefined;
                allowedDays?: ((date: Date) => boolean) | undefined;
                weekends?: ((date: Date) => boolean) | undefined;
                highlightWeekend?: NonNullable<boolean | undefined> | undefined;
                highlightToday?: NonNullable<boolean | undefined> | undefined;
                allowedMonths?: ((date: Date) => boolean) | undefined;
                allowedYears?: ((date: Date) => boolean) | undefined;
                startYear?: NonNullable<string | number | undefined> | undefined;
                endYear?: NonNullable<string | number | undefined> | undefined;
                weekendsColor?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaDivider: {
                preset?: string | undefined;
                color?: string | undefined;
                orientation?: "left" | "center" | "right" | undefined;
                vertical?: boolean | undefined;
                inset?: boolean | undefined;
                dashed?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaDropdown: {
                anchor?: import("../../composables").MaybeHTMLElementOrSelector;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                role?: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined;
                disabled?: boolean | undefined;
                readonly?: boolean | undefined;
                trigger?: import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined;
                modelValue?: boolean | undefined;
                stateful?: boolean | undefined;
                target?: import("../../composables").MaybeHTMLElementOrSelector;
                placement?: import("../../composables").PlacementWithAlias | undefined;
                hoverOverTimeout?: string | number | undefined;
                hoverOutTimeout?: string | number | undefined;
                autoPlacement?: boolean | undefined;
                stickToEdges?: boolean | undefined;
                keepAnchorWidth?: boolean | undefined;
                verticalScrollOnOverflow?: boolean | undefined;
                anchorSelector?: string | undefined;
                innerAnchorSelector?: string | undefined;
                closeOnClickOutside?: boolean | undefined;
                closeOnFocusOutside?: boolean | undefined;
                closeOnAnchorClick?: boolean | undefined;
                closeOnContentClick?: boolean | undefined;
                isContentHoverable?: boolean | undefined;
                offset?: import("../va-dropdown/types").DropdownOffsetProp | undefined;
                cursor?: boolean | import("../va-dropdown/types").CursorAnchor | undefined;
                teleport?: import("../../composables").MaybeHTMLElementOrSelector;
                keyboardNavigation?: boolean | undefined;
                contentClass?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaDropdownContent: {
                noPadding?: boolean | undefined;
                background?: string | undefined;
                readonly textColor?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaFallback: {
                readonly fallbackSrc?: string | undefined;
                readonly fallbackText?: string | undefined;
                readonly fallbackIcon?: string | undefined;
                readonly fallbackRender?: (() => any) | undefined;
            } & import("vue").HTMLAttributes;
            VaFileUpload: {
                preset?: string | undefined;
                type?: "list" | "single" | "gallery" | undefined;
                disabled?: boolean | undefined;
                modelValue?: import("..").VaFile | import("..").VaFile[] | undefined;
                color?: string | undefined;
                undo?: boolean | undefined;
                dropzone?: boolean | undefined;
                file?: import("..").ConvertedFile | undefined;
                ariaRemoveFileLabel?: NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined> | undefined;
                files?: import("..").VaFile[] | undefined;
                fileTypes?: string | undefined;
                hideFileList?: boolean | undefined;
                undoDuration?: string | number | undefined;
                undoButtonText?: import("../../composables").TranslationProp | undefined;
                dropZoneText?: import("../../composables").TranslationProp | undefined;
                uploadButtonText?: import("../../composables").TranslationProp | undefined;
                deletedFileMessage?: import("../../composables").TranslationProp | undefined;
                fileIncorrectMessage?: import("../../composables").TranslationProp | undefined;
            } & import("vue").HTMLAttributes;
            VaForm: {
                preset?: string | undefined;
                name?: string | undefined;
                immediate?: boolean | undefined;
                autofocus?: boolean | undefined;
                tag?: string | undefined;
                trigger?: "blur" | "change" | undefined;
                modelValue?: boolean | undefined;
                hideErrors?: boolean | undefined;
                hideErrorMessages?: boolean | undefined;
                hideLoading?: boolean | undefined;
                stateful?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaHover: {
                preset?: string | undefined;
                disabled?: boolean | undefined;
                modelValue?: boolean | undefined;
                stateful?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaIcon: {
                size?: string | number | undefined;
                preset?: string | undefined;
                name?: string | undefined;
                readonly tag?: string | undefined;
                readonly color?: string | undefined;
                sizesConfig?: Record<string, any> | undefined;
                readonly component?: any;
                readonly rotation?: string | number | undefined;
                readonly spin?: string | boolean | undefined;
                flip?: "horizontal" | "vertical" | "off" | "both" | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
            } & import("vue").HTMLAttributes;
            VaImage: {
                title?: string | undefined;
                preset?: string | undefined;
                draggable?: boolean | undefined;
                readonly loading?: "lazy" | "eager" | undefined;
                sizes?: string | undefined;
                alt?: string | undefined;
                readonly crossorigin?: "anonymous" | "use-credentials" | undefined;
                readonly src?: string | undefined;
                fallbackSrc?: string | undefined;
                fallbackText?: string | undefined;
                fallbackIcon?: string | undefined;
                fallbackRender?: (() => any) | undefined;
                maxWidth?: string | number | undefined;
                ratio?: number | "auto" | undefined;
                lazy?: boolean | undefined;
                fit?: "fill" | "none" | "contain" | "cover" | "scale-down" | undefined;
                placeholderSrc?: string | undefined;
                srcset?: string | undefined;
                readonly decoding?: "auto" | "sync" | "async" | undefined;
                fetchpriority?: "auto" | "high" | "low" | undefined;
                readonly referrerpolicy?: "origin" | "no-referrer" | "no-referrer-when-downgrade" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url" | undefined;
            } & import("vue").HTMLAttributes;
            VaInfiniteScroll: {
                readonly load?: Function | undefined;
                reverse?: boolean | undefined;
                preset?: string | undefined;
                disabled?: boolean | undefined;
                tag?: string | undefined;
                offset?: string | number | undefined;
                scrollTarget?: string | HTMLElement | undefined;
                debounce?: string | number | undefined;
            } & import("vue").HTMLAttributes;
            VaInnerLoading: {
                size?: string | number | undefined;
                preset?: string | undefined;
                readonly color?: string | undefined;
                loading?: boolean | undefined;
                icon?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaInput: {
                label?: string | undefined;
                error?: boolean | undefined;
                preset?: string | undefined;
                name?: string | undefined;
                mask?: string | Record<string, number[]> | import("cleave.js/options").CleaveOptions | undefined;
                readonly pattern?: string | undefined;
                success?: boolean | undefined;
                autofocus?: boolean | undefined;
                type?: import("../../utils/types/prop-type").StringWithAutocomplete<"text" | "password"> | undefined;
                disabled?: boolean | undefined;
                readonly?: boolean | undefined;
                errorMessages?: string | string[] | undefined;
                modelValue?: string | number | null | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                loading?: NonNullable<boolean | undefined> | undefined;
                rules?: import("../../composables").ValidationRule<string>[] | undefined;
                dirty?: boolean | undefined;
                errorCount?: string | number | undefined;
                messages?: string | string[] | undefined;
                immediateValidation?: boolean | undefined;
                background?: string | undefined;
                tabindex?: string | number | undefined;
                requiredMark?: NonNullable<boolean | undefined> | undefined;
                inputAriaLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
                inputAriaLabelledby?: string | undefined;
                inputAriaDescribedby?: string | undefined;
                counter?: boolean | undefined;
                maxLength?: NonNullable<string | number | undefined> | undefined;
                placeholder?: string | undefined;
                innerLabel?: NonNullable<boolean | undefined> | undefined;
                returnRaw?: boolean | undefined;
                inputClass?: string | undefined;
                inputmode?: string | undefined;
                ariaResetLabel?: import("../../composables").TranslationProp | undefined;
                strictBindInputValue?: boolean | undefined;
                clearable?: boolean | undefined;
                clearableIcon?: string | undefined;
                clearValue?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaLayout: {
                left?: {
                    absolute?: boolean | undefined;
                    order?: number | undefined;
                    fixed?: boolean | undefined;
                    overlay?: boolean | undefined;
                } | undefined;
                right?: {
                    absolute?: boolean | undefined;
                    order?: number | undefined;
                    fixed?: boolean | undefined;
                    overlay?: boolean | undefined;
                } | undefined;
                bottom?: {
                    absolute?: boolean | undefined;
                    order?: number | undefined;
                    fixed?: boolean | undefined;
                    overlay?: boolean | undefined;
                } | undefined;
                top?: {
                    absolute?: boolean | undefined;
                    order?: number | undefined;
                    fixed?: boolean | undefined;
                    overlay?: boolean | undefined;
                } | undefined;
                allowBodyScrollOnOverlay?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaInputWrapper: {
                label?: string | undefined;
                error?: boolean | undefined;
                preset?: string | undefined;
                name?: string | undefined;
                success?: boolean | undefined;
                disabled?: boolean | undefined;
                readonly?: boolean | undefined;
                errorMessages?: string | string[] | undefined;
                modelValue?: any;
                color?: string | undefined;
                loading?: boolean | undefined;
                rules?: import("../../composables").ValidationRule<any>[] | undefined;
                dirty?: boolean | undefined;
                errorCount?: string | number | undefined;
                messages?: string | string[] | undefined;
                immediateValidation?: boolean | undefined;
                readonly background?: string | undefined;
                requiredMark?: boolean | undefined;
                inputAriaLabel?: import("../../composables").TranslationProp | undefined;
                readonly inputAriaLabelledby?: string | undefined;
                readonly inputAriaDescribedby?: string | undefined;
                counter?: boolean | undefined;
                maxLength?: string | number | undefined;
                placeholder?: string | undefined;
                innerLabel?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaList: {
                preset?: string | undefined;
                fit?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaListItem: {
                replace?: boolean | undefined;
                preset?: string | undefined;
                append?: boolean | undefined;
                disabled?: boolean | undefined;
                tag?: string | undefined;
                href?: string | undefined;
                to?: string | Record<string, any> | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaListItemLabel: {
                caption?: boolean | undefined;
                preset?: string | undefined;
                lines?: string | number | undefined;
            } & import("vue").HTMLAttributes;
            VaListItemSection: {
                preset?: string | undefined;
                icon?: boolean | undefined;
                avatar?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaListLabel: {
                preset?: string | undefined;
                color?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaListSeparator: {
                preset?: string | undefined;
                fit?: boolean | undefined;
                spaced?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaMessageList: {
                modelValue?: string | string[] | undefined;
                readonly color?: string | undefined;
                limit?: string | number | undefined;
                hasError?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaModal: {
                title?: string | undefined;
                blur?: boolean | undefined;
                size?: import("../../utils/types/prop-type").StringWithAutocomplete<"small" | "medium" | "large" | "auto"> | undefined;
                message?: string | undefined;
                modelValue?: boolean | undefined;
                stateful?: boolean | undefined;
                sizesConfig?: Record<string, any> | undefined;
                readonly anchorClass?: string | undefined;
                zIndex?: string | number | undefined;
                noPadding?: boolean | undefined;
                backgroundColor?: string | undefined;
                closeButton?: boolean | undefined;
                "child:cancelButton"?: NonNullable<Partial<{
                    size: "small" | "medium" | "large";
                    replace: boolean;
                    preset: string;
                    append: boolean;
                    type: string;
                    disabled: boolean;
                    tag: string;
                    href: string;
                    color: string;
                    loading: boolean;
                    to: string | Record<string, any>;
                    exact: boolean;
                    activeClass: string;
                    exactActiveClass: string;
                    target: string;
                    sizesConfig: Record<string, any>;
                    textColor: string;
                    round: boolean;
                    fontSizesConfig: Record<string, any>;
                    icon: string;
                    block: boolean;
                    textOpacity: string | number;
                    backgroundOpacity: string | number;
                    borderColor: string;
                    gradient: boolean;
                    plain: boolean;
                    iconRight: string;
                    iconColor: string;
                    pressedBehavior: "mask" | "opacity";
                    pressedOpacity: number;
                    pressedMaskColor: string;
                    hoverBehavior: "mask" | "opacity";
                    hoverOpacity: string | number;
                    hoverMaskColor: string;
                }> & Omit<{
                    readonly size: "small" | "medium" | "large";
                    readonly type: string;
                    readonly disabled: boolean;
                    readonly tag: string;
                    readonly color: string;
                    readonly loading: boolean;
                    readonly sizesConfig: Record<string, any>;
                    readonly textColor: string;
                    readonly round: boolean;
                    readonly fontSizesConfig: Record<string, any>;
                    readonly icon: string;
                    readonly block: boolean;
                    readonly textOpacity: string | number;
                    readonly backgroundOpacity: string | number;
                    readonly borderColor: string;
                    readonly gradient: boolean;
                    readonly plain: boolean;
                    readonly iconRight: string;
                    readonly iconColor: string;
                    readonly pressedBehavior: "mask" | "opacity";
                    readonly pressedOpacity: number;
                    readonly pressedMaskColor: string;
                    readonly hoverBehavior: "mask" | "opacity";
                    readonly hoverOpacity: string | number;
                    readonly hoverMaskColor: string;
                    readonly replace?: boolean | undefined;
                    readonly preset?: string | undefined;
                    readonly append?: boolean | undefined;
                    readonly href?: string | undefined;
                    readonly to?: string | Record<string, any> | undefined;
                    readonly exact?: boolean | undefined;
                    readonly activeClass?: string | undefined;
                    readonly exactActiveClass?: string | undefined;
                    readonly target?: string | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                    tag: {
                        type: StringConstructor;
                        default: string;
                    };
                    type: {
                        type: StringConstructor;
                        default: string;
                    };
                    block: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                    textColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    textOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    backgroundOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    borderColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    gradient: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    plain: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    round: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    size: {
                        type: PropType<"small" | "medium" | "large">;
                        default: string;
                        validator: (v: string) => boolean;
                    };
                    icon: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconRight: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    to: {
                        type: PropType<string | Record<string, any>>;
                        default: undefined;
                    };
                    replace: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    append: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    exact: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    activeClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    exactActiveClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    href: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    target: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    pressedBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    pressedOpacity: {
                        type: NumberConstructor;
                        default: number;
                    };
                    pressedMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    hoverBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    hoverOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    hoverMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    sizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    fontSizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    preset: {
                        type: StringConstructor;
                        default: undefined;
                    };
                }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
                "child:okButton"?: NonNullable<Partial<{
                    size: "small" | "medium" | "large";
                    replace: boolean;
                    preset: string;
                    append: boolean;
                    type: string;
                    disabled: boolean;
                    tag: string;
                    href: string;
                    color: string;
                    loading: boolean;
                    to: string | Record<string, any>;
                    exact: boolean;
                    activeClass: string;
                    exactActiveClass: string;
                    target: string;
                    sizesConfig: Record<string, any>;
                    textColor: string;
                    round: boolean;
                    fontSizesConfig: Record<string, any>;
                    icon: string;
                    block: boolean;
                    textOpacity: string | number;
                    backgroundOpacity: string | number;
                    borderColor: string;
                    gradient: boolean;
                    plain: boolean;
                    iconRight: string;
                    iconColor: string;
                    pressedBehavior: "mask" | "opacity";
                    pressedOpacity: number;
                    pressedMaskColor: string;
                    hoverBehavior: "mask" | "opacity";
                    hoverOpacity: string | number;
                    hoverMaskColor: string;
                }> & Omit<{
                    readonly size: "small" | "medium" | "large";
                    readonly type: string;
                    readonly disabled: boolean;
                    readonly tag: string;
                    readonly color: string;
                    readonly loading: boolean;
                    readonly sizesConfig: Record<string, any>;
                    readonly textColor: string;
                    readonly round: boolean;
                    readonly fontSizesConfig: Record<string, any>;
                    readonly icon: string;
                    readonly block: boolean;
                    readonly textOpacity: string | number;
                    readonly backgroundOpacity: string | number;
                    readonly borderColor: string;
                    readonly gradient: boolean;
                    readonly plain: boolean;
                    readonly iconRight: string;
                    readonly iconColor: string;
                    readonly pressedBehavior: "mask" | "opacity";
                    readonly pressedOpacity: number;
                    readonly pressedMaskColor: string;
                    readonly hoverBehavior: "mask" | "opacity";
                    readonly hoverOpacity: string | number;
                    readonly hoverMaskColor: string;
                    readonly replace?: boolean | undefined;
                    readonly preset?: string | undefined;
                    readonly append?: boolean | undefined;
                    readonly href?: string | undefined;
                    readonly to?: string | Record<string, any> | undefined;
                    readonly exact?: boolean | undefined;
                    readonly activeClass?: string | undefined;
                    readonly exactActiveClass?: string | undefined;
                    readonly target?: string | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                    tag: {
                        type: StringConstructor;
                        default: string;
                    };
                    type: {
                        type: StringConstructor;
                        default: string;
                    };
                    block: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                    textColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    textOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    backgroundOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    borderColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    gradient: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    plain: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    round: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    size: {
                        type: PropType<"small" | "medium" | "large">;
                        default: string;
                        validator: (v: string) => boolean;
                    };
                    icon: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconRight: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    to: {
                        type: PropType<string | Record<string, any>>;
                        default: undefined;
                    };
                    replace: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    append: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    exact: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    activeClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    exactActiveClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    href: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    target: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    pressedBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    pressedOpacity: {
                        type: NumberConstructor;
                        default: number;
                    };
                    pressedMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    hoverBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    hoverOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    hoverMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    sizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    fontSizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    preset: {
                        type: StringConstructor;
                        default: undefined;
                    };
                }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
                "child:closeButton"?: NonNullable<Partial<{
                    size: string | number;
                    preset: string;
                    name: string;
                    sizesConfig: Record<string, any>;
                    flip: "horizontal" | "vertical" | "off" | "both";
                    fontSizesConfig: Record<string, any>;
                }> & Omit<{
                    readonly size: string | number;
                    readonly name: string;
                    readonly sizesConfig: Record<string, any>;
                    readonly flip: "horizontal" | "vertical" | "off" | "both";
                    readonly fontSizesConfig: Record<string, any>;
                    readonly preset?: string | undefined;
                    readonly tag?: string | undefined;
                    readonly color?: string | undefined;
                    readonly component?: any;
                    readonly rotation?: string | number | undefined;
                    readonly spin?: string | boolean | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                    name: {
                        type: StringConstructor;
                        default: string;
                    };
                    tag: {
                        type: StringConstructor;
                    };
                    component: {
                        type: PropType<any>;
                    };
                    color: {
                        type: StringConstructor;
                    };
                    rotation: {
                        type: (StringConstructor | NumberConstructor)[];
                    };
                    spin: {
                        type: (BooleanConstructor | StringConstructor)[];
                    };
                    flip: {
                        type: PropType<"horizontal" | "vertical" | "off" | "both">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    preset: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    size: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: string;
                        validator: (size: string | number) => boolean;
                    };
                    sizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    fontSizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                }>>, "size" | "preset" | "name" | "sizesConfig" | "flip" | "fontSizesConfig">> | undefined;
                attachElement?: string | undefined;
                allowBodyScroll?: boolean | undefined;
                disableAttachment?: boolean | undefined;
                okText?: import("../../composables").TranslationProp | undefined;
                cancelText?: import("../../composables").TranslationProp | undefined;
                hideDefaultActions?: boolean | undefined;
                fullscreen?: boolean | undefined;
                mobileFullscreen?: boolean | undefined;
                noDismiss?: boolean | undefined;
                noOutsideDismiss?: boolean | undefined;
                noEscDismiss?: boolean | undefined;
                maxWidth?: string | undefined;
                maxHeight?: string | undefined;
                fixedLayout?: boolean | undefined;
                withoutTransitions?: boolean | undefined;
                overlay?: boolean | undefined;
                overlayOpacity?: string | number | undefined;
                showNestedOverlay?: boolean | undefined;
                readonly beforeClose?: ((hide: () => void) => any) | undefined;
                readonly beforeOk?: ((hide: () => void) => any) | undefined;
                readonly beforeCancel?: ((hide: () => void) => any) | undefined;
                ariaCloseLabel?: import("../../composables").TranslationProp | undefined;
            } & import("vue").HTMLAttributes;
            VaNavbar: {
                fixed?: boolean | undefined;
                preset?: string | undefined;
                hideOnScroll?: boolean | undefined;
                bottom?: boolean | undefined;
                color?: string | undefined;
                readonly textColor?: string | undefined;
                bordered?: boolean | undefined;
                shape?: boolean | undefined;
                shadowed?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaNavbarItem: {} & import("vue").HTMLAttributes;
            VaOptionList: {
                error?: boolean | undefined;
                options?: import("../../composables").SelectableOption[] | undefined;
                preset?: string | undefined;
                name?: string | undefined;
                success?: boolean | undefined;
                type?: "switch" | "checkbox" | "radio" | undefined;
                disabled?: boolean | undefined;
                readonly?: boolean | undefined;
                errorMessages?: string | string[] | undefined;
                readonly modelValue?: import("../../composables").SelectableOption | import("../../composables").SelectableOption[];
                stateful?: boolean | undefined;
                color?: string | undefined;
                readonly defaultValue?: import("../../composables").SelectableOption | import("../../composables").SelectableOption[];
                rules?: import("../../composables").ValidationRule<any>[] | undefined;
                dirty?: boolean | undefined;
                errorCount?: string | number | undefined;
                messages?: string | string[] | undefined;
                immediateValidation?: boolean | undefined;
                textBy?: import("../../composables").StringOrFunction | undefined;
                valueBy?: import("../../composables").StringOrFunction | undefined;
                trackBy?: import("../../composables").StringOrFunction | undefined;
                disabledBy?: import("../../composables").StringOrFunction | undefined;
                groupBy?: import("../../composables").StringOrFunction | undefined;
                leftLabel?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaPagination: {
                input?: boolean | undefined;
                size?: "small" | "medium" | "large" | undefined;
                preset?: string | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                disabled?: boolean | undefined;
                modelValue?: number | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                borderColor?: string | undefined;
                rounded?: boolean | undefined;
                visiblePages?: string | number | undefined;
                pages?: string | number | undefined;
                boundaryLinks?: boolean | undefined;
                boundaryNumbers?: boolean | undefined;
                directionLinks?: boolean | undefined;
                hideOnSinglePage?: boolean | undefined;
                total?: string | number | undefined;
                pageSize?: string | number | undefined;
                boundaryIconLeft?: string | undefined;
                boundaryIconRight?: string | undefined;
                directionIconLeft?: string | undefined;
                directionIconRight?: string | undefined;
                gapped?: boolean | undefined;
                activePageColor?: string | undefined;
                activeButtonProps?: NonNullable<Partial<{
                    size: "small" | "medium" | "large";
                    replace: boolean;
                    preset: string;
                    append: boolean;
                    type: string;
                    disabled: boolean;
                    tag: string;
                    href: string;
                    color: string;
                    loading: boolean;
                    to: string | Record<string, any>;
                    exact: boolean;
                    activeClass: string;
                    exactActiveClass: string;
                    target: string;
                    sizesConfig: Record<string, any>;
                    textColor: string;
                    round: boolean;
                    fontSizesConfig: Record<string, any>;
                    icon: string;
                    block: boolean;
                    textOpacity: string | number;
                    backgroundOpacity: string | number;
                    borderColor: string;
                    gradient: boolean;
                    plain: boolean;
                    iconRight: string;
                    iconColor: string;
                    pressedBehavior: "mask" | "opacity";
                    pressedOpacity: number;
                    pressedMaskColor: string;
                    hoverBehavior: "mask" | "opacity";
                    hoverOpacity: string | number;
                    hoverMaskColor: string;
                }> & Omit<{
                    readonly size: "small" | "medium" | "large";
                    readonly type: string;
                    readonly disabled: boolean;
                    readonly tag: string;
                    readonly color: string;
                    readonly loading: boolean;
                    readonly sizesConfig: Record<string, any>;
                    readonly textColor: string;
                    readonly round: boolean;
                    readonly fontSizesConfig: Record<string, any>;
                    readonly icon: string;
                    readonly block: boolean;
                    readonly textOpacity: string | number;
                    readonly backgroundOpacity: string | number;
                    readonly borderColor: string;
                    readonly gradient: boolean;
                    readonly plain: boolean;
                    readonly iconRight: string;
                    readonly iconColor: string;
                    readonly pressedBehavior: "mask" | "opacity";
                    readonly pressedOpacity: number;
                    readonly pressedMaskColor: string;
                    readonly hoverBehavior: "mask" | "opacity";
                    readonly hoverOpacity: string | number;
                    readonly hoverMaskColor: string;
                    readonly replace?: boolean | undefined;
                    readonly preset?: string | undefined;
                    readonly append?: boolean | undefined;
                    readonly href?: string | undefined;
                    readonly to?: string | Record<string, any> | undefined;
                    readonly exact?: boolean | undefined;
                    readonly activeClass?: string | undefined;
                    readonly exactActiveClass?: string | undefined;
                    readonly target?: string | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                    tag: {
                        type: StringConstructor;
                        default: string;
                    };
                    type: {
                        type: StringConstructor;
                        default: string;
                    };
                    block: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                    textColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    textOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    backgroundOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    borderColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    gradient: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    plain: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    round: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    size: {
                        type: PropType<"small" | "medium" | "large">;
                        default: string;
                        validator: (v: string) => boolean;
                    };
                    icon: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconRight: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    to: {
                        type: PropType<string | Record<string, any>>;
                        default: undefined;
                    };
                    replace: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    append: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    exact: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    activeClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    exactActiveClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    href: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    target: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    pressedBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    pressedOpacity: {
                        type: NumberConstructor;
                        default: number;
                    };
                    pressedMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    hoverBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    hoverOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    hoverMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    sizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    fontSizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    preset: {
                        type: StringConstructor;
                        default: undefined;
                    };
                }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
                buttonProps?: NonNullable<Partial<{
                    size: "small" | "medium" | "large";
                    replace: boolean;
                    preset: string;
                    append: boolean;
                    type: string;
                    disabled: boolean;
                    tag: string;
                    href: string;
                    color: string;
                    loading: boolean;
                    to: string | Record<string, any>;
                    exact: boolean;
                    activeClass: string;
                    exactActiveClass: string;
                    target: string;
                    sizesConfig: Record<string, any>;
                    textColor: string;
                    round: boolean;
                    fontSizesConfig: Record<string, any>;
                    icon: string;
                    block: boolean;
                    textOpacity: string | number;
                    backgroundOpacity: string | number;
                    borderColor: string;
                    gradient: boolean;
                    plain: boolean;
                    iconRight: string;
                    iconColor: string;
                    pressedBehavior: "mask" | "opacity";
                    pressedOpacity: number;
                    pressedMaskColor: string;
                    hoverBehavior: "mask" | "opacity";
                    hoverOpacity: string | number;
                    hoverMaskColor: string;
                }> & Omit<{
                    readonly size: "small" | "medium" | "large";
                    readonly type: string;
                    readonly disabled: boolean;
                    readonly tag: string;
                    readonly color: string;
                    readonly loading: boolean;
                    readonly sizesConfig: Record<string, any>;
                    readonly textColor: string;
                    readonly round: boolean;
                    readonly fontSizesConfig: Record<string, any>;
                    readonly icon: string;
                    readonly block: boolean;
                    readonly textOpacity: string | number;
                    readonly backgroundOpacity: string | number;
                    readonly borderColor: string;
                    readonly gradient: boolean;
                    readonly plain: boolean;
                    readonly iconRight: string;
                    readonly iconColor: string;
                    readonly pressedBehavior: "mask" | "opacity";
                    readonly pressedOpacity: number;
                    readonly pressedMaskColor: string;
                    readonly hoverBehavior: "mask" | "opacity";
                    readonly hoverOpacity: string | number;
                    readonly hoverMaskColor: string;
                    readonly replace?: boolean | undefined;
                    readonly preset?: string | undefined;
                    readonly append?: boolean | undefined;
                    readonly href?: string | undefined;
                    readonly to?: string | Record<string, any> | undefined;
                    readonly exact?: boolean | undefined;
                    readonly activeClass?: string | undefined;
                    readonly exactActiveClass?: string | undefined;
                    readonly target?: string | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                    tag: {
                        type: StringConstructor;
                        default: string;
                    };
                    type: {
                        type: StringConstructor;
                        default: string;
                    };
                    block: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                    textColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    textOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    backgroundOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    borderColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    gradient: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    plain: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    round: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    size: {
                        type: PropType<"small" | "medium" | "large">;
                        default: string;
                        validator: (v: string) => boolean;
                    };
                    icon: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconRight: {
                        type: StringConstructor;
                        default: string;
                    };
                    iconColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    to: {
                        type: PropType<string | Record<string, any>>;
                        default: undefined;
                    };
                    replace: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    append: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    exact: {
                        type: BooleanConstructor;
                        default: undefined;
                    };
                    activeClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    exactActiveClass: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    href: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    target: {
                        type: StringConstructor;
                        default: undefined;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    pressedBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    pressedOpacity: {
                        type: NumberConstructor;
                        default: number;
                    };
                    pressedMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    hoverBehavior: {
                        type: PropType<"mask" | "opacity">;
                        default: string;
                        validator: (value: string) => boolean;
                    };
                    hoverOpacity: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: number;
                    };
                    hoverMaskColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    sizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    fontSizesConfig: {
                        type: PropType<Record<string, any>>;
                        default: () => import("../../services/global-config").SizeConfig;
                    };
                    preset: {
                        type: StringConstructor;
                        default: undefined;
                    };
                }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
                buttonsPreset?: string | undefined;
                ariaGoToTheFirstPageLabel?: import("../../composables").TranslationProp | undefined;
                ariaGoToPreviousPageLabel?: import("../../composables").TranslationProp | undefined;
                ariaGoToSpecificPageLabel?: import("../../composables").TranslationProp | undefined;
                ariaGoToSpecificPageInputLabel?: import("../../composables").TranslationProp | undefined;
                ariaGoToNextPageLabel?: import("../../composables").TranslationProp | undefined;
                ariaGoToLastPageLabel?: import("../../composables").TranslationProp | undefined;
            } & import("vue").HTMLAttributes;
            VaParallax: {
                preset?: string | undefined;
                readonly target?: string | HTMLElement | undefined;
                height?: string | number | undefined;
                alt?: string | undefined;
                src?: string | undefined;
                speed?: string | number | undefined;
                reversed?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaPopover: {
                title?: string | undefined;
                anchor?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                preset?: string | undefined;
                message?: string | undefined;
                ariaLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
                role?: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined> | undefined;
                disabled?: NonNullable<boolean | undefined> | undefined;
                readonly?: NonNullable<boolean | undefined> | undefined;
                trigger?: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined> | undefined;
                modelValue?: NonNullable<boolean | undefined> | undefined;
                stateful?: NonNullable<boolean | undefined> | undefined;
                color?: string | undefined;
                target?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                placement?: NonNullable<import("../../composables").PlacementWithAlias | undefined> | undefined;
                hoverOverTimeout?: NonNullable<string | number | undefined> | undefined;
                hoverOutTimeout?: NonNullable<string | number | undefined> | undefined;
                autoPlacement?: NonNullable<boolean | undefined> | undefined;
                stickToEdges?: NonNullable<boolean | undefined> | undefined;
                keepAnchorWidth?: NonNullable<boolean | undefined> | undefined;
                verticalScrollOnOverflow?: NonNullable<boolean | undefined> | undefined;
                anchorSelector?: string | undefined;
                innerAnchorSelector?: string | undefined;
                closeOnFocusOutside?: NonNullable<boolean | undefined> | undefined;
                closeOnAnchorClick?: NonNullable<boolean | undefined> | undefined;
                closeOnContentClick?: NonNullable<boolean | undefined> | undefined;
                isContentHoverable?: NonNullable<boolean | undefined> | undefined;
                offset?: number | [number, number] | undefined;
                cursor?: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined> | undefined;
                teleport?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                keyboardNavigation?: NonNullable<boolean | undefined> | undefined;
                contentClass?: string | undefined;
                readonly textColor?: string | undefined;
                icon?: string | undefined;
                autoHide?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaProgressBar: {
                size?: string | number | undefined;
                reverse?: boolean | undefined;
                preset?: string | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                modelValue?: string | number | undefined;
                color?: string | undefined;
                indeterminate?: boolean | undefined;
                max?: string | number | undefined;
                rounded?: boolean | undefined;
                buffer?: string | number | undefined;
                contentInside?: boolean | undefined;
                showPercent?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaProgressCircle: {
                size?: string | number | undefined;
                preset?: string | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                modelValue?: string | number | undefined;
                color?: string | undefined;
                sizesConfig?: Record<string, any> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                indeterminate?: boolean | undefined;
                thickness?: string | number | undefined;
            } & import("vue").HTMLAttributes;
            VaRadio: {
                label?: string | undefined;
                option?: any;
                error?: boolean | undefined;
                options?: any[] | undefined;
                preset?: string | undefined;
                name?: string | undefined;
                success?: boolean | undefined;
                disabled?: boolean | undefined;
                readonly?: boolean | undefined;
                errorMessages?: string | string[] | undefined;
                modelValue?: any;
                stateful?: boolean | undefined;
                color?: string | undefined;
                loading?: boolean | undefined;
                rules?: import("../../composables").ValidationRule<any>[] | undefined;
                dirty?: boolean | undefined;
                errorCount?: string | number | undefined;
                messages?: string | string[] | undefined;
                immediateValidation?: boolean | undefined;
                textBy?: import("../../composables").StringOrFunction | undefined;
                valueBy?: import("../../composables").StringOrFunction | undefined;
                trackBy?: import("../../composables").StringOrFunction | undefined;
                disabledBy?: import("../../composables").StringOrFunction | undefined;
                groupBy?: import("../../composables").StringOrFunction | undefined;
                vertical?: boolean | undefined;
                indeterminate?: boolean | undefined;
                indeterminateValue?: any;
                arrayValue?: string | number | boolean | Record<string, any> | undefined;
                leftLabel?: boolean | undefined;
                trueValue?: any;
                falseValue?: any;
            } & import("vue").HTMLAttributes;
            VaRating: {
                size?: NonNullable<string | number | undefined> | undefined;
                preset?: string | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                disabled?: NonNullable<boolean | undefined> | undefined;
                readonly?: NonNullable<boolean | undefined> | undefined;
                modelValue?: number | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                sizesConfig?: Record<string, any> | undefined;
                hover?: NonNullable<boolean | undefined> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                tabindex?: NonNullable<string | number | undefined> | undefined;
                clearable?: boolean | undefined;
                icon?: string | undefined;
                max?: string | number | undefined;
                unselectedColor?: string | undefined;
                halfIcon?: string | undefined;
                emptyIcon?: string | undefined;
                halves?: boolean | undefined;
                numbers?: boolean | undefined;
                texts?: string[] | undefined;
                ariaItemLabel?: import("../../composables").TranslationProp | undefined;
            } & import("vue").HTMLAttributes;
            VaSelect: {
                label?: string | undefined;
                search?: string | undefined;
                error?: boolean | undefined;
                anchor?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                options?: import("../../composables").SelectableOption[] | undefined;
                preset?: string | undefined;
                name?: string | undefined;
                success?: boolean | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                role?: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined> | undefined;
                disabled?: NonNullable<boolean | undefined> | undefined;
                readonly?: NonNullable<boolean | undefined> | undefined;
                errorMessages?: string | string[] | undefined;
                trigger?: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined> | undefined;
                modelValue?: import("../../composables").SelectableOption | import("../../composables").SelectableOption[];
                color?: string | undefined;
                loading?: boolean | undefined;
                delay?: number | undefined;
                target?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                rules?: import("../../composables").ValidationRule<import("../../composables").SelectableOption>[] | undefined;
                dirty?: boolean | undefined;
                errorCount?: string | number | undefined;
                messages?: string | string[] | undefined;
                immediateValidation?: boolean | undefined;
                textBy?: import("../../composables").StringOrFunction | undefined;
                valueBy?: import("../../composables").StringOrFunction | undefined;
                trackBy?: import("../../composables").StringOrFunction | undefined;
                disabledBy?: import("../../composables").StringOrFunction | undefined;
                groupBy?: import("../../composables").StringOrFunction | undefined;
                width?: string | undefined;
                placement?: NonNullable<import("../../composables").PlacementWithAlias | undefined> | undefined;
                hoverOverTimeout?: NonNullable<string | number | undefined> | undefined;
                hoverOutTimeout?: NonNullable<string | number | undefined> | undefined;
                autoPlacement?: NonNullable<boolean | undefined> | undefined;
                stickToEdges?: NonNullable<boolean | undefined> | undefined;
                keepAnchorWidth?: NonNullable<boolean | undefined> | undefined;
                verticalScrollOnOverflow?: NonNullable<boolean | undefined> | undefined;
                anchorSelector?: string | undefined;
                closeOnClickOutside?: NonNullable<boolean | undefined> | undefined;
                closeOnFocusOutside?: NonNullable<boolean | undefined> | undefined;
                closeOnAnchorClick?: NonNullable<boolean | undefined> | undefined;
                closeOnContentClick?: NonNullable<boolean | undefined> | undefined;
                isContentHoverable?: NonNullable<boolean | undefined> | undefined;
                offset?: NonNullable<import("../va-dropdown/types").DropdownOffsetProp | undefined> | undefined;
                cursor?: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined> | undefined;
                teleport?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                contentClass?: string | undefined;
                background?: string | undefined;
                closeOnChange?: boolean | undefined;
                isOpen?: boolean | undefined;
                tabindex?: string | number | undefined;
                requiredMark?: NonNullable<boolean | undefined> | undefined;
                inputAriaLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
                inputAriaLabelledby?: string | undefined;
                inputAriaDescribedby?: string | undefined;
                counter?: NonNullable<boolean | undefined> | undefined;
                maxLength?: NonNullable<string | number | undefined> | undefined;
                placeholder?: string | undefined;
                innerLabel?: NonNullable<boolean | undefined> | undefined;
                clearable?: boolean | undefined;
                clearableIcon?: string | undefined;
                clearValue?: string | undefined;
                autocomplete?: boolean | undefined;
                multiple?: boolean | undefined;
                maxHeight?: string | undefined;
                separator?: string | undefined;
                virtualScroller?: boolean | undefined;
                allowCreate?: boolean | "unique" | undefined;
                searchable?: boolean | undefined;
                noOptionsText?: import("../../composables").TranslationProp | undefined;
                hideSelected?: boolean | undefined;
                selectedTopShown?: boolean | undefined;
                highlightMatchedText?: boolean | undefined;
                minSearchChars?: string | number | undefined;
                autoSelectFirstOption?: boolean | undefined;
                searchPlaceholderText?: import("../../composables").TranslationProp | undefined;
                ariaSearchLabel?: import("../../composables").TranslationProp | undefined;
                ariaClearLabel?: import("../../composables").TranslationProp | undefined;
                dropdownIcon?: string | import("..").SelectDropdownIcon | undefined;
                maxVisibleOptions?: number | undefined;
                maxSelections?: string | number | undefined;
            } & import("vue").HTMLAttributes;
            VaSeparator: {} & import("vue").HTMLAttributes;
            VaSkeleton: {
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                tag?: string | undefined;
                color?: string | undefined;
                delay?: string | number | undefined;
                width?: string | undefined;
                height?: string | undefined;
                lines?: string | number | undefined;
                animation?: "none" | "pulse" | "wave" | undefined;
                lineGap?: string | undefined;
                lastLineWidth?: string | undefined;
                variant?: "circle" | "text" | "rounded" | "squared" | undefined;
            } & import("vue").HTMLAttributes;
            VaSkeletonGroup: {
                color?: string | undefined;
                delay?: string | number | undefined;
                lines?: string | number | undefined;
                animation?: "none" | "pulse" | "wave" | undefined;
                lineGap?: string | undefined;
                lastLineWidth?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaSidebar: {
                preset?: string | undefined;
                modelValue?: boolean | undefined;
                color?: string | undefined;
                width?: string | undefined;
                closeOnClickOutside?: boolean | undefined;
                readonly textColor?: string | undefined;
                borderColor?: string | undefined;
                gradient?: boolean | undefined;
                hoverOpacity?: string | number | undefined;
                activeColor?: string | undefined;
                hoverable?: boolean | undefined;
                animated?: string | boolean | undefined;
                hoverColor?: string | undefined;
                minimized?: boolean | undefined;
                minimizedWidth?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaSidebarItem: {
                replace?: boolean | undefined;
                preset?: string | undefined;
                append?: boolean | undefined;
                disabled?: boolean | undefined;
                tag?: string | undefined;
                href?: string | undefined;
                to?: string | Record<string, any> | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: string | undefined;
                textColor?: string | undefined;
                borderColor?: string | undefined;
                hoverOpacity?: string | number | undefined;
                active?: boolean | undefined;
                activeColor?: string | undefined;
                hoverColor?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaSidebarItemContent: {} & import("vue").HTMLAttributes;
            VaSidebarItemTitle: {} & import("vue").HTMLAttributes;
            VaSlider: {
                label?: string | undefined;
                preset?: string | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                disabled?: boolean | undefined;
                readonly?: boolean | undefined;
                modelValue?: number | number[] | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                step?: string | number | undefined;
                vertical?: boolean | undefined;
                max?: string | number | undefined;
                min?: string | number | undefined;
                range?: boolean | undefined;
                readonly trackLabel?: string | ((val: number, order?: number | undefined) => string) | undefined;
                trackColor?: string | undefined;
                labelColor?: string | undefined;
                trackLabelVisible?: boolean | undefined;
                invertLabel?: boolean | undefined;
                pins?: boolean | undefined;
                iconPrepend?: string | undefined;
                iconAppend?: string | undefined;
                showTrack?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaSpacer: {} & import("vue").HTMLAttributes;
            VaSplit: {
                preset?: string | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                disabled?: boolean | undefined;
                modelValue?: number | undefined;
                stateful?: boolean | undefined;
                vertical?: boolean | undefined;
                maximization?: boolean | undefined;
                maximizeStart?: boolean | undefined;
                limits?: [import("../va-split/types").SplitLimit, import("../va-split/types").SplitLimit] | undefined;
                snapping?: import("../va-split/types").SnappingMark[] | undefined;
                snappingRange?: string | number | undefined;
            } & import("vue").HTMLAttributes;
            VaSwitch: {
                label?: string | undefined;
                error?: boolean | undefined;
                size?: "small" | "medium" | "large" | undefined;
                preset?: string | undefined;
                name?: string | undefined;
                success?: boolean | undefined;
                id?: string | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                disabled?: boolean | undefined;
                readonly?: boolean | undefined;
                errorMessages?: string | string[] | undefined;
                modelValue?: string | number | boolean | unknown[] | Record<string, unknown> | null | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                loading?: boolean | undefined;
                rules?: import("../../composables").ValidationRule<any>[] | undefined;
                dirty?: boolean | undefined;
                errorCount?: string | number | undefined;
                messages?: string | string[] | undefined;
                immediateValidation?: boolean | undefined;
                indeterminate?: boolean | undefined;
                indeterminateValue?: any;
                arrayValue?: string | number | boolean | Record<string, any> | undefined;
                leftLabel?: boolean | undefined;
                trueValue?: any;
                falseValue?: any;
                trueLabel?: string | undefined;
                falseLabel?: string | undefined;
                trueInnerLabel?: string | undefined;
                falseInnerLabel?: string | undefined;
                offColor?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaTabs: {
                preset?: string | undefined;
                left?: boolean | undefined;
                center?: boolean | undefined;
                right?: boolean | undefined;
                disabled?: boolean | undefined;
                modelValue?: string | number | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                vertical?: boolean | undefined;
                grow?: boolean | undefined;
                hidePagination?: boolean | undefined;
                hideSlider?: boolean | undefined;
                prevIcon?: string | undefined;
                nextIcon?: string | undefined;
                ariaMoveRightLabel?: import("../../composables").TranslationProp | undefined;
                ariaMoveLeftLabel?: import("../../composables").TranslationProp | undefined;
            } & import("vue").HTMLAttributes;
            VaTab: {
                label?: string | undefined;
                replace?: boolean | undefined;
                preset?: string | undefined;
                readonly name?: string | number | undefined;
                append?: boolean | undefined;
                disabled?: boolean | undefined;
                tag?: string | undefined;
                href?: string | undefined;
                color?: string | undefined;
                to?: string | Record<string, any> | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: string | undefined;
                icon?: string | undefined;
                selected?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaStepper: {
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                modelValue?: number | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                vertical?: boolean | undefined;
                linear?: boolean | undefined;
                steps?: import("../va-stepper/types").Step[] | undefined;
                navigationDisabled?: boolean | undefined;
                controlsHidden?: boolean | undefined;
                nextDisabled?: boolean | undefined;
                nextDisabledOnError?: boolean | undefined;
                finishButtonHidden?: boolean | undefined;
                readonly finishStep?: import("../va-stepper/types").Step | undefined;
            } & import("vue").HTMLAttributes;
            VaTimeInput: {
                label?: string | undefined;
                error?: boolean | undefined;
                anchor?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                preset?: string | undefined;
                name?: string | undefined;
                view?: NonNullable<"hours" | "minutes" | "seconds" | undefined> | undefined;
                success?: boolean | undefined;
                ariaLabel?: import("../../composables").TranslationProp | undefined;
                role?: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined> | undefined;
                disabled?: NonNullable<boolean | undefined> | undefined;
                readonly?: NonNullable<boolean | undefined> | undefined;
                errorMessages?: string | string[] | undefined;
                trigger?: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined> | undefined;
                modelValue?: Date | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                loading?: NonNullable<boolean | undefined> | undefined;
                target?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                rules?: import("../../composables").ValidationRule<Date>[] | undefined;
                dirty?: boolean | undefined;
                errorCount?: string | number | undefined;
                messages?: string | string[] | undefined;
                immediateValidation?: boolean | undefined;
                placement?: NonNullable<import("../../composables").PlacementWithAlias | undefined> | undefined;
                hoverOverTimeout?: NonNullable<string | number | undefined> | undefined;
                hoverOutTimeout?: NonNullable<string | number | undefined> | undefined;
                autoPlacement?: NonNullable<boolean | undefined> | undefined;
                stickToEdges?: NonNullable<boolean | undefined> | undefined;
                keepAnchorWidth?: NonNullable<boolean | undefined> | undefined;
                verticalScrollOnOverflow?: NonNullable<boolean | undefined> | undefined;
                anchorSelector?: string | undefined;
                closeOnClickOutside?: NonNullable<boolean | undefined> | undefined;
                closeOnFocusOutside?: NonNullable<boolean | undefined> | undefined;
                closeOnAnchorClick?: NonNullable<boolean | undefined> | undefined;
                closeOnContentClick?: boolean | undefined;
                isContentHoverable?: NonNullable<boolean | undefined> | undefined;
                offset?: NonNullable<import("../va-dropdown/types").DropdownOffsetProp | undefined> | undefined;
                cursor?: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined> | undefined;
                teleport?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                contentClass?: string | undefined;
                background?: string | undefined;
                closeOnChange?: boolean | undefined;
                isOpen?: boolean | undefined;
                requiredMark?: NonNullable<boolean | undefined> | undefined;
                inputAriaLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
                inputAriaLabelledby?: string | undefined;
                inputAriaDescribedby?: string | undefined;
                counter?: NonNullable<boolean | undefined> | undefined;
                placeholder?: string | undefined;
                innerLabel?: NonNullable<boolean | undefined> | undefined;
                ariaResetLabel?: import("../../composables").TranslationProp | undefined;
                clearable?: boolean | undefined;
                clearableIcon?: string | undefined;
                clearValue?: Date | undefined;
                icon?: string | undefined;
                leftIcon?: boolean | undefined;
                manualInput?: boolean | undefined;
                readonly format?: ((date?: Date | undefined) => string) | undefined;
                readonly parse?: ((input: string) => Date) | undefined;
                ariaToggleDropdownLabel?: import("../../composables").TranslationProp | undefined;
                ampm?: NonNullable<boolean | undefined> | undefined;
                hidePeriodSwitch?: NonNullable<boolean | undefined> | undefined;
                periodUpdatesModelValue?: NonNullable<boolean | undefined> | undefined;
                hoursFilter?: ((h: number) => boolean) | undefined;
                minutesFilter?: ((h: number) => boolean) | undefined;
                secondsFilter?: ((h: number) => boolean) | undefined;
                framed?: NonNullable<boolean | undefined> | undefined;
                cellHeight?: NonNullable<string | number | undefined> | undefined;
                visibleCellsCount?: NonNullable<string | number | undefined> | undefined;
            } & import("vue").HTMLAttributes;
            VaTimeline: {} & import("vue").HTMLAttributes;
            VaTimelineItem: {
                preset?: string | undefined;
                color?: string | undefined;
                vertical?: NonNullable<boolean | undefined> | undefined;
                active?: NonNullable<boolean | undefined> | undefined;
                activePrevious?: NonNullable<boolean | undefined> | undefined;
                activeNext?: NonNullable<boolean | undefined> | undefined;
                isFirst?: boolean | undefined;
                isLast?: boolean | undefined;
                inverted?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaTimePicker: {
                preset?: string | undefined;
                view?: "hours" | "minutes" | "seconds" | undefined;
                disabled?: boolean | undefined;
                readonly?: boolean | undefined;
                readonly modelValue?: Date | undefined;
                stateful?: boolean | undefined;
                ampm?: boolean | undefined;
                hidePeriodSwitch?: boolean | undefined;
                periodUpdatesModelValue?: boolean | undefined;
                readonly hoursFilter?: ((h: number) => boolean) | undefined;
                readonly minutesFilter?: ((h: number) => boolean) | undefined;
                readonly secondsFilter?: ((h: number) => boolean) | undefined;
                framed?: boolean | undefined;
                cellHeight?: string | number | undefined;
                visibleCellsCount?: string | number | undefined;
            } & import("vue").HTMLAttributes;
            VaToast: {
                title?: string | undefined;
                preset?: string | undefined;
                readonly render?: Function | undefined;
                message?: string | Function | undefined;
                role?: import("../../utils/types/prop-type").StringWithAutocomplete<"status" | "alert" | "alertdialog"> | undefined;
                color?: string | undefined;
                duration?: string | number | undefined;
                position?: import("..").ToastPosition | undefined;
                icon?: string | undefined;
                inline?: boolean | undefined;
                ariaCloseLabel?: import("../../composables").TranslationProp | undefined;
                closeable?: boolean | undefined;
                multiLine?: boolean | undefined;
                offsetY?: string | number | undefined;
                offsetX?: string | number | undefined;
                dangerouslyUseHtmlString?: boolean | undefined;
                customClass?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaTreeView: {
                filter?: string | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                textBy?: import("../va-tree-view/types").TreeViewPropKey | undefined;
                valueBy?: import("../va-tree-view/types").TreeViewPropKey | undefined;
                trackBy?: import("../va-tree-view/types").TreeViewPropKey | undefined;
                disabledBy?: import("../va-tree-view/types").TreeViewPropKey | undefined;
                checked?: (string | number | import("..").TreeNode)[] | undefined;
                expanded?: (string | number | import("..").TreeNode)[] | undefined;
                selectable?: boolean | undefined;
                filterMethod?: import("../va-tree-view/types").TreeViewFilterMethod | undefined;
                nodes?: import("..").TreeNode[] | undefined;
                selectionType?: string | undefined;
                iconBy?: import("../va-tree-view/types").TreeViewPropKey | undefined;
                expandedBy?: import("../va-tree-view/types").TreeViewPropKey | undefined;
                checkedBy?: import("../va-tree-view/types").TreeViewPropKey | undefined;
                childrenBy?: import("../va-tree-view/types").TreeViewPropKey | undefined;
                expandAll?: boolean | undefined;
                expandNodeBy?: "leaf" | "node" | undefined;
            } & import("vue").HTMLAttributes;
            VaScrollContainer: {
                size?: "small" | "medium" | "large" | undefined;
                color?: string | undefined;
                sizesConfig?: Record<string, any> | undefined;
                horizontal?: boolean | undefined;
                vertical?: boolean | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                gradient?: boolean | undefined;
                rtl?: boolean | undefined;
            } & import("vue").HTMLAttributes;
            VaViewer: {} & import("vue").HTMLAttributes;
            VaValue: {
                defaultValue?: any;
            } & import("vue").HTMLAttributes;
            VaVirtualScroller: {} & import("vue").HTMLAttributes;
            VaTextarea: {
                label?: string | undefined;
                error?: boolean | undefined;
                resize?: boolean | undefined;
                preset?: string | undefined;
                name?: string | undefined;
                success?: boolean | undefined;
                disabled?: NonNullable<boolean | undefined> | undefined;
                readonly?: NonNullable<boolean | undefined> | undefined;
                errorMessages?: string | string[] | undefined;
                modelValue?: string | number | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                loading?: NonNullable<boolean | undefined> | undefined;
                rules?: import("../../composables").ValidationRule<any>[] | undefined;
                dirty?: boolean | undefined;
                errorCount?: string | number | undefined;
                messages?: string | string[] | undefined;
                immediateValidation?: boolean | undefined;
                background?: string | undefined;
                requiredMark?: NonNullable<boolean | undefined> | undefined;
                inputAriaLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
                inputAriaLabelledby?: string | undefined;
                inputAriaDescribedby?: string | undefined;
                counter?: NonNullable<boolean | undefined> | undefined;
                maxLength?: NonNullable<string | number | undefined> | undefined;
                readonly placeholder?: string | undefined;
                innerLabel?: NonNullable<boolean | undefined> | undefined;
                clearValue?: string | undefined;
                autosize?: boolean | undefined;
                minRows?: string | number | undefined;
                readonly maxRows?: string | number | undefined;
            } & import("vue").HTMLAttributes;
            VaMenu: {
                anchor?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                options?: import("../va-menu-list/types").VaMenuOption[] | undefined;
                preset?: string | undefined;
                ariaLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
                role?: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined> | undefined;
                disabled?: NonNullable<boolean | undefined> | undefined;
                readonly?: NonNullable<boolean | undefined> | undefined;
                trigger?: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined> | undefined;
                modelValue?: NonNullable<boolean | undefined> | undefined;
                stateful?: NonNullable<boolean | undefined> | undefined;
                target?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                textBy?: NonNullable<import("../../composables").StringOrFunction | undefined> | undefined;
                valueBy?: NonNullable<import("../../composables").StringOrFunction | undefined> | undefined;
                trackBy?: NonNullable<import("../../composables").StringOrFunction | undefined> | undefined;
                disabledBy?: NonNullable<import("../../composables").StringOrFunction | undefined> | undefined;
                groupBy?: NonNullable<import("../../composables").StringOrFunction | undefined> | undefined;
                placement?: NonNullable<import("../../composables").PlacementWithAlias | undefined> | undefined;
                hoverOverTimeout?: NonNullable<string | number | undefined> | undefined;
                hoverOutTimeout?: NonNullable<string | number | undefined> | undefined;
                autoPlacement?: NonNullable<boolean | undefined> | undefined;
                stickToEdges?: boolean | undefined;
                keepAnchorWidth?: NonNullable<boolean | undefined> | undefined;
                verticalScrollOnOverflow?: NonNullable<boolean | undefined> | undefined;
                anchorSelector?: string | undefined;
                innerAnchorSelector?: string | undefined;
                closeOnClickOutside?: NonNullable<boolean | undefined> | undefined;
                closeOnFocusOutside?: NonNullable<boolean | undefined> | undefined;
                closeOnAnchorClick?: NonNullable<boolean | undefined> | undefined;
                closeOnContentClick?: NonNullable<boolean | undefined> | undefined;
                isContentHoverable?: NonNullable<boolean | undefined> | undefined;
                offset?: NonNullable<import("../va-dropdown/types").DropdownOffsetProp | undefined> | undefined;
                cursor?: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined> | undefined;
                teleport?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
                keyboardNavigation?: NonNullable<boolean | undefined> | undefined;
                contentClass?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaMenuList: {
                options?: import("../va-menu-list/types").VaMenuOption[] | undefined;
                textBy?: import("../../composables").StringOrFunction | undefined;
                valueBy?: import("../../composables").StringOrFunction | undefined;
                trackBy?: import("../../composables").StringOrFunction | undefined;
                disabledBy?: import("../../composables").StringOrFunction | undefined;
                groupBy?: import("../../composables").StringOrFunction | undefined;
            } & import("vue").HTMLAttributes;
            VaMenuItem: {
                name?: string | undefined;
                disabled?: boolean | undefined;
                readonly icon?: string | undefined;
                readonly rightIcon?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaMenuGroup: {
                color?: string | undefined;
                readonly groupName?: string | undefined;
            } & import("vue").HTMLAttributes;
            VaFormField: {} & import("vue").HTMLAttributes;
        } & {
            all: import("../../services/component-config").Props;
            presets: import("../../services/component-config").Presets;
        }>>;
        default: () => {};
    };
    colors: {
        type: PropType<{
            variables?: {
                [x: string]: string | undefined;
                primary?: string | undefined;
                secondary?: string | undefined;
                success?: string | undefined;
                info?: string | undefined;
                danger?: string | undefined;
                warning?: string | undefined;
                backgroundPrimary?: string | undefined;
                backgroundSecondary?: string | undefined;
                backgroundElement?: string | undefined;
                backgroundBorder?: string | undefined;
                textPrimary?: string | undefined;
                textInverted?: string | undefined;
                shadow?: string | undefined;
                focus?: string | undefined;
                transparent?: string | undefined;
                onFocus?: string | undefined;
                onPrimary?: string | undefined;
                onDanger?: string | undefined;
                onSuccess?: string | undefined;
                onSecondary?: string | undefined;
                onInfo?: string | undefined;
                onWarning?: string | undefined;
                onBackgroundPrimary?: string | undefined;
                onBackgroundSecondary?: string | undefined;
                onBackgroundElement?: string | undefined;
                onBackgroundBorder?: string | undefined;
                onTextPrimary?: string | undefined;
                onTextInverted?: string | undefined;
                onShadow?: string | undefined;
                onTransparent?: string | undefined;
            } | undefined;
            threshold?: number | undefined;
            presets?: {
                [x: string]: {
                    [x: string]: string | undefined;
                    primary?: string | undefined;
                    secondary?: string | undefined;
                    success?: string | undefined;
                    info?: string | undefined;
                    danger?: string | undefined;
                    warning?: string | undefined;
                    backgroundPrimary?: string | undefined;
                    backgroundSecondary?: string | undefined;
                    backgroundElement?: string | undefined;
                    backgroundBorder?: string | undefined;
                    textPrimary?: string | undefined;
                    textInverted?: string | undefined;
                    shadow?: string | undefined;
                    focus?: string | undefined;
                    transparent?: string | undefined;
                    onFocus?: string | undefined;
                    onPrimary?: string | undefined;
                    onDanger?: string | undefined;
                    onSuccess?: string | undefined;
                    onSecondary?: string | undefined;
                    onInfo?: string | undefined;
                    onWarning?: string | undefined;
                    onBackgroundPrimary?: string | undefined;
                    onBackgroundSecondary?: string | undefined;
                    onBackgroundElement?: string | undefined;
                    onBackgroundBorder?: string | undefined;
                    onTextPrimary?: string | undefined;
                    onTextInverted?: string | undefined;
                    onShadow?: string | undefined;
                    onTransparent?: string | undefined;
                } | undefined;
                light?: {
                    [x: string]: string | undefined;
                    primary?: string | undefined;
                    secondary?: string | undefined;
                    success?: string | undefined;
                    info?: string | undefined;
                    danger?: string | undefined;
                    warning?: string | undefined;
                    backgroundPrimary?: string | undefined;
                    backgroundSecondary?: string | undefined;
                    backgroundElement?: string | undefined;
                    backgroundBorder?: string | undefined;
                    textPrimary?: string | undefined;
                    textInverted?: string | undefined;
                    shadow?: string | undefined;
                    focus?: string | undefined;
                    transparent?: string | undefined;
                    onFocus?: string | undefined;
                    onPrimary?: string | undefined;
                    onDanger?: string | undefined;
                    onSuccess?: string | undefined;
                    onSecondary?: string | undefined;
                    onInfo?: string | undefined;
                    onWarning?: string | undefined;
                    onBackgroundPrimary?: string | undefined;
                    onBackgroundSecondary?: string | undefined;
                    onBackgroundElement?: string | undefined;
                    onBackgroundBorder?: string | undefined;
                    onTextPrimary?: string | undefined;
                    onTextInverted?: string | undefined;
                    onShadow?: string | undefined;
                    onTransparent?: string | undefined;
                } | undefined;
                dark?: {
                    [x: string]: string | undefined;
                    primary?: string | undefined;
                    secondary?: string | undefined;
                    success?: string | undefined;
                    info?: string | undefined;
                    danger?: string | undefined;
                    warning?: string | undefined;
                    backgroundPrimary?: string | undefined;
                    backgroundSecondary?: string | undefined;
                    backgroundElement?: string | undefined;
                    backgroundBorder?: string | undefined;
                    textPrimary?: string | undefined;
                    textInverted?: string | undefined;
                    shadow?: string | undefined;
                    focus?: string | undefined;
                    transparent?: string | undefined;
                    onFocus?: string | undefined;
                    onPrimary?: string | undefined;
                    onDanger?: string | undefined;
                    onSuccess?: string | undefined;
                    onSecondary?: string | undefined;
                    onInfo?: string | undefined;
                    onWarning?: string | undefined;
                    onBackgroundPrimary?: string | undefined;
                    onBackgroundSecondary?: string | undefined;
                    onBackgroundElement?: string | undefined;
                    onBackgroundBorder?: string | undefined;
                    onTextPrimary?: string | undefined;
                    onTextInverted?: string | undefined;
                    onShadow?: string | undefined;
                    onTransparent?: string | undefined;
                } | undefined;
            } | undefined;
            currentPresetName?: string | undefined;
        } | undefined>;
    };
    i18n: {
        type: PropType<{
            [x: string]: string | undefined;
            progress?: string | undefined;
            search?: string | undefined;
            cancel?: string | undefined;
            close?: string | undefined;
            reset?: string | undefined;
            switch?: string | undefined;
            carousel?: string | undefined;
            pagination?: string | undefined;
            breadcrumbs?: string | undefined;
            color?: string | undefined;
            step?: string | undefined;
            noOptions?: string | undefined;
            ok?: string | undefined;
            uploadFile?: string | undefined;
            undo?: string | undefined;
            dropzone?: string | undefined;
            fileDeleted?: string | undefined;
            closeAlert?: string | undefined;
            backToTop?: string | undefined;
            toggleDropdown?: string | undefined;
            goPreviousSlide?: string | undefined;
            goNextSlide?: string | undefined;
            goSlide?: string | undefined;
            slideOf?: string | undefined;
            openColorPicker?: string | undefined;
            colorSelection?: string | undefined;
            colorName?: string | undefined;
            decreaseCounter?: string | undefined;
            increaseCounter?: string | undefined;
            selectAllRows?: string | undefined;
            sortColumnBy?: string | undefined;
            selectRowByIndex?: string | undefined;
            resetDate?: string | undefined;
            nextPeriod?: string | undefined;
            switchView?: string | undefined;
            previousPeriod?: string | undefined;
            removeFile?: string | undefined;
            goToTheFirstPage?: string | undefined;
            goToPreviousPage?: string | undefined;
            goToSpecificPage?: string | undefined;
            goToSpecificPageInput?: string | undefined;
            goNextPage?: string | undefined;
            goLastPage?: string | undefined;
            currentRating?: string | undefined;
            voteRating?: string | undefined;
            optionsFilter?: string | undefined;
            splitPanels?: string | undefined;
            movePaginationLeft?: string | undefined;
            movePaginationRight?: string | undefined;
            resetTime?: string | undefined;
            closeToast?: string | undefined;
            selectedOption?: string | undefined;
            noSelectedOption?: string | undefined;
            counterValue?: string | undefined;
            selectedDate?: string | undefined;
            selectedTime?: string | undefined;
            progressState?: string | undefined;
            next?: string | undefined;
            back?: string | undefined;
            finish?: string | undefined;
            loading?: string | undefined;
            sliderValue?: string | undefined;
            inputField?: string | undefined;
            fileTypeIncorrect?: string | undefined;
        } | undefined>;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>>, {
    preset: string;
    components: Partial<{
        VaAccordion: {
            preset?: string | undefined;
            modelValue?: boolean[] | undefined;
            stateful?: boolean | undefined;
            multiple?: boolean | undefined;
            inset?: boolean | undefined;
            popout?: boolean | undefined;
        } & import("vue").HTMLAttributes;
        VaAffix: {
            preset?: string | undefined;
            offsetTop?: string | number | undefined;
            target?: Window | HTMLElement | (() => Window | HTMLElement) | undefined;
            offsetBottom?: string | number | undefined;
        } & import("vue").HTMLAttributes;
        VaAlert: {
            title?: string | undefined;
            preset?: string | undefined;
            center?: boolean | undefined;
            modelValue?: boolean | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            textColor?: string | undefined;
            icon?: string | undefined;
            borderColor?: string | undefined;
            description?: string | undefined;
            closeText?: string | undefined;
            closeable?: boolean | undefined;
            dense?: boolean | undefined;
            outline?: boolean | undefined;
            border?: "" | "left" | "right" | "bottom" | "top" | undefined;
            closeIcon?: string | undefined;
        } & import("vue").HTMLAttributes;
        VaAppBar: {
            fixed?: boolean | undefined;
            preset?: string | undefined;
            hideOnScroll?: boolean | undefined;
            bottom?: boolean | undefined;
            color?: string | undefined;
            target?: string | HTMLElement | undefined;
            gradient?: boolean | undefined;
            shadowOnScroll?: boolean | undefined;
            shadowColor?: string | undefined;
        } & import("vue").HTMLAttributes;
        VaAspectRatio: {
            preset?: string | undefined;
            maxWidth?: string | number | undefined;
            ratio?: number | import("../../utils/types/prop-type").StringWithAutocomplete<"auto"> | undefined;
            contentHeight?: string | number | undefined;
            contentWidth?: string | number | undefined;
        } & import("vue").HTMLAttributes;
        VaAvatar: {
            size?: string | number | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            loading?: boolean | undefined;
            sizesConfig?: Record<string, any> | undefined;
            fontSize?: string | undefined;
            readonly textColor?: string | undefined;
            fontSizesConfig?: Record<string, any> | undefined;
            icon?: string | undefined;
            alt?: string | undefined;
            src?: string | undefined;
            fallbackSrc?: string | undefined;
            fallbackText?: string | undefined;
            fallbackIcon?: string | undefined;
            fallbackRender?: (() => any) | undefined;
            square?: boolean | undefined;
        } & import("vue").HTMLAttributes;
        VaAvatarGroup: {
            size?: NonNullable<string | number | undefined> | undefined;
            options?: Record<string, unknown>[] | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            loading?: NonNullable<boolean | undefined> | undefined;
            sizesConfig?: Record<string, any> | undefined;
            fontSize?: string | undefined;
            vertical?: boolean | undefined;
            textColor?: string | undefined;
            fontSizesConfig?: Record<string, any> | undefined;
            icon?: string | undefined;
            alt?: string | undefined;
            max?: string | number | undefined;
            src?: string | undefined;
            fallbackSrc?: string | undefined;
            fallbackText?: string | undefined;
            fallbackIcon?: string | undefined;
            fallbackRender?: (() => any) | undefined;
            square?: NonNullable<boolean | undefined> | undefined;
            restColor?: string | undefined;
        } & import("vue").HTMLAttributes;
        VaBacktop: {
            preset?: string | undefined;
            ariaLabel?: import("../../composables").TranslationProp | undefined;
            color?: string | undefined;
            target?: string | Element | undefined;
            visibilityHeight?: string | number | undefined;
            speed?: string | number | undefined;
            verticalOffset?: string | undefined;
            horizontalOffset?: string | undefined;
            horizontalPosition?: "left" | "right" | undefined;
            verticalPosition?: "bottom" | "top" | undefined;
        } & import("vue").HTMLAttributes;
        VaBadge: {
            preset?: string | undefined;
            text?: string | number | undefined;
            transparent?: boolean | undefined;
            color?: string | undefined;
            placement?: import("../../composables").PlacementWithAlias | undefined;
            offset?: import("../va-badge/types").BadgeOffsetProp | undefined;
            readonly textColor?: string | undefined;
            overlap?: boolean | undefined;
            multiLine?: boolean | undefined;
            visibleEmpty?: boolean | undefined;
            dot?: boolean | undefined;
        } & import("vue").HTMLAttributes;
        VaBreadcrumbs: {
            preset?: string | undefined;
            ariaLabel?: import("../../composables").TranslationProp | undefined;
            color?: string | undefined;
            vertical?: boolean | undefined;
            align?: string | undefined;
            separator?: string | undefined;
            disabledColor?: string | undefined;
            activeColor?: string | undefined;
            separatorColor?: string | undefined;
        } & import("vue").HTMLAttributes;
        VaBreadcrumbsItem: {
            label?: string | undefined;
            replace?: boolean | undefined;
            append?: boolean | undefined;
            disabled?: boolean | undefined;
            tag?: string | undefined;
            href?: string | undefined;
            to?: string | Record<string, any> | undefined;
            exact?: boolean | undefined;
            activeClass?: string | undefined;
            exactActiveClass?: string | undefined;
            target?: string | undefined;
        } & import("vue").HTMLAttributes;
        VaButton: {
            size?: "small" | "medium" | "large" | undefined;
            replace?: boolean | undefined;
            preset?: string | undefined;
            append?: boolean | undefined;
            type?: string | undefined;
            disabled?: boolean | undefined;
            tag?: string | undefined;
            href?: string | undefined;
            color?: string | undefined;
            loading?: boolean | undefined;
            to?: string | Record<string, any> | undefined;
            exact?: boolean | undefined;
            activeClass?: string | undefined;
            exactActiveClass?: string | undefined;
            target?: string | undefined;
            sizesConfig?: Record<string, any> | undefined;
            textColor?: string | undefined;
            round?: boolean | undefined;
            fontSizesConfig?: Record<string, any> | undefined;
            icon?: string | undefined;
            block?: boolean | undefined;
            textOpacity?: string | number | undefined;
            backgroundOpacity?: string | number | undefined;
            borderColor?: string | undefined;
            gradient?: boolean | undefined;
            plain?: boolean | undefined;
            iconRight?: string | undefined;
            iconColor?: string | undefined;
            pressedBehavior?: "mask" | "opacity" | undefined;
            pressedOpacity?: number | undefined;
            pressedMaskColor?: string | undefined;
            hoverBehavior?: "mask" | "opacity" | undefined;
            hoverOpacity?: string | number | undefined;
            hoverMaskColor?: string | undefined;
        } & import("vue").HTMLAttributes;
        VaButtonDropdown: {
            readonly label?: string | undefined;
            size?: NonNullable<"small" | "medium" | "large" | undefined> | undefined;
            replace?: NonNullable<boolean | undefined> | undefined;
            split?: boolean | undefined;
            anchor?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
            preset?: string | undefined;
            ariaLabel?: import("../../composables").TranslationProp | undefined;
            role?: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined> | undefined;
            append?: NonNullable<boolean | undefined> | undefined;
            type?: string | undefined;
            disabled?: boolean | undefined;
            readonly?: NonNullable<boolean | undefined> | undefined;
            tag?: string | undefined;
            trigger?: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined> | undefined;
            modelValue?: boolean | undefined;
            stateful?: boolean | undefined;
            href?: string | undefined;
            color?: string | undefined;
            loading?: boolean | undefined;
            to?: NonNullable<string | Record<string, any> | undefined> | undefined;
            exact?: NonNullable<boolean | undefined> | undefined;
            activeClass?: string | undefined;
            exactActiveClass?: string | undefined;
            target?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
            sizesConfig?: Record<string, any> | undefined;
            placement?: import("../../composables").PlacementWithAlias | undefined;
            hoverOverTimeout?: NonNullable<string | number | undefined> | undefined;
            hoverOutTimeout?: NonNullable<string | number | undefined> | undefined;
            autoPlacement?: NonNullable<boolean | undefined> | undefined;
            stickToEdges?: NonNullable<boolean | undefined> | undefined;
            keepAnchorWidth?: boolean | undefined;
            verticalScrollOnOverflow?: NonNullable<boolean | undefined> | undefined;
            anchorSelector?: string | undefined;
            innerAnchorSelector?: string | undefined;
            closeOnClickOutside?: NonNullable<boolean | undefined> | undefined;
            closeOnFocusOutside?: NonNullable<boolean | undefined> | undefined;
            closeOnAnchorClick?: NonNullable<boolean | undefined> | undefined;
            closeOnContentClick?: boolean | undefined;
            isContentHoverable?: NonNullable<boolean | undefined> | undefined;
            offset?: number | [number, number] | undefined;
            cursor?: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined> | undefined;
            teleport?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
            keyboardNavigation?: NonNullable<boolean | undefined> | undefined;
            contentClass?: string | undefined;
            textColor?: string | undefined;
            round?: NonNullable<boolean | undefined> | undefined;
            fontSizesConfig?: Record<string, any> | undefined;
            icon?: string | undefined;
            textOpacity?: NonNullable<string | number | undefined> | undefined;
            backgroundOpacity?: NonNullable<string | number | undefined> | undefined;
            borderColor?: string | undefined;
            gradient?: NonNullable<boolean | undefined> | undefined;
            plain?: NonNullable<boolean | undefined> | undefined;
            iconColor?: string | undefined;
            pressedBehavior?: NonNullable<"mask" | "opacity" | undefined> | undefined;
            pressedOpacity?: number | undefined;
            pressedMaskColor?: string | undefined;
            hoverBehavior?: NonNullable<"mask" | "opacity" | undefined> | undefined;
            hoverOpacity?: NonNullable<string | number | undefined> | undefined;
            hoverMaskColor?: string | undefined;
            leftIcon?: boolean | undefined;
            openedIcon?: string | undefined;
            hideIcon?: boolean | undefined;
            disableButton?: boolean | undefined;
            disableDropdown?: boolean | undefined;
            splitTo?: string | undefined;
            splitHref?: string | undefined;
        } & import("vue").HTMLAttributes;
        VaButtonGroup: {
            size?: NonNullable<"small" | "medium" | "large" | undefined> | undefined;
            replace?: NonNullable<boolean | undefined> | undefined;
            preset?: string | undefined;
            append?: NonNullable<boolean | undefined> | undefined;
            type?: string | undefined;
            disabled?: NonNullable<boolean | undefined> | undefined;
            tag?: string | undefined;
            href?: string | undefined;
            color?: string | undefined;
            loading?: NonNullable<boolean | undefined> | undefined;
            to?: NonNullable<string | Record<string, any> | undefined> | undefined;
            exact?: NonNullable<boolean | undefined> | undefined;
            activeClass?: string | undefined;
            exactActiveClass?: string | undefined;
            target?: string | undefined;
            sizesConfig?: Record<string, any> | undefined;
            textColor?: string | undefined;
            round?: NonNullable<boolean | undefined> | undefined;
            fontSizesConfig?: Record<string, any> | undefined;
            icon?: string | undefined;
            textOpacity?: NonNullable<string | number | undefined> | undefined;
            backgroundOpacity?: NonNullable<string | number | undefined> | undefined;
            borderColor?: string | undefined;
            gradient?: boolean | undefined;
            plain?: NonNullable<boolean | undefined> | undefined;
            iconRight?: string | undefined;
            iconColor?: string | undefined;
            pressedBehavior?: NonNullable<"mask" | "opacity" | undefined> | undefined;
            pressedOpacity?: number | undefined;
            pressedMaskColor?: string | undefined;
            hoverBehavior?: NonNullable<"mask" | "opacity" | undefined> | undefined;
            hoverOpacity?: NonNullable<string | number | undefined> | undefined;
            hoverMaskColor?: string | undefined;
            grow?: boolean | undefined;
        } & import("vue").HTMLAttributes;
        VaButtonToggle: {
            size?: NonNullable<NonNullable<"small" | "medium" | "large" | undefined> | undefined> | undefined;
            replace?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            readonly options?: import("..").ButtonOption[] | undefined;
            preset?: string | undefined;
            append?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            type?: string | undefined;
            disabled?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            tag?: string | undefined;
            modelValue?: string | number | boolean | undefined;
            href?: string | undefined;
            color?: string | undefined;
            loading?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            to?: NonNullable<NonNullable<string | Record<string, any> | undefined> | undefined> | undefined;
            exact?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            activeClass?: string | undefined;
            exactActiveClass?: string | undefined;
            target?: string | undefined;
            textBy?: import("../../composables").StringOrFunction | undefined;
            valueBy?: import("../../composables").StringOrFunction | undefined;
            trackBy?: import("../../composables").StringOrFunction | undefined;
            disabledBy?: import("../../composables").StringOrFunction | undefined;
            groupBy?: import("../../composables").StringOrFunction | undefined;
            sizesConfig?: Record<string, any> | undefined;
            textColor?: string | undefined;
            round?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            fontSizesConfig?: Record<string, any> | undefined;
            icon?: string | undefined;
            textOpacity?: NonNullable<NonNullable<string | number | undefined> | undefined> | undefined;
            backgroundOpacity?: NonNullable<NonNullable<string | number | undefined> | undefined> | undefined;
            borderColor?: string | undefined;
            gradient?: NonNullable<boolean | undefined> | undefined;
            plain?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            iconRight?: string | undefined;
            iconColor?: string | undefined;
            pressedBehavior?: NonNullable<NonNullable<"mask" | "opacity" | undefined> | undefined> | undefined;
            pressedOpacity?: number | undefined;
            pressedMaskColor?: string | undefined;
            hoverBehavior?: NonNullable<NonNullable<"mask" | "opacity" | undefined> | undefined> | undefined;
            hoverOpacity?: NonNullable<NonNullable<string | number | undefined> | undefined> | undefined;
            hoverMaskColor?: string | undefined;
            grow?: NonNullable<boolean | undefined> | undefined;
            readonly activeButtonTextColor?: string | undefined;
            toggleColor?: string | undefined;
        } & import("vue").HTMLAttributes;
        VaCard: {
            replace?: boolean | undefined;
            preset?: string | undefined;
            append?: boolean | undefined;
            disabled?: boolean | undefined;
            tag?: string | undefined;
            href?: string | undefined;
            color?: string | undefined;
            to?: string | Record<string, any> | undefined;
            exact?: boolean | undefined;
            activeClass?: string | undefined;
            exactActiveClass?: string | undefined;
            target?: string | undefined;
            readonly textColor?: string | undefined;
            gradient?: boolean | undefined;
            square?: boolean | undefined;
            outlined?: boolean | undefined;
            bordered?: boolean | undefined;
            stripe?: boolean | undefined;
            stripeColor?: string | undefined;
        } & import("vue").HTMLAttributes;
        VaCardBlock: {
            horizontal?: boolean | undefined;
        } & import("vue").HTMLAttributes;
        VaCardActions: {
            preset?: string | undefined;
            vertical?: boolean | undefined;
            align?: string | undefined;
        } & import("vue").HTMLAttributes;
        VaCardContent: {} & import("vue").HTMLAttributes;
        VaCardTitle: {
            preset?: string | undefined;
            readonly textColor?: string | undefined;
        } & import("vue").HTMLAttributes;
        VaCarousel: {
            title?: string | undefined;
            preset?: string | undefined;
            draggable?: NonNullable<boolean | undefined> | undefined;
            ariaLabel?: import("../../composables").TranslationProp | undefined;
            modelValue?: number | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            loading?: NonNullable<"lazy" | "eager" | undefined> | undefined;
            sizes?: string | undefined;
            vertical?: boolean | undefined;
            swipable?: boolean | undefined;
            swipeDistance?: number | undefined;
            swipeDirection?: ("all" | ("" | "left" | "right" | "up" | "down") | "horizontal" | "vertical") | undefined;
            height?: string | undefined;
            crossorigin?: NonNullable<"anonymous" | "use-credentials" | undefined> | undefined;
            fallbackSrc?: string | undefined;
            fallbackText?: string | undefined;
            fallbackIcon?: string | undefined;
            fallbackRender?: (() => any) | undefined;
            maxWidth?: NonNullable<string | number | undefined> | undefined;
            readonly items?: any[] | undefined;
            readonly ratio?: string | number | undefined;
            lazy?: NonNullable<boolean | undefined> | undefined;
            fit?: NonNullable<"fill" | "none" | "contain" | "cover" | "scale-down" | undefined> | undefined;
            placeholderSrc?: string | undefined;
            srcset?: string | undefined;
            decoding?: NonNullable<"auto" | "sync" | "async" | undefined> | undefined;
            fetchpriority?: NonNullable<"auto" | "high" | "low" | undefined> | undefined;
            referrerpolicy?: NonNullable<"origin" | "no-referrer" | "no-referrer-when-downgrade" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url" | undefined> | undefined;
            autoscroll?: boolean | undefined;
            autoscrollInterval?: string | number | undefined;
            autoscrollPauseDuration?: string | number | undefined;
            infinite?: boolean | undefined;
            fadeKeyframe?: string | undefined;
            arrows?: boolean | undefined;
            indicators?: boolean | undefined;
            indicatorTrigger?: "click" | "hover" | "none" | undefined;
            effect?: "transition" | "fade" | undefined;
            ariaPreviousLabel?: import("../../composables").TranslationProp | undefined;
            ariaNextLabel?: import("../../composables").TranslationProp | undefined;
            ariaGoToSlideLabel?: import("../../composables").TranslationProp | undefined;
            ariaSlideOfLabel?: import("../../composables").TranslationProp | undefined;
        } & import("vue").HTMLAttributes;
        VaCheckbox: {
            label?: string | undefined;
            error?: boolean | undefined;
            preset?: string | undefined;
            name?: string | undefined;
            success?: boolean | undefined;
            id?: string | undefined;
            ariaLabel?: string | undefined;
            disabled?: boolean | undefined;
            readonly?: boolean | undefined;
            errorMessages?: string | string[] | undefined;
            modelValue?: string | number | boolean | unknown[] | Record<any, unknown> | null | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            loading?: boolean | undefined;
            rules?: import("../../composables").ValidationRule<any>[] | undefined;
            dirty?: boolean | undefined;
            errorCount?: string | number | undefined;
            messages?: string | string[] | undefined;
            immediateValidation?: boolean | undefined;
            vertical?: boolean | undefined;
            indeterminate?: boolean | undefined;
            checkedIcon?: string | undefined;
            indeterminateValue?: string | number | boolean | unknown[] | Record<any, unknown> | null | undefined;
            indeterminateIcon?: string | undefined;
            arrayValue?: string | number | boolean | Record<string, any> | undefined;
            leftLabel?: boolean | undefined;
            trueValue?: any;
            falseValue?: any;
        } & import("vue").HTMLAttributes;
        VaChip: {
            size?: "small" | "medium" | "large" | undefined;
            flat?: boolean | undefined;
            replace?: boolean | undefined;
            preset?: string | undefined;
            shadow?: boolean | undefined;
            append?: boolean | undefined;
            disabled?: boolean | undefined;
            readonly?: boolean | undefined;
            tag?: string | undefined;
            modelValue?: boolean | undefined;
            stateful?: boolean | undefined;
            href?: string | undefined;
            color?: string | undefined;
            to?: string | Record<string, any> | undefined;
            exact?: boolean | undefined;
            activeClass?: string | undefined;
            exactActiveClass?: string | undefined;
            target?: string | undefined;
            icon?: string | undefined;
            ariaCloseLabel?: import("../../composables").TranslationProp | undefined;
            square?: boolean | undefined;
            closeable?: boolean | undefined;
            outline?: boolean | undefined;
        } & import("vue").HTMLAttributes;
        VaCollapse: {
            header?: string | undefined;
            preset?: string | undefined;
            disabled?: boolean | undefined;
            modelValue?: boolean | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            textColor?: string | undefined;
            icon?: string | undefined;
            iconColor?: string | undefined;
            bodyColor?: string | undefined;
            bodyTextColor?: string | undefined;
            colorAll?: boolean | undefined;
        } & import("vue").HTMLAttributes;
        VaColorIndicator: {
            size?: string | undefined;
            preset?: string | undefined;
            modelValue?: boolean | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            square?: boolean | undefined;
        } & import("vue").HTMLAttributes;
        VaColorInput: {
            label?: string | undefined;
            error?: NonNullable<boolean | undefined> | undefined;
            preset?: string | undefined;
            name?: string | undefined;
            mask?: NonNullable<string | Record<string, number[]> | import("cleave.js/options").CleaveOptions | undefined> | undefined;
            pattern?: string | undefined;
            success?: NonNullable<boolean | undefined> | undefined;
            autofocus?: NonNullable<boolean | undefined> | undefined;
            type?: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"text" | "password"> | undefined> | undefined;
            disabled?: boolean | undefined;
            readonly?: NonNullable<boolean | undefined> | undefined;
            errorMessages?: NonNullable<string | string[] | undefined> | undefined;
            modelValue?: string | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            loading?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            rules?: import("../../composables").ValidationRule<string>[] | undefined;
            dirty?: NonNullable<boolean | undefined> | undefined;
            errorCount?: NonNullable<string | number | undefined> | undefined;
            messages?: NonNullable<string | string[] | undefined> | undefined;
            immediateValidation?: NonNullable<boolean | undefined> | undefined;
            background?: string | undefined;
            tabindex?: NonNullable<string | number | undefined> | undefined;
            requiredMark?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            inputAriaLabel?: NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined> | undefined;
            inputAriaLabelledby?: string | undefined;
            inputAriaDescribedby?: string | undefined;
            counter?: NonNullable<boolean | undefined> | undefined;
            maxLength?: NonNullable<NonNullable<string | number | undefined> | undefined> | undefined;
            placeholder?: string | undefined;
            innerLabel?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            returnRaw?: NonNullable<boolean | undefined> | undefined;
            inputClass?: string | undefined;
            inputmode?: string | undefined;
            ariaResetLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
            strictBindInputValue?: NonNullable<boolean | undefined> | undefined;
            clearable?: NonNullable<boolean | undefined> | undefined;
            clearableIcon?: string | undefined;
            clearValue?: string | undefined;
            indicator?: "square" | "dot" | undefined;
            ariaOpenColorPickerLabel?: import("../../composables").TranslationProp | undefined;
        } & import("vue").HTMLAttributes;
        VaColorPalette: {
            preset?: string | undefined;
            ariaLabel?: import("../../composables").TranslationProp | undefined;
            modelValue?: string | undefined;
            stateful?: boolean | undefined;
            indicator?: "square" | "dot" | undefined;
            palette?: string[] | undefined;
            ariaIndicatorLabel?: import("../../composables").TranslationProp | undefined;
        } & import("vue").HTMLAttributes;
        VaConfig: {
            preset?: string | undefined;
            components?: Partial<any & {
                all: import("../../services/component-config").Props;
                presets: import("../../services/component-config").Presets;
            }> | undefined;
            readonly colors?: {
                variables?: {
                    [x: string]: string | undefined;
                    primary?: string | undefined;
                    secondary?: string | undefined;
                    success?: string | undefined;
                    info?: string | undefined;
                    danger?: string | undefined;
                    warning?: string | undefined;
                    backgroundPrimary?: string | undefined;
                    backgroundSecondary?: string | undefined;
                    backgroundElement?: string | undefined;
                    backgroundBorder?: string | undefined;
                    textPrimary?: string | undefined;
                    textInverted?: string | undefined;
                    shadow?: string | undefined;
                    focus?: string | undefined;
                    transparent?: string | undefined;
                    onFocus?: string | undefined;
                    onPrimary?: string | undefined;
                    onDanger?: string | undefined;
                    onSuccess?: string | undefined;
                    onSecondary?: string | undefined;
                    onInfo?: string | undefined;
                    onWarning?: string | undefined;
                    onBackgroundPrimary?: string | undefined;
                    onBackgroundSecondary?: string | undefined;
                    onBackgroundElement?: string | undefined;
                    onBackgroundBorder?: string | undefined;
                    onTextPrimary?: string | undefined;
                    onTextInverted?: string | undefined;
                    onShadow?: string | undefined;
                    onTransparent?: string | undefined;
                } | undefined;
                threshold?: number | undefined;
                presets?: {
                    [x: string]: {
                        [x: string]: string | undefined;
                        primary?: string | undefined;
                        secondary?: string | undefined;
                        success?: string | undefined;
                        info?: string | undefined;
                        danger?: string | undefined;
                        warning?: string | undefined;
                        backgroundPrimary?: string | undefined;
                        backgroundSecondary?: string | undefined;
                        backgroundElement?: string | undefined;
                        backgroundBorder?: string | undefined;
                        textPrimary?: string | undefined;
                        textInverted?: string | undefined;
                        shadow?: string | undefined;
                        focus?: string | undefined;
                        transparent?: string | undefined;
                        onFocus?: string | undefined;
                        onPrimary?: string | undefined;
                        onDanger?: string | undefined;
                        onSuccess?: string | undefined;
                        onSecondary?: string | undefined;
                        onInfo?: string | undefined;
                        onWarning?: string | undefined;
                        onBackgroundPrimary?: string | undefined;
                        onBackgroundSecondary?: string | undefined;
                        onBackgroundElement?: string | undefined;
                        onBackgroundBorder?: string | undefined;
                        onTextPrimary?: string | undefined;
                        onTextInverted?: string | undefined;
                        onShadow?: string | undefined;
                        onTransparent?: string | undefined;
                    } | undefined;
                    light?: {
                        [x: string]: string | undefined;
                        primary?: string | undefined;
                        secondary?: string | undefined;
                        success?: string | undefined;
                        info?: string | undefined;
                        danger?: string | undefined;
                        warning?: string | undefined;
                        backgroundPrimary?: string | undefined;
                        backgroundSecondary?: string | undefined;
                        backgroundElement?: string | undefined;
                        backgroundBorder?: string | undefined;
                        textPrimary?: string | undefined;
                        textInverted?: string | undefined;
                        shadow?: string | undefined;
                        focus?: string | undefined;
                        transparent?: string | undefined;
                        onFocus?: string | undefined;
                        onPrimary?: string | undefined;
                        onDanger?: string | undefined;
                        onSuccess?: string | undefined;
                        onSecondary?: string | undefined;
                        onInfo?: string | undefined;
                        onWarning?: string | undefined;
                        onBackgroundPrimary?: string | undefined;
                        onBackgroundSecondary?: string | undefined;
                        onBackgroundElement?: string | undefined;
                        onBackgroundBorder?: string | undefined;
                        onTextPrimary?: string | undefined;
                        onTextInverted?: string | undefined;
                        onShadow?: string | undefined;
                        onTransparent?: string | undefined;
                    } | undefined;
                    dark?: {
                        [x: string]: string | undefined;
                        primary?: string | undefined;
                        secondary?: string | undefined;
                        success?: string | undefined;
                        info?: string | undefined;
                        danger?: string | undefined;
                        warning?: string | undefined;
                        backgroundPrimary?: string | undefined;
                        backgroundSecondary?: string | undefined;
                        backgroundElement?: string | undefined;
                        backgroundBorder?: string | undefined;
                        textPrimary?: string | undefined;
                        textInverted?: string | undefined;
                        shadow?: string | undefined;
                        focus?: string | undefined;
                        transparent?: string | undefined;
                        onFocus?: string | undefined;
                        onPrimary?: string | undefined;
                        onDanger?: string | undefined;
                        onSuccess?: string | undefined;
                        onSecondary?: string | undefined;
                        onInfo?: string | undefined;
                        onWarning?: string | undefined;
                        onBackgroundPrimary?: string | undefined;
                        onBackgroundSecondary?: string | undefined;
                        onBackgroundElement?: string | undefined;
                        onBackgroundBorder?: string | undefined;
                        onTextPrimary?: string | undefined;
                        onTextInverted?: string | undefined;
                        onShadow?: string | undefined;
                        onTransparent?: string | undefined;
                    } | undefined;
                } | undefined;
                currentPresetName?: string | undefined;
            } | undefined;
            readonly i18n?: {
                [x: string]: string | undefined;
                progress?: string | undefined;
                search?: string | undefined;
                cancel?: string | undefined;
                close?: string | undefined;
                reset?: string | undefined;
                switch?: string | undefined;
                carousel?: string | undefined;
                pagination?: string | undefined;
                breadcrumbs?: string | undefined;
                color?: string | undefined;
                step?: string | undefined;
                noOptions?: string | undefined;
                ok?: string | undefined;
                uploadFile?: string | undefined;
                undo?: string | undefined;
                dropzone?: string | undefined;
                fileDeleted?: string | undefined;
                closeAlert?: string | undefined;
                backToTop?: string | undefined;
                toggleDropdown?: string | undefined;
                goPreviousSlide?: string | undefined;
                goNextSlide?: string | undefined;
                goSlide?: string | undefined;
                slideOf?: string | undefined;
                openColorPicker?: string | undefined;
                colorSelection?: string | undefined;
                colorName?: string | undefined;
                decreaseCounter?: string | undefined;
                increaseCounter?: string | undefined;
                selectAllRows?: string | undefined;
                sortColumnBy?: string | undefined;
                selectRowByIndex?: string | undefined;
                resetDate?: string | undefined;
                nextPeriod?: string | undefined;
                switchView?: string | undefined;
                previousPeriod?: string | undefined;
                removeFile?: string | undefined;
                goToTheFirstPage?: string | undefined;
                goToPreviousPage?: string | undefined;
                goToSpecificPage?: string | undefined;
                goToSpecificPageInput?: string | undefined;
                goNextPage?: string | undefined;
                goLastPage?: string | undefined;
                currentRating?: string | undefined;
                voteRating?: string | undefined;
                optionsFilter?: string | undefined;
                splitPanels?: string | undefined;
                movePaginationLeft?: string | undefined;
                movePaginationRight?: string | undefined;
                resetTime?: string | undefined;
                closeToast?: string | undefined;
                selectedOption?: string | undefined;
                noSelectedOption?: string | undefined;
                counterValue?: string | undefined;
                selectedDate?: string | undefined;
                selectedTime?: string | undefined;
                progressState?: string | undefined;
                next?: string | undefined;
                back?: string | undefined;
                finish?: string | undefined;
                loading?: string | undefined;
                sliderValue?: string | undefined;
                inputField?: string | undefined;
                fileTypeIncorrect?: string | undefined;
            } | undefined;
        } & import("vue").HTMLAttributes;
        VaContent: {} & import("vue").HTMLAttributes;
        VaCounter: {
            label?: string | undefined;
            error?: NonNullable<boolean | undefined> | undefined;
            flat?: boolean | undefined;
            preset?: string | undefined;
            name?: string | undefined;
            success?: NonNullable<boolean | undefined> | undefined;
            ariaLabel?: import("../../composables").TranslationProp | undefined;
            disabled?: NonNullable<boolean | undefined> | undefined;
            readonly?: NonNullable<boolean | undefined> | undefined;
            errorMessages?: NonNullable<string | string[] | undefined> | undefined;
            modelValue?: string | number | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            step?: string | number | undefined;
            loading?: NonNullable<boolean | undefined> | undefined;
            rules?: import("../../composables").ValidationRule<any>[] | undefined;
            dirty?: NonNullable<boolean | undefined> | undefined;
            errorCount?: NonNullable<string | number | undefined> | undefined;
            messages?: NonNullable<string | string[] | undefined> | undefined;
            immediateValidation?: NonNullable<boolean | undefined> | undefined;
            background?: string | undefined;
            requiredMark?: NonNullable<boolean | undefined> | undefined;
            inputAriaLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
            inputAriaLabelledby?: string | undefined;
            inputAriaDescribedby?: string | undefined;
            counter?: NonNullable<boolean | undefined> | undefined;
            maxLength?: NonNullable<string | number | undefined> | undefined;
            placeholder?: string | undefined;
            innerLabel?: NonNullable<boolean | undefined> | undefined;
            clearable?: boolean | undefined;
            clearableIcon?: string | undefined;
            clearValue?: string | undefined;
            readonly max?: string | number | undefined;
            readonly min?: string | number | undefined;
            manualInput?: boolean | undefined;
            increaseIcon?: string | undefined;
            decreaseIcon?: string | undefined;
            buttons?: boolean | undefined;
            rounded?: boolean | undefined;
            margins?: string | number | undefined;
            longPressDelay?: string | number | undefined;
            ariaDecreaseLabel?: import("../../composables").TranslationProp | undefined;
            ariaIncreaseLabel?: import("../../composables").TranslationProp | undefined;
        } & import("vue").HTMLAttributes;
        VaDataTable: {} & import("vue").HTMLAttributes;
        VaDateInput: {
            label?: string | undefined;
            error?: boolean | undefined;
            anchor?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
            preset?: string | undefined;
            name?: string | undefined;
            view?: Partial<import("../va-date-picker/types").DatePickerView> | undefined;
            success?: boolean | undefined;
            ariaLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
            role?: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined> | undefined;
            type?: NonNullable<import("../va-date-picker/types").DatePickerType | undefined> | undefined;
            disabled?: NonNullable<boolean | undefined> | undefined;
            readonly?: NonNullable<boolean | undefined> | undefined;
            errorMessages?: string | string[] | undefined;
            trigger?: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined> | undefined;
            readonly modelValue?: import("../va-date-input/types").DateInputModelValue;
            stateful?: NonNullable<boolean | undefined> | undefined;
            color?: string | undefined;
            loading?: NonNullable<boolean | undefined> | undefined;
            target?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
            rules?: import("../../composables").ValidationRule<import("../va-date-input/types").DateInputModelValue>[] | undefined;
            dirty?: boolean | undefined;
            errorCount?: string | number | undefined;
            messages?: string | string[] | undefined;
            immediateValidation?: boolean | undefined;
            placement?: NonNullable<import("../../composables").PlacementWithAlias | undefined> | undefined;
            mode?: NonNullable<NonNullable<import("../va-date-picker/types").DatePickerMode | undefined> | undefined> | undefined;
            hoverOverTimeout?: NonNullable<string | number | undefined> | undefined;
            hoverOutTimeout?: NonNullable<string | number | undefined> | undefined;
            autoPlacement?: NonNullable<boolean | undefined> | undefined;
            stickToEdges?: NonNullable<boolean | undefined> | undefined;
            keepAnchorWidth?: NonNullable<boolean | undefined> | undefined;
            verticalScrollOnOverflow?: NonNullable<boolean | undefined> | undefined;
            anchorSelector?: string | undefined;
            closeOnClickOutside?: NonNullable<boolean | undefined> | undefined;
            closeOnFocusOutside?: NonNullable<boolean | undefined> | undefined;
            closeOnAnchorClick?: NonNullable<boolean | undefined> | undefined;
            closeOnContentClick?: boolean | undefined;
            isContentHoverable?: NonNullable<boolean | undefined> | undefined;
            offset?: NonNullable<import("../va-dropdown/types").DropdownOffsetProp | undefined> | undefined;
            cursor?: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined> | undefined;
            teleport?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
            contentClass?: string | undefined;
            background?: string | undefined;
            closeOnChange?: boolean | undefined;
            isOpen?: boolean | undefined;
            requiredMark?: NonNullable<boolean | undefined> | undefined;
            inputAriaLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
            inputAriaLabelledby?: string | undefined;
            inputAriaDescribedby?: string | undefined;
            counter?: NonNullable<boolean | undefined> | undefined;
            placeholder?: string | undefined;
            innerLabel?: NonNullable<boolean | undefined> | undefined;
            ariaResetLabel?: import("../../composables").TranslationProp | undefined;
            clearable?: boolean | undefined;
            clearableIcon?: string | undefined;
            clearValue?: any;
            icon?: string | undefined;
            leftIcon?: boolean | undefined;
            manualInput?: boolean | undefined;
            "child:prevButton"?: (Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                preset: string;
                append: boolean;
                type: string;
                disabled: boolean;
                tag: string;
                href: string;
                color: string;
                loading: boolean;
                to: string | Record<string, any>;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                target: string;
                sizesConfig: Record<string, any>;
                textColor: string;
                round: boolean;
                fontSizesConfig: Record<string, any>;
                icon: string;
                block: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                borderColor: string;
                gradient: boolean;
                plain: boolean;
                iconRight: string;
                iconColor: string;
                pressedBehavior: "mask" | "opacity";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "mask" | "opacity";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly disabled: boolean;
                readonly tag: string;
                readonly color: string;
                readonly loading: boolean;
                readonly sizesConfig: Record<string, any>;
                readonly textColor: string;
                readonly round: boolean;
                readonly fontSizesConfig: Record<string, any>;
                readonly icon: string;
                readonly block: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly plain: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "mask" | "opacity";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "mask" | "opacity";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: string | undefined;
                readonly append?: boolean | undefined;
                readonly href?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly target?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
            }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">) | undefined;
            "child:nextButton"?: (Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                preset: string;
                append: boolean;
                type: string;
                disabled: boolean;
                tag: string;
                href: string;
                color: string;
                loading: boolean;
                to: string | Record<string, any>;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                target: string;
                sizesConfig: Record<string, any>;
                textColor: string;
                round: boolean;
                fontSizesConfig: Record<string, any>;
                icon: string;
                block: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                borderColor: string;
                gradient: boolean;
                plain: boolean;
                iconRight: string;
                iconColor: string;
                pressedBehavior: "mask" | "opacity";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "mask" | "opacity";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly disabled: boolean;
                readonly tag: string;
                readonly color: string;
                readonly loading: boolean;
                readonly sizesConfig: Record<string, any>;
                readonly textColor: string;
                readonly round: boolean;
                readonly fontSizesConfig: Record<string, any>;
                readonly icon: string;
                readonly block: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly plain: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "mask" | "opacity";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "mask" | "opacity";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: string | undefined;
                readonly append?: boolean | undefined;
                readonly href?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly target?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
            }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">) | undefined;
            "child:middleButton"?: (Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                preset: string;
                append: boolean;
                type: string;
                disabled: boolean;
                tag: string;
                href: string;
                color: string;
                loading: boolean;
                to: string | Record<string, any>;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                target: string;
                sizesConfig: Record<string, any>;
                textColor: string;
                round: boolean;
                fontSizesConfig: Record<string, any>;
                icon: string;
                block: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                borderColor: string;
                gradient: boolean;
                plain: boolean;
                iconRight: string;
                iconColor: string;
                pressedBehavior: "mask" | "opacity";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "mask" | "opacity";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly disabled: boolean;
                readonly tag: string;
                readonly color: string;
                readonly loading: boolean;
                readonly sizesConfig: Record<string, any>;
                readonly textColor: string;
                readonly round: boolean;
                readonly fontSizesConfig: Record<string, any>;
                readonly icon: string;
                readonly block: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly plain: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "mask" | "opacity";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "mask" | "opacity";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: string | undefined;
                readonly append?: boolean | undefined;
                readonly href?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly target?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
            }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">) | undefined;
            monthNames?: string[] | undefined;
            ariaNextPeriodLabel?: NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined> | undefined;
            ariaPreviousPeriodLabel?: NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined> | undefined;
            ariaSwitchViewLabel?: NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined> | undefined;
            weekdayNames?: string[] | undefined;
            firstWeekday?: NonNullable<NonNullable<("Monday" | "Sunday" | "monday" | "sunday") | undefined> | undefined> | undefined;
            hideWeekDays?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            showOtherMonths?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            allowedDays?: ((date: Date) => boolean) | undefined;
            weekends?: ((date: Date) => boolean) | undefined;
            highlightWeekend?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            highlightToday?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            allowedMonths?: ((date: Date) => boolean) | undefined;
            allowedYears?: ((date: Date) => boolean) | undefined;
            startYear?: NonNullable<NonNullable<string | number | undefined> | undefined> | undefined;
            endYear?: NonNullable<NonNullable<string | number | undefined> | undefined> | undefined;
            weekendsColor?: string | undefined;
            resetOnClose?: boolean | undefined;
            readonly format?: ((date: import("../va-date-input/types").DateInputModelValue) => string) | undefined;
            formatDate?: ((date: Date) => string) | undefined;
            readonly formatValue?: ((date: import("../va-date-input/types").DateInputModelValue) => string) | undefined;
            readonly parse?: ((input: string) => import("../va-date-input/types").DateInputValue) | undefined;
            readonly parseDate?: ((input: string) => Date) | undefined;
            delimiter?: string | undefined;
            rangeDelimiter?: string | undefined;
            ariaToggleDropdownLabel?: import("../../composables").TranslationProp | undefined;
            ariaSelectedDateLabel?: import("../../composables").TranslationProp | undefined;
        } & import("vue").HTMLAttributes;
        VaDatePicker: {
            preset?: string | undefined;
            readonly view?: Partial<import("../va-date-picker/types").DatePickerView> | undefined;
            type?: import("../va-date-picker/types").DatePickerType | undefined;
            disabled?: boolean | undefined;
            readonly?: boolean | undefined;
            readonly modelValue?: import("../va-date-picker/types").DatePickerModelValue;
            stateful?: boolean | undefined;
            color?: string | undefined;
            mode?: NonNullable<import("../va-date-picker/types").DatePickerMode | undefined> | undefined;
            "child:prevButton"?: NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                preset: string;
                append: boolean;
                type: string;
                disabled: boolean;
                tag: string;
                href: string;
                color: string;
                loading: boolean;
                to: string | Record<string, any>;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                target: string;
                sizesConfig: Record<string, any>;
                textColor: string;
                round: boolean;
                fontSizesConfig: Record<string, any>;
                icon: string;
                block: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                borderColor: string;
                gradient: boolean;
                plain: boolean;
                iconRight: string;
                iconColor: string;
                pressedBehavior: "mask" | "opacity";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "mask" | "opacity";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly disabled: boolean;
                readonly tag: string;
                readonly color: string;
                readonly loading: boolean;
                readonly sizesConfig: Record<string, any>;
                readonly textColor: string;
                readonly round: boolean;
                readonly fontSizesConfig: Record<string, any>;
                readonly icon: string;
                readonly block: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly plain: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "mask" | "opacity";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "mask" | "opacity";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: string | undefined;
                readonly append?: boolean | undefined;
                readonly href?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly target?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
            }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
            "child:nextButton"?: NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                preset: string;
                append: boolean;
                type: string;
                disabled: boolean;
                tag: string;
                href: string;
                color: string;
                loading: boolean;
                to: string | Record<string, any>;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                target: string;
                sizesConfig: Record<string, any>;
                textColor: string;
                round: boolean;
                fontSizesConfig: Record<string, any>;
                icon: string;
                block: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                borderColor: string;
                gradient: boolean;
                plain: boolean;
                iconRight: string;
                iconColor: string;
                pressedBehavior: "mask" | "opacity";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "mask" | "opacity";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly disabled: boolean;
                readonly tag: string;
                readonly color: string;
                readonly loading: boolean;
                readonly sizesConfig: Record<string, any>;
                readonly textColor: string;
                readonly round: boolean;
                readonly fontSizesConfig: Record<string, any>;
                readonly icon: string;
                readonly block: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly plain: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "mask" | "opacity";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "mask" | "opacity";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: string | undefined;
                readonly append?: boolean | undefined;
                readonly href?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly target?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
            }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
            "child:middleButton"?: NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                preset: string;
                append: boolean;
                type: string;
                disabled: boolean;
                tag: string;
                href: string;
                color: string;
                loading: boolean;
                to: string | Record<string, any>;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                target: string;
                sizesConfig: Record<string, any>;
                textColor: string;
                round: boolean;
                fontSizesConfig: Record<string, any>;
                icon: string;
                block: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                borderColor: string;
                gradient: boolean;
                plain: boolean;
                iconRight: string;
                iconColor: string;
                pressedBehavior: "mask" | "opacity";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "mask" | "opacity";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly disabled: boolean;
                readonly tag: string;
                readonly color: string;
                readonly loading: boolean;
                readonly sizesConfig: Record<string, any>;
                readonly textColor: string;
                readonly round: boolean;
                readonly fontSizesConfig: Record<string, any>;
                readonly icon: string;
                readonly block: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly plain: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "mask" | "opacity";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "mask" | "opacity";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: string | undefined;
                readonly append?: boolean | undefined;
                readonly href?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly target?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
            }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
            monthNames?: string[] | undefined;
            ariaNextPeriodLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
            ariaPreviousPeriodLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
            ariaSwitchViewLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
            weekdayNames?: string[] | undefined;
            firstWeekday?: NonNullable<("Monday" | "Sunday" | "monday" | "sunday") | undefined> | undefined;
            hideWeekDays?: NonNullable<boolean | undefined> | undefined;
            showOtherMonths?: NonNullable<boolean | undefined> | undefined;
            allowedDays?: ((date: Date) => boolean) | undefined;
            weekends?: ((date: Date) => boolean) | undefined;
            highlightWeekend?: NonNullable<boolean | undefined> | undefined;
            highlightToday?: NonNullable<boolean | undefined> | undefined;
            allowedMonths?: ((date: Date) => boolean) | undefined;
            allowedYears?: ((date: Date) => boolean) | undefined;
            startYear?: NonNullable<string | number | undefined> | undefined;
            endYear?: NonNullable<string | number | undefined> | undefined;
            weekendsColor?: string | undefined;
        } & import("vue").HTMLAttributes;
        VaDivider: {
            preset?: string | undefined;
            color?: string | undefined;
            orientation?: "left" | "center" | "right" | undefined;
            vertical?: boolean | undefined;
            inset?: boolean | undefined;
            dashed?: boolean | undefined;
        } & import("vue").HTMLAttributes;
        VaDropdown: {
            anchor?: import("../../composables").MaybeHTMLElementOrSelector;
            ariaLabel?: import("../../composables").TranslationProp | undefined;
            role?: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined;
            disabled?: boolean | undefined;
            readonly?: boolean | undefined;
            trigger?: import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined;
            modelValue?: boolean | undefined;
            stateful?: boolean | undefined;
            target?: import("../../composables").MaybeHTMLElementOrSelector;
            placement?: import("../../composables").PlacementWithAlias | undefined;
            hoverOverTimeout?: string | number | undefined;
            hoverOutTimeout?: string | number | undefined;
            autoPlacement?: boolean | undefined;
            stickToEdges?: boolean | undefined;
            keepAnchorWidth?: boolean | undefined;
            verticalScrollOnOverflow?: boolean | undefined;
            anchorSelector?: string | undefined;
            innerAnchorSelector?: string | undefined;
            closeOnClickOutside?: boolean | undefined;
            closeOnFocusOutside?: boolean | undefined;
            closeOnAnchorClick?: boolean | undefined;
            closeOnContentClick?: boolean | undefined;
            isContentHoverable?: boolean | undefined;
            offset?: import("../va-dropdown/types").DropdownOffsetProp | undefined;
            cursor?: boolean | import("../va-dropdown/types").CursorAnchor | undefined;
            teleport?: import("../../composables").MaybeHTMLElementOrSelector;
            keyboardNavigation?: boolean | undefined;
            contentClass?: string | undefined;
        } & import("vue").HTMLAttributes;
        VaDropdownContent: {
            noPadding?: boolean | undefined;
            background?: string | undefined;
            readonly textColor?: string | undefined;
        } & import("vue").HTMLAttributes;
        VaFallback: {
            readonly fallbackSrc?: string | undefined;
            readonly fallbackText?: string | undefined;
            readonly fallbackIcon?: string | undefined;
            readonly fallbackRender?: (() => any) | undefined;
        } & import("vue").HTMLAttributes;
        VaFileUpload: {
            preset?: string | undefined;
            type?: "list" | "single" | "gallery" | undefined;
            disabled?: boolean | undefined;
            modelValue?: import("..").VaFile | import("..").VaFile[] | undefined;
            color?: string | undefined;
            undo?: boolean | undefined;
            dropzone?: boolean | undefined;
            file?: import("..").ConvertedFile | undefined;
            ariaRemoveFileLabel?: NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined> | undefined;
            files?: import("..").VaFile[] | undefined;
            fileTypes?: string | undefined;
            hideFileList?: boolean | undefined;
            undoDuration?: string | number | undefined;
            undoButtonText?: import("../../composables").TranslationProp | undefined;
            dropZoneText?: import("../../composables").TranslationProp | undefined;
            uploadButtonText?: import("../../composables").TranslationProp | undefined;
            deletedFileMessage?: import("../../composables").TranslationProp | undefined;
            fileIncorrectMessage?: import("../../composables").TranslationProp | undefined;
        } & import("vue").HTMLAttributes;
        VaForm: {
            preset?: string | undefined;
            name?: string | undefined;
            immediate?: boolean | undefined;
            autofocus?: boolean | undefined;
            tag?: string | undefined;
            trigger?: "blur" | "change" | undefined;
            modelValue?: boolean | undefined;
            hideErrors?: boolean | undefined;
            hideErrorMessages?: boolean | undefined;
            hideLoading?: boolean | undefined;
            stateful?: boolean | undefined;
        } & import("vue").HTMLAttributes;
        VaHover: {
            preset?: string | undefined;
            disabled?: boolean | undefined;
            modelValue?: boolean | undefined;
            stateful?: boolean | undefined;
        } & import("vue").HTMLAttributes;
        VaIcon: {
            size?: string | number | undefined;
            preset?: string | undefined;
            name?: string | undefined;
            readonly tag?: string | undefined;
            readonly color?: string | undefined;
            sizesConfig?: Record<string, any> | undefined;
            readonly component?: any;
            readonly rotation?: string | number | undefined;
            readonly spin?: string | boolean | undefined;
            flip?: "horizontal" | "vertical" | "off" | "both" | undefined;
            fontSizesConfig?: Record<string, any> | undefined;
        } & import("vue").HTMLAttributes;
        VaImage: {
            title?: string | undefined;
            preset?: string | undefined;
            draggable?: boolean | undefined;
            readonly loading?: "lazy" | "eager" | undefined;
            sizes?: string | undefined;
            alt?: string | undefined;
            readonly crossorigin?: "anonymous" | "use-credentials" | undefined;
            readonly src?: string | undefined;
            fallbackSrc?: string | undefined;
            fallbackText?: string | undefined;
            fallbackIcon?: string | undefined;
            fallbackRender?: (() => any) | undefined;
            maxWidth?: string | number | undefined;
            ratio?: number | "auto" | undefined;
            lazy?: boolean | undefined;
            fit?: "fill" | "none" | "contain" | "cover" | "scale-down" | undefined;
            placeholderSrc?: string | undefined;
            srcset?: string | undefined;
            readonly decoding?: "auto" | "sync" | "async" | undefined;
            fetchpriority?: "auto" | "high" | "low" | undefined;
            readonly referrerpolicy?: "origin" | "no-referrer" | "no-referrer-when-downgrade" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url" | undefined;
        } & import("vue").HTMLAttributes;
        VaInfiniteScroll: {
            readonly load?: Function | undefined;
            reverse?: boolean | undefined;
            preset?: string | undefined;
            disabled?: boolean | undefined;
            tag?: string | undefined;
            offset?: string | number | undefined;
            scrollTarget?: string | HTMLElement | undefined;
            debounce?: string | number | undefined;
        } & import("vue").HTMLAttributes;
        VaInnerLoading: {
            size?: string | number | undefined;
            preset?: string | undefined;
            readonly color?: string | undefined;
            loading?: boolean | undefined;
            icon?: string | undefined;
        } & import("vue").HTMLAttributes;
        VaInput: {
            label?: string | undefined;
            error?: boolean | undefined;
            preset?: string | undefined;
            name?: string | undefined;
            mask?: string | Record<string, number[]> | import("cleave.js/options").CleaveOptions | undefined;
            readonly pattern?: string | undefined;
            success?: boolean | undefined;
            autofocus?: boolean | undefined;
            type?: import("../../utils/types/prop-type").StringWithAutocomplete<"text" | "password"> | undefined;
            disabled?: boolean | undefined;
            readonly?: boolean | undefined;
            errorMessages?: string | string[] | undefined;
            modelValue?: string | number | null | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            loading?: NonNullable<boolean | undefined> | undefined;
            rules?: import("../../composables").ValidationRule<string>[] | undefined;
            dirty?: boolean | undefined;
            errorCount?: string | number | undefined;
            messages?: string | string[] | undefined;
            immediateValidation?: boolean | undefined;
            background?: string | undefined;
            tabindex?: string | number | undefined;
            requiredMark?: NonNullable<boolean | undefined> | undefined;
            inputAriaLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
            inputAriaLabelledby?: string | undefined;
            inputAriaDescribedby?: string | undefined;
            counter?: boolean | undefined;
            maxLength?: NonNullable<string | number | undefined> | undefined;
            placeholder?: string | undefined;
            innerLabel?: NonNullable<boolean | undefined> | undefined;
            returnRaw?: boolean | undefined;
            inputClass?: string | undefined;
            inputmode?: string | undefined;
            ariaResetLabel?: import("../../composables").TranslationProp | undefined;
            strictBindInputValue?: boolean | undefined;
            clearable?: boolean | undefined;
            clearableIcon?: string | undefined;
            clearValue?: string | undefined;
        } & import("vue").HTMLAttributes;
        VaLayout: {
            left?: {
                absolute?: boolean | undefined;
                order?: number | undefined;
                fixed?: boolean | undefined;
                overlay?: boolean | undefined;
            } | undefined;
            right?: {
                absolute?: boolean | undefined;
                order?: number | undefined;
                fixed?: boolean | undefined;
                overlay?: boolean | undefined;
            } | undefined;
            bottom?: {
                absolute?: boolean | undefined;
                order?: number | undefined;
                fixed?: boolean | undefined;
                overlay?: boolean | undefined;
            } | undefined;
            top?: {
                absolute?: boolean | undefined;
                order?: number | undefined;
                fixed?: boolean | undefined;
                overlay?: boolean | undefined;
            } | undefined;
            allowBodyScrollOnOverlay?: boolean | undefined;
        } & import("vue").HTMLAttributes;
        VaInputWrapper: {
            label?: string | undefined;
            error?: boolean | undefined;
            preset?: string | undefined;
            name?: string | undefined;
            success?: boolean | undefined;
            disabled?: boolean | undefined;
            readonly?: boolean | undefined;
            errorMessages?: string | string[] | undefined;
            modelValue?: any;
            color?: string | undefined;
            loading?: boolean | undefined;
            rules?: import("../../composables").ValidationRule<any>[] | undefined;
            dirty?: boolean | undefined;
            errorCount?: string | number | undefined;
            messages?: string | string[] | undefined;
            immediateValidation?: boolean | undefined;
            readonly background?: string | undefined;
            requiredMark?: boolean | undefined;
            inputAriaLabel?: import("../../composables").TranslationProp | undefined;
            readonly inputAriaLabelledby?: string | undefined;
            readonly inputAriaDescribedby?: string | undefined;
            counter?: boolean | undefined;
            maxLength?: string | number | undefined;
            placeholder?: string | undefined;
            innerLabel?: boolean | undefined;
        } & import("vue").HTMLAttributes;
        VaList: {
            preset?: string | undefined;
            fit?: boolean | undefined;
        } & import("vue").HTMLAttributes;
        VaListItem: {
            replace?: boolean | undefined;
            preset?: string | undefined;
            append?: boolean | undefined;
            disabled?: boolean | undefined;
            tag?: string | undefined;
            href?: string | undefined;
            to?: string | Record<string, any> | undefined;
            exact?: boolean | undefined;
            activeClass?: string | undefined;
            exactActiveClass?: string | undefined;
            target?: string | undefined;
        } & import("vue").HTMLAttributes;
        VaListItemLabel: {
            caption?: boolean | undefined;
            preset?: string | undefined;
            lines?: string | number | undefined;
        } & import("vue").HTMLAttributes;
        VaListItemSection: {
            preset?: string | undefined;
            icon?: boolean | undefined;
            avatar?: boolean | undefined;
        } & import("vue").HTMLAttributes;
        VaListLabel: {
            preset?: string | undefined;
            color?: string | undefined;
        } & import("vue").HTMLAttributes;
        VaListSeparator: {
            preset?: string | undefined;
            fit?: boolean | undefined;
            spaced?: boolean | undefined;
        } & import("vue").HTMLAttributes;
        VaMessageList: {
            modelValue?: string | string[] | undefined;
            readonly color?: string | undefined;
            limit?: string | number | undefined;
            hasError?: boolean | undefined;
        } & import("vue").HTMLAttributes;
        VaModal: {
            title?: string | undefined;
            blur?: boolean | undefined;
            size?: import("../../utils/types/prop-type").StringWithAutocomplete<"small" | "medium" | "large" | "auto"> | undefined;
            message?: string | undefined;
            modelValue?: boolean | undefined;
            stateful?: boolean | undefined;
            sizesConfig?: Record<string, any> | undefined;
            readonly anchorClass?: string | undefined;
            zIndex?: string | number | undefined;
            noPadding?: boolean | undefined;
            backgroundColor?: string | undefined;
            closeButton?: boolean | undefined;
            "child:cancelButton"?: NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                preset: string;
                append: boolean;
                type: string;
                disabled: boolean;
                tag: string;
                href: string;
                color: string;
                loading: boolean;
                to: string | Record<string, any>;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                target: string;
                sizesConfig: Record<string, any>;
                textColor: string;
                round: boolean;
                fontSizesConfig: Record<string, any>;
                icon: string;
                block: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                borderColor: string;
                gradient: boolean;
                plain: boolean;
                iconRight: string;
                iconColor: string;
                pressedBehavior: "mask" | "opacity";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "mask" | "opacity";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly disabled: boolean;
                readonly tag: string;
                readonly color: string;
                readonly loading: boolean;
                readonly sizesConfig: Record<string, any>;
                readonly textColor: string;
                readonly round: boolean;
                readonly fontSizesConfig: Record<string, any>;
                readonly icon: string;
                readonly block: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly plain: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "mask" | "opacity";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "mask" | "opacity";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: string | undefined;
                readonly append?: boolean | undefined;
                readonly href?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly target?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
            }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
            "child:okButton"?: NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                preset: string;
                append: boolean;
                type: string;
                disabled: boolean;
                tag: string;
                href: string;
                color: string;
                loading: boolean;
                to: string | Record<string, any>;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                target: string;
                sizesConfig: Record<string, any>;
                textColor: string;
                round: boolean;
                fontSizesConfig: Record<string, any>;
                icon: string;
                block: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                borderColor: string;
                gradient: boolean;
                plain: boolean;
                iconRight: string;
                iconColor: string;
                pressedBehavior: "mask" | "opacity";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "mask" | "opacity";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly disabled: boolean;
                readonly tag: string;
                readonly color: string;
                readonly loading: boolean;
                readonly sizesConfig: Record<string, any>;
                readonly textColor: string;
                readonly round: boolean;
                readonly fontSizesConfig: Record<string, any>;
                readonly icon: string;
                readonly block: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly plain: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "mask" | "opacity";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "mask" | "opacity";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: string | undefined;
                readonly append?: boolean | undefined;
                readonly href?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly target?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
            }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
            "child:closeButton"?: NonNullable<Partial<{
                size: string | number;
                preset: string;
                name: string;
                sizesConfig: Record<string, any>;
                flip: "horizontal" | "vertical" | "off" | "both";
                fontSizesConfig: Record<string, any>;
            }> & Omit<{
                readonly size: string | number;
                readonly name: string;
                readonly sizesConfig: Record<string, any>;
                readonly flip: "horizontal" | "vertical" | "off" | "both";
                readonly fontSizesConfig: Record<string, any>;
                readonly preset?: string | undefined;
                readonly tag?: string | undefined;
                readonly color?: string | undefined;
                readonly component?: any;
                readonly rotation?: string | number | undefined;
                readonly spin?: string | boolean | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                name: {
                    type: StringConstructor;
                    default: string;
                };
                tag: {
                    type: StringConstructor;
                };
                component: {
                    type: PropType<any>;
                };
                color: {
                    type: StringConstructor;
                };
                rotation: {
                    type: (StringConstructor | NumberConstructor)[];
                };
                spin: {
                    type: (BooleanConstructor | StringConstructor)[];
                };
                flip: {
                    type: PropType<"horizontal" | "vertical" | "off" | "both">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
                size: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: string;
                    validator: (size: string | number) => boolean;
                };
                sizesConfig: {
                    type: PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
            }>>, "size" | "preset" | "name" | "sizesConfig" | "flip" | "fontSizesConfig">> | undefined;
            attachElement?: string | undefined;
            allowBodyScroll?: boolean | undefined;
            disableAttachment?: boolean | undefined;
            okText?: import("../../composables").TranslationProp | undefined;
            cancelText?: import("../../composables").TranslationProp | undefined;
            hideDefaultActions?: boolean | undefined;
            fullscreen?: boolean | undefined;
            mobileFullscreen?: boolean | undefined;
            noDismiss?: boolean | undefined;
            noOutsideDismiss?: boolean | undefined;
            noEscDismiss?: boolean | undefined;
            maxWidth?: string | undefined;
            maxHeight?: string | undefined;
            fixedLayout?: boolean | undefined;
            withoutTransitions?: boolean | undefined;
            overlay?: boolean | undefined;
            overlayOpacity?: string | number | undefined;
            showNestedOverlay?: boolean | undefined;
            readonly beforeClose?: ((hide: () => void) => any) | undefined;
            readonly beforeOk?: ((hide: () => void) => any) | undefined;
            readonly beforeCancel?: ((hide: () => void) => any) | undefined;
            ariaCloseLabel?: import("../../composables").TranslationProp | undefined;
        } & import("vue").HTMLAttributes;
        VaNavbar: {
            fixed?: boolean | undefined;
            preset?: string | undefined;
            hideOnScroll?: boolean | undefined;
            bottom?: boolean | undefined;
            color?: string | undefined;
            readonly textColor?: string | undefined;
            bordered?: boolean | undefined;
            shape?: boolean | undefined;
            shadowed?: boolean | undefined;
        } & import("vue").HTMLAttributes;
        VaNavbarItem: {} & import("vue").HTMLAttributes;
        VaOptionList: {
            error?: boolean | undefined;
            options?: import("../../composables").SelectableOption[] | undefined;
            preset?: string | undefined;
            name?: string | undefined;
            success?: boolean | undefined;
            type?: "switch" | "checkbox" | "radio" | undefined;
            disabled?: boolean | undefined;
            readonly?: boolean | undefined;
            errorMessages?: string | string[] | undefined;
            readonly modelValue?: import("../../composables").SelectableOption | import("../../composables").SelectableOption[];
            stateful?: boolean | undefined;
            color?: string | undefined;
            readonly defaultValue?: import("../../composables").SelectableOption | import("../../composables").SelectableOption[];
            rules?: import("../../composables").ValidationRule<any>[] | undefined;
            dirty?: boolean | undefined;
            errorCount?: string | number | undefined;
            messages?: string | string[] | undefined;
            immediateValidation?: boolean | undefined;
            textBy?: import("../../composables").StringOrFunction | undefined;
            valueBy?: import("../../composables").StringOrFunction | undefined;
            trackBy?: import("../../composables").StringOrFunction | undefined;
            disabledBy?: import("../../composables").StringOrFunction | undefined;
            groupBy?: import("../../composables").StringOrFunction | undefined;
            leftLabel?: boolean | undefined;
        } & import("vue").HTMLAttributes;
        VaPagination: {
            input?: boolean | undefined;
            size?: "small" | "medium" | "large" | undefined;
            preset?: string | undefined;
            ariaLabel?: import("../../composables").TranslationProp | undefined;
            disabled?: boolean | undefined;
            modelValue?: number | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            borderColor?: string | undefined;
            rounded?: boolean | undefined;
            visiblePages?: string | number | undefined;
            pages?: string | number | undefined;
            boundaryLinks?: boolean | undefined;
            boundaryNumbers?: boolean | undefined;
            directionLinks?: boolean | undefined;
            hideOnSinglePage?: boolean | undefined;
            total?: string | number | undefined;
            pageSize?: string | number | undefined;
            boundaryIconLeft?: string | undefined;
            boundaryIconRight?: string | undefined;
            directionIconLeft?: string | undefined;
            directionIconRight?: string | undefined;
            gapped?: boolean | undefined;
            activePageColor?: string | undefined;
            activeButtonProps?: NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                preset: string;
                append: boolean;
                type: string;
                disabled: boolean;
                tag: string;
                href: string;
                color: string;
                loading: boolean;
                to: string | Record<string, any>;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                target: string;
                sizesConfig: Record<string, any>;
                textColor: string;
                round: boolean;
                fontSizesConfig: Record<string, any>;
                icon: string;
                block: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                borderColor: string;
                gradient: boolean;
                plain: boolean;
                iconRight: string;
                iconColor: string;
                pressedBehavior: "mask" | "opacity";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "mask" | "opacity";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly disabled: boolean;
                readonly tag: string;
                readonly color: string;
                readonly loading: boolean;
                readonly sizesConfig: Record<string, any>;
                readonly textColor: string;
                readonly round: boolean;
                readonly fontSizesConfig: Record<string, any>;
                readonly icon: string;
                readonly block: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly plain: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "mask" | "opacity";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "mask" | "opacity";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: string | undefined;
                readonly append?: boolean | undefined;
                readonly href?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly target?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
            }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
            buttonProps?: NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                preset: string;
                append: boolean;
                type: string;
                disabled: boolean;
                tag: string;
                href: string;
                color: string;
                loading: boolean;
                to: string | Record<string, any>;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                target: string;
                sizesConfig: Record<string, any>;
                textColor: string;
                round: boolean;
                fontSizesConfig: Record<string, any>;
                icon: string;
                block: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                borderColor: string;
                gradient: boolean;
                plain: boolean;
                iconRight: string;
                iconColor: string;
                pressedBehavior: "mask" | "opacity";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "mask" | "opacity";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly disabled: boolean;
                readonly tag: string;
                readonly color: string;
                readonly loading: boolean;
                readonly sizesConfig: Record<string, any>;
                readonly textColor: string;
                readonly round: boolean;
                readonly fontSizesConfig: Record<string, any>;
                readonly icon: string;
                readonly block: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly plain: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "mask" | "opacity";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "mask" | "opacity";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: string | undefined;
                readonly append?: boolean | undefined;
                readonly href?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly target?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
            }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
            buttonsPreset?: string | undefined;
            ariaGoToTheFirstPageLabel?: import("../../composables").TranslationProp | undefined;
            ariaGoToPreviousPageLabel?: import("../../composables").TranslationProp | undefined;
            ariaGoToSpecificPageLabel?: import("../../composables").TranslationProp | undefined;
            ariaGoToSpecificPageInputLabel?: import("../../composables").TranslationProp | undefined;
            ariaGoToNextPageLabel?: import("../../composables").TranslationProp | undefined;
            ariaGoToLastPageLabel?: import("../../composables").TranslationProp | undefined;
        } & import("vue").HTMLAttributes;
        VaParallax: {
            preset?: string | undefined;
            readonly target?: string | HTMLElement | undefined;
            height?: string | number | undefined;
            alt?: string | undefined;
            src?: string | undefined;
            speed?: string | number | undefined;
            reversed?: boolean | undefined;
        } & import("vue").HTMLAttributes;
        VaPopover: {
            title?: string | undefined;
            anchor?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
            preset?: string | undefined;
            message?: string | undefined;
            ariaLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
            role?: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined> | undefined;
            disabled?: NonNullable<boolean | undefined> | undefined;
            readonly?: NonNullable<boolean | undefined> | undefined;
            trigger?: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined> | undefined;
            modelValue?: NonNullable<boolean | undefined> | undefined;
            stateful?: NonNullable<boolean | undefined> | undefined;
            color?: string | undefined;
            target?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
            placement?: NonNullable<import("../../composables").PlacementWithAlias | undefined> | undefined;
            hoverOverTimeout?: NonNullable<string | number | undefined> | undefined;
            hoverOutTimeout?: NonNullable<string | number | undefined> | undefined;
            autoPlacement?: NonNullable<boolean | undefined> | undefined;
            stickToEdges?: NonNullable<boolean | undefined> | undefined;
            keepAnchorWidth?: NonNullable<boolean | undefined> | undefined;
            verticalScrollOnOverflow?: NonNullable<boolean | undefined> | undefined;
            anchorSelector?: string | undefined;
            innerAnchorSelector?: string | undefined;
            closeOnFocusOutside?: NonNullable<boolean | undefined> | undefined;
            closeOnAnchorClick?: NonNullable<boolean | undefined> | undefined;
            closeOnContentClick?: NonNullable<boolean | undefined> | undefined;
            isContentHoverable?: NonNullable<boolean | undefined> | undefined;
            offset?: number | [number, number] | undefined;
            cursor?: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined> | undefined;
            teleport?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
            keyboardNavigation?: NonNullable<boolean | undefined> | undefined;
            contentClass?: string | undefined;
            readonly textColor?: string | undefined;
            icon?: string | undefined;
            autoHide?: boolean | undefined;
        } & import("vue").HTMLAttributes;
        VaProgressBar: {
            size?: string | number | undefined;
            reverse?: boolean | undefined;
            preset?: string | undefined;
            ariaLabel?: import("../../composables").TranslationProp | undefined;
            modelValue?: string | number | undefined;
            color?: string | undefined;
            indeterminate?: boolean | undefined;
            max?: string | number | undefined;
            rounded?: boolean | undefined;
            buffer?: string | number | undefined;
            contentInside?: boolean | undefined;
            showPercent?: boolean | undefined;
        } & import("vue").HTMLAttributes;
        VaProgressCircle: {
            size?: string | number | undefined;
            preset?: string | undefined;
            ariaLabel?: import("../../composables").TranslationProp | undefined;
            modelValue?: string | number | undefined;
            color?: string | undefined;
            sizesConfig?: Record<string, any> | undefined;
            fontSizesConfig?: Record<string, any> | undefined;
            indeterminate?: boolean | undefined;
            thickness?: string | number | undefined;
        } & import("vue").HTMLAttributes;
        VaRadio: {
            label?: string | undefined;
            option?: any;
            error?: boolean | undefined;
            options?: any[] | undefined;
            preset?: string | undefined;
            name?: string | undefined;
            success?: boolean | undefined;
            disabled?: boolean | undefined;
            readonly?: boolean | undefined;
            errorMessages?: string | string[] | undefined;
            modelValue?: any;
            stateful?: boolean | undefined;
            color?: string | undefined;
            loading?: boolean | undefined;
            rules?: import("../../composables").ValidationRule<any>[] | undefined;
            dirty?: boolean | undefined;
            errorCount?: string | number | undefined;
            messages?: string | string[] | undefined;
            immediateValidation?: boolean | undefined;
            textBy?: import("../../composables").StringOrFunction | undefined;
            valueBy?: import("../../composables").StringOrFunction | undefined;
            trackBy?: import("../../composables").StringOrFunction | undefined;
            disabledBy?: import("../../composables").StringOrFunction | undefined;
            groupBy?: import("../../composables").StringOrFunction | undefined;
            vertical?: boolean | undefined;
            indeterminate?: boolean | undefined;
            indeterminateValue?: any;
            arrayValue?: string | number | boolean | Record<string, any> | undefined;
            leftLabel?: boolean | undefined;
            trueValue?: any;
            falseValue?: any;
        } & import("vue").HTMLAttributes;
        VaRating: {
            size?: NonNullable<string | number | undefined> | undefined;
            preset?: string | undefined;
            ariaLabel?: import("../../composables").TranslationProp | undefined;
            disabled?: NonNullable<boolean | undefined> | undefined;
            readonly?: NonNullable<boolean | undefined> | undefined;
            modelValue?: number | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            sizesConfig?: Record<string, any> | undefined;
            hover?: NonNullable<boolean | undefined> | undefined;
            fontSizesConfig?: Record<string, any> | undefined;
            tabindex?: NonNullable<string | number | undefined> | undefined;
            clearable?: boolean | undefined;
            icon?: string | undefined;
            max?: string | number | undefined;
            unselectedColor?: string | undefined;
            halfIcon?: string | undefined;
            emptyIcon?: string | undefined;
            halves?: boolean | undefined;
            numbers?: boolean | undefined;
            texts?: string[] | undefined;
            ariaItemLabel?: import("../../composables").TranslationProp | undefined;
        } & import("vue").HTMLAttributes;
        VaSelect: {
            label?: string | undefined;
            search?: string | undefined;
            error?: boolean | undefined;
            anchor?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
            options?: import("../../composables").SelectableOption[] | undefined;
            preset?: string | undefined;
            name?: string | undefined;
            success?: boolean | undefined;
            ariaLabel?: import("../../composables").TranslationProp | undefined;
            role?: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined> | undefined;
            disabled?: NonNullable<boolean | undefined> | undefined;
            readonly?: NonNullable<boolean | undefined> | undefined;
            errorMessages?: string | string[] | undefined;
            trigger?: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined> | undefined;
            modelValue?: import("../../composables").SelectableOption | import("../../composables").SelectableOption[];
            color?: string | undefined;
            loading?: boolean | undefined;
            delay?: number | undefined;
            target?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
            rules?: import("../../composables").ValidationRule<import("../../composables").SelectableOption>[] | undefined;
            dirty?: boolean | undefined;
            errorCount?: string | number | undefined;
            messages?: string | string[] | undefined;
            immediateValidation?: boolean | undefined;
            textBy?: import("../../composables").StringOrFunction | undefined;
            valueBy?: import("../../composables").StringOrFunction | undefined;
            trackBy?: import("../../composables").StringOrFunction | undefined;
            disabledBy?: import("../../composables").StringOrFunction | undefined;
            groupBy?: import("../../composables").StringOrFunction | undefined;
            width?: string | undefined;
            placement?: NonNullable<import("../../composables").PlacementWithAlias | undefined> | undefined;
            hoverOverTimeout?: NonNullable<string | number | undefined> | undefined;
            hoverOutTimeout?: NonNullable<string | number | undefined> | undefined;
            autoPlacement?: NonNullable<boolean | undefined> | undefined;
            stickToEdges?: NonNullable<boolean | undefined> | undefined;
            keepAnchorWidth?: NonNullable<boolean | undefined> | undefined;
            verticalScrollOnOverflow?: NonNullable<boolean | undefined> | undefined;
            anchorSelector?: string | undefined;
            closeOnClickOutside?: NonNullable<boolean | undefined> | undefined;
            closeOnFocusOutside?: NonNullable<boolean | undefined> | undefined;
            closeOnAnchorClick?: NonNullable<boolean | undefined> | undefined;
            closeOnContentClick?: NonNullable<boolean | undefined> | undefined;
            isContentHoverable?: NonNullable<boolean | undefined> | undefined;
            offset?: NonNullable<import("../va-dropdown/types").DropdownOffsetProp | undefined> | undefined;
            cursor?: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined> | undefined;
            teleport?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
            contentClass?: string | undefined;
            background?: string | undefined;
            closeOnChange?: boolean | undefined;
            isOpen?: boolean | undefined;
            tabindex?: string | number | undefined;
            requiredMark?: NonNullable<boolean | undefined> | undefined;
            inputAriaLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
            inputAriaLabelledby?: string | undefined;
            inputAriaDescribedby?: string | undefined;
            counter?: NonNullable<boolean | undefined> | undefined;
            maxLength?: NonNullable<string | number | undefined> | undefined;
            placeholder?: string | undefined;
            innerLabel?: NonNullable<boolean | undefined> | undefined;
            clearable?: boolean | undefined;
            clearableIcon?: string | undefined;
            clearValue?: string | undefined;
            autocomplete?: boolean | undefined;
            multiple?: boolean | undefined;
            maxHeight?: string | undefined;
            separator?: string | undefined;
            virtualScroller?: boolean | undefined;
            allowCreate?: boolean | "unique" | undefined;
            searchable?: boolean | undefined;
            noOptionsText?: import("../../composables").TranslationProp | undefined;
            hideSelected?: boolean | undefined;
            selectedTopShown?: boolean | undefined;
            highlightMatchedText?: boolean | undefined;
            minSearchChars?: string | number | undefined;
            autoSelectFirstOption?: boolean | undefined;
            searchPlaceholderText?: import("../../composables").TranslationProp | undefined;
            ariaSearchLabel?: import("../../composables").TranslationProp | undefined;
            ariaClearLabel?: import("../../composables").TranslationProp | undefined;
            dropdownIcon?: string | import("..").SelectDropdownIcon | undefined;
            maxVisibleOptions?: number | undefined;
            maxSelections?: string | number | undefined;
        } & import("vue").HTMLAttributes;
        VaSeparator: {} & import("vue").HTMLAttributes;
        VaSkeleton: {
            ariaLabel?: import("../../composables").TranslationProp | undefined;
            tag?: string | undefined;
            color?: string | undefined;
            delay?: string | number | undefined;
            width?: string | undefined;
            height?: string | undefined;
            lines?: string | number | undefined;
            animation?: "none" | "pulse" | "wave" | undefined;
            lineGap?: string | undefined;
            lastLineWidth?: string | undefined;
            variant?: "circle" | "text" | "rounded" | "squared" | undefined;
        } & import("vue").HTMLAttributes;
        VaSkeletonGroup: {
            color?: string | undefined;
            delay?: string | number | undefined;
            lines?: string | number | undefined;
            animation?: "none" | "pulse" | "wave" | undefined;
            lineGap?: string | undefined;
            lastLineWidth?: string | undefined;
        } & import("vue").HTMLAttributes;
        VaSidebar: {
            preset?: string | undefined;
            modelValue?: boolean | undefined;
            color?: string | undefined;
            width?: string | undefined;
            closeOnClickOutside?: boolean | undefined;
            readonly textColor?: string | undefined;
            borderColor?: string | undefined;
            gradient?: boolean | undefined;
            hoverOpacity?: string | number | undefined;
            activeColor?: string | undefined;
            hoverable?: boolean | undefined;
            animated?: string | boolean | undefined;
            hoverColor?: string | undefined;
            minimized?: boolean | undefined;
            minimizedWidth?: string | undefined;
        } & import("vue").HTMLAttributes;
        VaSidebarItem: {
            replace?: boolean | undefined;
            preset?: string | undefined;
            append?: boolean | undefined;
            disabled?: boolean | undefined;
            tag?: string | undefined;
            href?: string | undefined;
            to?: string | Record<string, any> | undefined;
            exact?: boolean | undefined;
            activeClass?: string | undefined;
            exactActiveClass?: string | undefined;
            target?: string | undefined;
            textColor?: string | undefined;
            borderColor?: string | undefined;
            hoverOpacity?: string | number | undefined;
            active?: boolean | undefined;
            activeColor?: string | undefined;
            hoverColor?: string | undefined;
        } & import("vue").HTMLAttributes;
        VaSidebarItemContent: {} & import("vue").HTMLAttributes;
        VaSidebarItemTitle: {} & import("vue").HTMLAttributes;
        VaSlider: {
            label?: string | undefined;
            preset?: string | undefined;
            ariaLabel?: import("../../composables").TranslationProp | undefined;
            disabled?: boolean | undefined;
            readonly?: boolean | undefined;
            modelValue?: number | number[] | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            step?: string | number | undefined;
            vertical?: boolean | undefined;
            max?: string | number | undefined;
            min?: string | number | undefined;
            range?: boolean | undefined;
            readonly trackLabel?: string | ((val: number, order?: number | undefined) => string) | undefined;
            trackColor?: string | undefined;
            labelColor?: string | undefined;
            trackLabelVisible?: boolean | undefined;
            invertLabel?: boolean | undefined;
            pins?: boolean | undefined;
            iconPrepend?: string | undefined;
            iconAppend?: string | undefined;
            showTrack?: boolean | undefined;
        } & import("vue").HTMLAttributes;
        VaSpacer: {} & import("vue").HTMLAttributes;
        VaSplit: {
            preset?: string | undefined;
            ariaLabel?: import("../../composables").TranslationProp | undefined;
            disabled?: boolean | undefined;
            modelValue?: number | undefined;
            stateful?: boolean | undefined;
            vertical?: boolean | undefined;
            maximization?: boolean | undefined;
            maximizeStart?: boolean | undefined;
            limits?: [import("../va-split/types").SplitLimit, import("../va-split/types").SplitLimit] | undefined;
            snapping?: import("../va-split/types").SnappingMark[] | undefined;
            snappingRange?: string | number | undefined;
        } & import("vue").HTMLAttributes;
        VaSwitch: {
            label?: string | undefined;
            error?: boolean | undefined;
            size?: "small" | "medium" | "large" | undefined;
            preset?: string | undefined;
            name?: string | undefined;
            success?: boolean | undefined;
            id?: string | undefined;
            ariaLabel?: import("../../composables").TranslationProp | undefined;
            disabled?: boolean | undefined;
            readonly?: boolean | undefined;
            errorMessages?: string | string[] | undefined;
            modelValue?: string | number | boolean | unknown[] | Record<string, unknown> | null | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            loading?: boolean | undefined;
            rules?: import("../../composables").ValidationRule<any>[] | undefined;
            dirty?: boolean | undefined;
            errorCount?: string | number | undefined;
            messages?: string | string[] | undefined;
            immediateValidation?: boolean | undefined;
            indeterminate?: boolean | undefined;
            indeterminateValue?: any;
            arrayValue?: string | number | boolean | Record<string, any> | undefined;
            leftLabel?: boolean | undefined;
            trueValue?: any;
            falseValue?: any;
            trueLabel?: string | undefined;
            falseLabel?: string | undefined;
            trueInnerLabel?: string | undefined;
            falseInnerLabel?: string | undefined;
            offColor?: string | undefined;
        } & import("vue").HTMLAttributes;
        VaTabs: {
            preset?: string | undefined;
            left?: boolean | undefined;
            center?: boolean | undefined;
            right?: boolean | undefined;
            disabled?: boolean | undefined;
            modelValue?: string | number | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            vertical?: boolean | undefined;
            grow?: boolean | undefined;
            hidePagination?: boolean | undefined;
            hideSlider?: boolean | undefined;
            prevIcon?: string | undefined;
            nextIcon?: string | undefined;
            ariaMoveRightLabel?: import("../../composables").TranslationProp | undefined;
            ariaMoveLeftLabel?: import("../../composables").TranslationProp | undefined;
        } & import("vue").HTMLAttributes;
        VaTab: {
            label?: string | undefined;
            replace?: boolean | undefined;
            preset?: string | undefined;
            readonly name?: string | number | undefined;
            append?: boolean | undefined;
            disabled?: boolean | undefined;
            tag?: string | undefined;
            href?: string | undefined;
            color?: string | undefined;
            to?: string | Record<string, any> | undefined;
            exact?: boolean | undefined;
            activeClass?: string | undefined;
            exactActiveClass?: string | undefined;
            target?: string | undefined;
            icon?: string | undefined;
            selected?: boolean | undefined;
        } & import("vue").HTMLAttributes;
        VaStepper: {
            ariaLabel?: import("../../composables").TranslationProp | undefined;
            modelValue?: number | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            vertical?: boolean | undefined;
            linear?: boolean | undefined;
            steps?: import("../va-stepper/types").Step[] | undefined;
            navigationDisabled?: boolean | undefined;
            controlsHidden?: boolean | undefined;
            nextDisabled?: boolean | undefined;
            nextDisabledOnError?: boolean | undefined;
            finishButtonHidden?: boolean | undefined;
            readonly finishStep?: import("../va-stepper/types").Step | undefined;
        } & import("vue").HTMLAttributes;
        VaTimeInput: {
            label?: string | undefined;
            error?: boolean | undefined;
            anchor?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
            preset?: string | undefined;
            name?: string | undefined;
            view?: NonNullable<"hours" | "minutes" | "seconds" | undefined> | undefined;
            success?: boolean | undefined;
            ariaLabel?: import("../../composables").TranslationProp | undefined;
            role?: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined> | undefined;
            disabled?: NonNullable<boolean | undefined> | undefined;
            readonly?: NonNullable<boolean | undefined> | undefined;
            errorMessages?: string | string[] | undefined;
            trigger?: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined> | undefined;
            modelValue?: Date | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            loading?: NonNullable<boolean | undefined> | undefined;
            target?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
            rules?: import("../../composables").ValidationRule<Date>[] | undefined;
            dirty?: boolean | undefined;
            errorCount?: string | number | undefined;
            messages?: string | string[] | undefined;
            immediateValidation?: boolean | undefined;
            placement?: NonNullable<import("../../composables").PlacementWithAlias | undefined> | undefined;
            hoverOverTimeout?: NonNullable<string | number | undefined> | undefined;
            hoverOutTimeout?: NonNullable<string | number | undefined> | undefined;
            autoPlacement?: NonNullable<boolean | undefined> | undefined;
            stickToEdges?: NonNullable<boolean | undefined> | undefined;
            keepAnchorWidth?: NonNullable<boolean | undefined> | undefined;
            verticalScrollOnOverflow?: NonNullable<boolean | undefined> | undefined;
            anchorSelector?: string | undefined;
            closeOnClickOutside?: NonNullable<boolean | undefined> | undefined;
            closeOnFocusOutside?: NonNullable<boolean | undefined> | undefined;
            closeOnAnchorClick?: NonNullable<boolean | undefined> | undefined;
            closeOnContentClick?: boolean | undefined;
            isContentHoverable?: NonNullable<boolean | undefined> | undefined;
            offset?: NonNullable<import("../va-dropdown/types").DropdownOffsetProp | undefined> | undefined;
            cursor?: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined> | undefined;
            teleport?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
            contentClass?: string | undefined;
            background?: string | undefined;
            closeOnChange?: boolean | undefined;
            isOpen?: boolean | undefined;
            requiredMark?: NonNullable<boolean | undefined> | undefined;
            inputAriaLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
            inputAriaLabelledby?: string | undefined;
            inputAriaDescribedby?: string | undefined;
            counter?: NonNullable<boolean | undefined> | undefined;
            placeholder?: string | undefined;
            innerLabel?: NonNullable<boolean | undefined> | undefined;
            ariaResetLabel?: import("../../composables").TranslationProp | undefined;
            clearable?: boolean | undefined;
            clearableIcon?: string | undefined;
            clearValue?: Date | undefined;
            icon?: string | undefined;
            leftIcon?: boolean | undefined;
            manualInput?: boolean | undefined;
            readonly format?: ((date?: Date | undefined) => string) | undefined;
            readonly parse?: ((input: string) => Date) | undefined;
            ariaToggleDropdownLabel?: import("../../composables").TranslationProp | undefined;
            ampm?: NonNullable<boolean | undefined> | undefined;
            hidePeriodSwitch?: NonNullable<boolean | undefined> | undefined;
            periodUpdatesModelValue?: NonNullable<boolean | undefined> | undefined;
            hoursFilter?: ((h: number) => boolean) | undefined;
            minutesFilter?: ((h: number) => boolean) | undefined;
            secondsFilter?: ((h: number) => boolean) | undefined;
            framed?: NonNullable<boolean | undefined> | undefined;
            cellHeight?: NonNullable<string | number | undefined> | undefined;
            visibleCellsCount?: NonNullable<string | number | undefined> | undefined;
        } & import("vue").HTMLAttributes;
        VaTimeline: {} & import("vue").HTMLAttributes;
        VaTimelineItem: {
            preset?: string | undefined;
            color?: string | undefined;
            vertical?: NonNullable<boolean | undefined> | undefined;
            active?: NonNullable<boolean | undefined> | undefined;
            activePrevious?: NonNullable<boolean | undefined> | undefined;
            activeNext?: NonNullable<boolean | undefined> | undefined;
            isFirst?: boolean | undefined;
            isLast?: boolean | undefined;
            inverted?: boolean | undefined;
        } & import("vue").HTMLAttributes;
        VaTimePicker: {
            preset?: string | undefined;
            view?: "hours" | "minutes" | "seconds" | undefined;
            disabled?: boolean | undefined;
            readonly?: boolean | undefined;
            readonly modelValue?: Date | undefined;
            stateful?: boolean | undefined;
            ampm?: boolean | undefined;
            hidePeriodSwitch?: boolean | undefined;
            periodUpdatesModelValue?: boolean | undefined;
            readonly hoursFilter?: ((h: number) => boolean) | undefined;
            readonly minutesFilter?: ((h: number) => boolean) | undefined;
            readonly secondsFilter?: ((h: number) => boolean) | undefined;
            framed?: boolean | undefined;
            cellHeight?: string | number | undefined;
            visibleCellsCount?: string | number | undefined;
        } & import("vue").HTMLAttributes;
        VaToast: {
            title?: string | undefined;
            preset?: string | undefined;
            readonly render?: Function | undefined;
            message?: string | Function | undefined;
            role?: import("../../utils/types/prop-type").StringWithAutocomplete<"status" | "alert" | "alertdialog"> | undefined;
            color?: string | undefined;
            duration?: string | number | undefined;
            position?: import("..").ToastPosition | undefined;
            icon?: string | undefined;
            inline?: boolean | undefined;
            ariaCloseLabel?: import("../../composables").TranslationProp | undefined;
            closeable?: boolean | undefined;
            multiLine?: boolean | undefined;
            offsetY?: string | number | undefined;
            offsetX?: string | number | undefined;
            dangerouslyUseHtmlString?: boolean | undefined;
            customClass?: string | undefined;
        } & import("vue").HTMLAttributes;
        VaTreeView: {
            filter?: string | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            textBy?: import("../va-tree-view/types").TreeViewPropKey | undefined;
            valueBy?: import("../va-tree-view/types").TreeViewPropKey | undefined;
            trackBy?: import("../va-tree-view/types").TreeViewPropKey | undefined;
            disabledBy?: import("../va-tree-view/types").TreeViewPropKey | undefined;
            checked?: (string | number | import("..").TreeNode)[] | undefined;
            expanded?: (string | number | import("..").TreeNode)[] | undefined;
            selectable?: boolean | undefined;
            filterMethod?: import("../va-tree-view/types").TreeViewFilterMethod | undefined;
            nodes?: import("..").TreeNode[] | undefined;
            selectionType?: string | undefined;
            iconBy?: import("../va-tree-view/types").TreeViewPropKey | undefined;
            expandedBy?: import("../va-tree-view/types").TreeViewPropKey | undefined;
            checkedBy?: import("../va-tree-view/types").TreeViewPropKey | undefined;
            childrenBy?: import("../va-tree-view/types").TreeViewPropKey | undefined;
            expandAll?: boolean | undefined;
            expandNodeBy?: "leaf" | "node" | undefined;
        } & import("vue").HTMLAttributes;
        VaScrollContainer: {
            size?: "small" | "medium" | "large" | undefined;
            color?: string | undefined;
            sizesConfig?: Record<string, any> | undefined;
            horizontal?: boolean | undefined;
            vertical?: boolean | undefined;
            fontSizesConfig?: Record<string, any> | undefined;
            gradient?: boolean | undefined;
            rtl?: boolean | undefined;
        } & import("vue").HTMLAttributes;
        VaViewer: {} & import("vue").HTMLAttributes;
        VaValue: {
            defaultValue?: any;
        } & import("vue").HTMLAttributes;
        VaVirtualScroller: {} & import("vue").HTMLAttributes;
        VaTextarea: {
            label?: string | undefined;
            error?: boolean | undefined;
            resize?: boolean | undefined;
            preset?: string | undefined;
            name?: string | undefined;
            success?: boolean | undefined;
            disabled?: NonNullable<boolean | undefined> | undefined;
            readonly?: NonNullable<boolean | undefined> | undefined;
            errorMessages?: string | string[] | undefined;
            modelValue?: string | number | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            loading?: NonNullable<boolean | undefined> | undefined;
            rules?: import("../../composables").ValidationRule<any>[] | undefined;
            dirty?: boolean | undefined;
            errorCount?: string | number | undefined;
            messages?: string | string[] | undefined;
            immediateValidation?: boolean | undefined;
            background?: string | undefined;
            requiredMark?: NonNullable<boolean | undefined> | undefined;
            inputAriaLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
            inputAriaLabelledby?: string | undefined;
            inputAriaDescribedby?: string | undefined;
            counter?: NonNullable<boolean | undefined> | undefined;
            maxLength?: NonNullable<string | number | undefined> | undefined;
            readonly placeholder?: string | undefined;
            innerLabel?: NonNullable<boolean | undefined> | undefined;
            clearValue?: string | undefined;
            autosize?: boolean | undefined;
            minRows?: string | number | undefined;
            readonly maxRows?: string | number | undefined;
        } & import("vue").HTMLAttributes;
        VaMenu: {
            anchor?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
            options?: import("../va-menu-list/types").VaMenuOption[] | undefined;
            preset?: string | undefined;
            ariaLabel?: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
            role?: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined> | undefined;
            disabled?: NonNullable<boolean | undefined> | undefined;
            readonly?: NonNullable<boolean | undefined> | undefined;
            trigger?: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined> | undefined;
            modelValue?: NonNullable<boolean | undefined> | undefined;
            stateful?: NonNullable<boolean | undefined> | undefined;
            target?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
            textBy?: NonNullable<import("../../composables").StringOrFunction | undefined> | undefined;
            valueBy?: NonNullable<import("../../composables").StringOrFunction | undefined> | undefined;
            trackBy?: NonNullable<import("../../composables").StringOrFunction | undefined> | undefined;
            disabledBy?: NonNullable<import("../../composables").StringOrFunction | undefined> | undefined;
            groupBy?: NonNullable<import("../../composables").StringOrFunction | undefined> | undefined;
            placement?: NonNullable<import("../../composables").PlacementWithAlias | undefined> | undefined;
            hoverOverTimeout?: NonNullable<string | number | undefined> | undefined;
            hoverOutTimeout?: NonNullable<string | number | undefined> | undefined;
            autoPlacement?: NonNullable<boolean | undefined> | undefined;
            stickToEdges?: boolean | undefined;
            keepAnchorWidth?: NonNullable<boolean | undefined> | undefined;
            verticalScrollOnOverflow?: NonNullable<boolean | undefined> | undefined;
            anchorSelector?: string | undefined;
            innerAnchorSelector?: string | undefined;
            closeOnClickOutside?: NonNullable<boolean | undefined> | undefined;
            closeOnFocusOutside?: NonNullable<boolean | undefined> | undefined;
            closeOnAnchorClick?: NonNullable<boolean | undefined> | undefined;
            closeOnContentClick?: NonNullable<boolean | undefined> | undefined;
            isContentHoverable?: NonNullable<boolean | undefined> | undefined;
            offset?: NonNullable<import("../va-dropdown/types").DropdownOffsetProp | undefined> | undefined;
            cursor?: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined> | undefined;
            teleport?: NonNullable<import("../../composables").MaybeHTMLElementOrSelector> | undefined;
            keyboardNavigation?: NonNullable<boolean | undefined> | undefined;
            contentClass?: string | undefined;
        } & import("vue").HTMLAttributes;
        VaMenuList: {
            options?: import("../va-menu-list/types").VaMenuOption[] | undefined;
            textBy?: import("../../composables").StringOrFunction | undefined;
            valueBy?: import("../../composables").StringOrFunction | undefined;
            trackBy?: import("../../composables").StringOrFunction | undefined;
            disabledBy?: import("../../composables").StringOrFunction | undefined;
            groupBy?: import("../../composables").StringOrFunction | undefined;
        } & import("vue").HTMLAttributes;
        VaMenuItem: {
            name?: string | undefined;
            disabled?: boolean | undefined;
            readonly icon?: string | undefined;
            readonly rightIcon?: string | undefined;
        } & import("vue").HTMLAttributes;
        VaMenuGroup: {
            color?: string | undefined;
            readonly groupName?: string | undefined;
        } & import("vue").HTMLAttributes;
        VaFormField: {} & import("vue").HTMLAttributes;
    } & {
        all: import("../../services/component-config").Props;
        presets: import("../../services/component-config").Presets;
    }>;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
