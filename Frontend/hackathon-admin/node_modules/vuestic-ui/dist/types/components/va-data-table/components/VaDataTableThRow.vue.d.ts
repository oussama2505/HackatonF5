import { PropType } from 'vue';
import type { TSortIcon } from '../hooks/useSortable';
import { DataTableSortingOrder, DataTableSelectMode, DataTableColumnInternal } from '../types';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    selectMode: {
        type: PropType<DataTableSelectMode>;
        default: string;
    };
    allRowsSelected: {
        type: BooleanConstructor;
        default: boolean;
    };
    severalRowsSelected: {
        type: BooleanConstructor;
        default: boolean;
    };
    columns: {
        type: PropType<DataTableColumnInternal[]>;
        required: true;
    };
    isFooter: {
        type: BooleanConstructor;
        default: boolean;
    };
    sortBySync: {
        type: StringConstructor;
        required: true;
    };
    sortingOrderIconName: {
        type: PropType<TSortIcon>;
        required: true;
    };
    sortingOrderSync: {
        type: PropType<DataTableSortingOrder>;
        default: null;
    };
    ariaSelectAllRowsLabel: {
        type: PropType<import("../../../composables").TranslationProp>;
        default: import("../../../composables").TranslationProp;
    };
    ariaSortColumnByLabel: {
        type: PropType<import("../../../composables").TranslationProp>;
        default: import("../../../composables").TranslationProp;
    };
    selectedColor: {
        type: StringConstructor;
        default: string;
    };
    allowFooterSorting: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickyHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickyFooter: {
        type: BooleanConstructor;
        default: boolean;
    };
    height: {
        type: PropType<string | number | undefined>;
    };
    selectable: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    toggleBulkSelection: (...args: any[]) => void;
    toggleSorting: (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    selectMode: {
        type: PropType<DataTableSelectMode>;
        default: string;
    };
    allRowsSelected: {
        type: BooleanConstructor;
        default: boolean;
    };
    severalRowsSelected: {
        type: BooleanConstructor;
        default: boolean;
    };
    columns: {
        type: PropType<DataTableColumnInternal[]>;
        required: true;
    };
    isFooter: {
        type: BooleanConstructor;
        default: boolean;
    };
    sortBySync: {
        type: StringConstructor;
        required: true;
    };
    sortingOrderIconName: {
        type: PropType<TSortIcon>;
        required: true;
    };
    sortingOrderSync: {
        type: PropType<DataTableSortingOrder>;
        default: null;
    };
    ariaSelectAllRowsLabel: {
        type: PropType<import("../../../composables").TranslationProp>;
        default: import("../../../composables").TranslationProp;
    };
    ariaSortColumnByLabel: {
        type: PropType<import("../../../composables").TranslationProp>;
        default: import("../../../composables").TranslationProp;
    };
    selectedColor: {
        type: StringConstructor;
        default: string;
    };
    allowFooterSorting: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickyHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickyFooter: {
        type: BooleanConstructor;
        default: boolean;
    };
    height: {
        type: PropType<string | number | undefined>;
    };
    selectable: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onToggleBulkSelection?: ((...args: any[]) => any) | undefined;
    onToggleSorting?: ((...args: any[]) => any) | undefined;
}, {
    selectMode: DataTableSelectMode;
    allRowsSelected: boolean;
    severalRowsSelected: boolean;
    isFooter: boolean;
    sortingOrderSync: DataTableSortingOrder;
    ariaSelectAllRowsLabel: import("../../../composables").TranslationProp;
    ariaSortColumnByLabel: import("../../../composables").TranslationProp;
    selectedColor: string;
    allowFooterSorting: boolean;
    stickyHeader: boolean;
    stickyFooter: boolean;
    selectable: boolean;
}, {}>, Partial<Record<NonNullable<`header(${string})` | `footer(${string})`>, (_: {
    label: string;
    key: string;
}) => any>> & Partial<Record<NonNullable<"footer" | "header">, (_: {
    label: string;
    key: string;
}) => any>>>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
