export declare const VaDataTableThRow: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        selectMode: {
            type: import("vue").PropType<import("..").DataTableSelectMode>;
            default: string;
        };
        allRowsSelected: {
            type: BooleanConstructor;
            default: boolean;
        };
        severalRowsSelected: {
            type: BooleanConstructor;
            default: boolean;
        };
        columns: {
            type: import("vue").PropType<import("..").DataTableColumnInternal[]>;
            required: true;
        };
        isFooter: {
            type: BooleanConstructor;
            default: boolean;
        };
        sortBySync: {
            type: StringConstructor;
            required: true;
        };
        sortingOrderIconName: {
            type: import("vue").PropType<import("../hooks/useSortable").TSortIcon>;
            required: true;
        };
        sortingOrderSync: {
            type: import("vue").PropType<import("..").DataTableSortingOrder>;
            default: null;
        };
        ariaSelectAllRowsLabel: {
            type: import("vue").PropType<import("../../../composables").TranslationProp>;
            default: import("../../../composables").TranslationProp;
        };
        ariaSortColumnByLabel: {
            type: import("vue").PropType<import("../../../composables").TranslationProp>;
            default: import("../../../composables").TranslationProp;
        };
        selectedColor: {
            type: StringConstructor;
            default: string;
        };
        allowFooterSorting: {
            type: BooleanConstructor;
            default: boolean;
        };
        stickyHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        stickyFooter: {
            type: BooleanConstructor;
            default: boolean;
        };
        height: {
            type: import("vue").PropType<string | number | undefined>;
        };
        selectable: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        onToggleBulkSelection?: ((...args: any[]) => any) | undefined;
        onToggleSorting?: ((...args: any[]) => any) | undefined;
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        toggleBulkSelection: (...args: any[]) => void;
        toggleSorting: (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        selectMode: {
            type: import("vue").PropType<import("..").DataTableSelectMode>;
            default: string;
        };
        allRowsSelected: {
            type: BooleanConstructor;
            default: boolean;
        };
        severalRowsSelected: {
            type: BooleanConstructor;
            default: boolean;
        };
        columns: {
            type: import("vue").PropType<import("..").DataTableColumnInternal[]>;
            required: true;
        };
        isFooter: {
            type: BooleanConstructor;
            default: boolean;
        };
        sortBySync: {
            type: StringConstructor;
            required: true;
        };
        sortingOrderIconName: {
            type: import("vue").PropType<import("../hooks/useSortable").TSortIcon>;
            required: true;
        };
        sortingOrderSync: {
            type: import("vue").PropType<import("..").DataTableSortingOrder>;
            default: null;
        };
        ariaSelectAllRowsLabel: {
            type: import("vue").PropType<import("../../../composables").TranslationProp>;
            default: import("../../../composables").TranslationProp;
        };
        ariaSortColumnByLabel: {
            type: import("vue").PropType<import("../../../composables").TranslationProp>;
            default: import("../../../composables").TranslationProp;
        };
        selectedColor: {
            type: StringConstructor;
            default: string;
        };
        allowFooterSorting: {
            type: BooleanConstructor;
            default: boolean;
        };
        stickyHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        stickyFooter: {
            type: BooleanConstructor;
            default: boolean;
        };
        height: {
            type: import("vue").PropType<string | number | undefined>;
        };
        selectable: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        onToggleBulkSelection?: ((...args: any[]) => any) | undefined;
        onToggleSorting?: ((...args: any[]) => any) | undefined;
    }, {
        selectMode: import("..").DataTableSelectMode;
        allRowsSelected: boolean;
        severalRowsSelected: boolean;
        isFooter: boolean;
        sortingOrderSync: import("..").DataTableSortingOrder;
        ariaSelectAllRowsLabel: import("../../../composables").TranslationProp;
        ariaSortColumnByLabel: import("../../../composables").TranslationProp;
        selectedColor: string;
        allowFooterSorting: boolean;
        stickyHeader: boolean;
        stickyFooter: boolean;
        selectable: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        selectMode: {
            type: import("vue").PropType<import("..").DataTableSelectMode>;
            default: string;
        };
        allRowsSelected: {
            type: BooleanConstructor;
            default: boolean;
        };
        severalRowsSelected: {
            type: BooleanConstructor;
            default: boolean;
        };
        columns: {
            type: import("vue").PropType<import("..").DataTableColumnInternal[]>;
            required: true;
        };
        isFooter: {
            type: BooleanConstructor;
            default: boolean;
        };
        sortBySync: {
            type: StringConstructor;
            required: true;
        };
        sortingOrderIconName: {
            type: import("vue").PropType<import("../hooks/useSortable").TSortIcon>;
            required: true;
        };
        sortingOrderSync: {
            type: import("vue").PropType<import("..").DataTableSortingOrder>;
            default: null;
        };
        ariaSelectAllRowsLabel: {
            type: import("vue").PropType<import("../../../composables").TranslationProp>;
            default: import("../../../composables").TranslationProp;
        };
        ariaSortColumnByLabel: {
            type: import("vue").PropType<import("../../../composables").TranslationProp>;
            default: import("../../../composables").TranslationProp;
        };
        selectedColor: {
            type: StringConstructor;
            default: string;
        };
        allowFooterSorting: {
            type: BooleanConstructor;
            default: boolean;
        };
        stickyHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        stickyFooter: {
            type: BooleanConstructor;
            default: boolean;
        };
        height: {
            type: import("vue").PropType<string | number | undefined>;
        };
        selectable: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        onToggleBulkSelection?: ((...args: any[]) => any) | undefined;
        onToggleSorting?: ((...args: any[]) => any) | undefined;
    }, {}, {}, {}, {}, {
        selectMode: import("..").DataTableSelectMode;
        allRowsSelected: boolean;
        severalRowsSelected: boolean;
        isFooter: boolean;
        sortingOrderSync: import("..").DataTableSortingOrder;
        ariaSelectAllRowsLabel: import("../../../composables").TranslationProp;
        ariaSortColumnByLabel: import("../../../composables").TranslationProp;
        selectedColor: string;
        allowFooterSorting: boolean;
        stickyHeader: boolean;
        stickyFooter: boolean;
        selectable: boolean;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    selectMode: {
        type: import("vue").PropType<import("..").DataTableSelectMode>;
        default: string;
    };
    allRowsSelected: {
        type: BooleanConstructor;
        default: boolean;
    };
    severalRowsSelected: {
        type: BooleanConstructor;
        default: boolean;
    };
    columns: {
        type: import("vue").PropType<import("..").DataTableColumnInternal[]>;
        required: true;
    };
    isFooter: {
        type: BooleanConstructor;
        default: boolean;
    };
    sortBySync: {
        type: StringConstructor;
        required: true;
    };
    sortingOrderIconName: {
        type: import("vue").PropType<import("../hooks/useSortable").TSortIcon>;
        required: true;
    };
    sortingOrderSync: {
        type: import("vue").PropType<import("..").DataTableSortingOrder>;
        default: null;
    };
    ariaSelectAllRowsLabel: {
        type: import("vue").PropType<import("../../../composables").TranslationProp>;
        default: import("../../../composables").TranslationProp;
    };
    ariaSortColumnByLabel: {
        type: import("vue").PropType<import("../../../composables").TranslationProp>;
        default: import("../../../composables").TranslationProp;
    };
    selectedColor: {
        type: StringConstructor;
        default: string;
    };
    allowFooterSorting: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickyHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickyFooter: {
        type: BooleanConstructor;
        default: boolean;
    };
    height: {
        type: import("vue").PropType<string | number | undefined>;
    };
    selectable: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onToggleBulkSelection?: ((...args: any[]) => any) | undefined;
    onToggleSorting?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    toggleBulkSelection: (...args: any[]) => void;
    toggleSorting: (...args: any[]) => void;
}, string, {
    selectMode: import("..").DataTableSelectMode;
    allRowsSelected: boolean;
    severalRowsSelected: boolean;
    isFooter: boolean;
    sortingOrderSync: import("..").DataTableSortingOrder;
    ariaSelectAllRowsLabel: import("../../../composables").TranslationProp;
    ariaSortColumnByLabel: import("../../../composables").TranslationProp;
    selectedColor: string;
    allowFooterSorting: boolean;
    stickyHeader: boolean;
    stickyFooter: boolean;
    selectable: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: Partial<Record<NonNullable<`header(${string})` | `footer(${string})`>, (_: {
        label: string;
        key: string;
    }) => any>> & Partial<Record<NonNullable<"footer" | "header">, (_: {
        label: string;
        key: string;
    }) => any>>;
});
