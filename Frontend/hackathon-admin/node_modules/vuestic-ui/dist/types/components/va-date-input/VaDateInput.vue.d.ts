import { PropType, Ref } from 'vue';
import type { DateInputModelValue, DateInputValue } from './types';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    clearValue: {
        type: PropType<any>;
        default: undefined;
    };
    modelValue: {
        type: PropType<DateInputModelValue>;
    };
    resetOnClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    offset: {
        default: () => number[];
        type: PropType<NonNullable<import("../va-dropdown/types").DropdownOffsetProp | undefined>>;
        required: true;
    };
    format: {
        type: PropType<(date: DateInputModelValue) => string>;
    };
    formatDate: {
        type: PropType<(date: Date) => string>;
        default: (d: Date) => string;
    };
    /** Force model value to string instead of date */
    formatValue: {
        type: PropType<(date: DateInputModelValue) => string>;
    };
    parse: {
        type: PropType<(input: string) => DateInputValue>;
    };
    parseDate: {
        type: PropType<(input: string) => Date>;
    };
    delimiter: {
        type: StringConstructor;
        default: string;
    };
    rangeDelimiter: {
        type: StringConstructor;
        default: string;
    };
    manualInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    leftIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    ariaToggleDropdownLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    ariaResetLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    ariaSelectedDateLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    rules: {
        type: PropType<import("../../composables").ValidationRule<DateInputModelValue>[]>;
        default: () => any;
        required: false;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    dirty: {
        type: BooleanConstructor;
        default: boolean;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    view: {
        type: PropType<Partial<import("../va-date-picker/types").DatePickerView>>;
        required: true;
        default: Partial<import("../va-date-picker/types").DatePickerView> | undefined;
    };
    type: {
        type: PropType<NonNullable<import("../va-date-picker/types").DatePickerType | undefined>>;
        required: true;
        default: import("../va-date-picker/types").DatePickerType | undefined;
    };
    disabled: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    readonly: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    "onUpdate:modelValue": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    stateful: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    mode: {
        type: PropType<NonNullable<NonNullable<import("../va-date-picker/types").DatePickerMode | undefined> | undefined>>;
        required: true;
        default: NonNullable<import("../va-date-picker/types").DatePickerMode | undefined> | undefined;
    };
    "child:prevButton": {
        type: PropType<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            preset: string;
            append: boolean;
            type: string;
            disabled: boolean;
            tag: string;
            href: string;
            color: string;
            loading: boolean;
            to: string | Record<string, any>;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            target: string;
            sizesConfig: Record<string, any>;
            textColor: string;
            round: boolean;
            fontSizesConfig: Record<string, any>;
            icon: string;
            block: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            borderColor: string;
            gradient: boolean;
            plain: boolean;
            iconRight: string;
            iconColor: string;
            pressedBehavior: "mask" | "opacity";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "mask" | "opacity";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly disabled: boolean;
            readonly tag: string;
            readonly color: string;
            readonly loading: boolean;
            readonly sizesConfig: Record<string, any>;
            readonly textColor: string;
            readonly round: boolean;
            readonly fontSizesConfig: Record<string, any>;
            readonly icon: string;
            readonly block: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly plain: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "mask" | "opacity";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "mask" | "opacity";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: string | undefined;
            readonly append?: boolean | undefined;
            readonly href?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly target?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
        required: true;
        default: NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            preset: string;
            append: boolean;
            type: string;
            disabled: boolean;
            tag: string;
            href: string;
            color: string;
            loading: boolean;
            to: string | Record<string, any>;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            target: string;
            sizesConfig: Record<string, any>;
            textColor: string;
            round: boolean;
            fontSizesConfig: Record<string, any>;
            icon: string;
            block: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            borderColor: string;
            gradient: boolean;
            plain: boolean;
            iconRight: string;
            iconColor: string;
            pressedBehavior: "mask" | "opacity";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "mask" | "opacity";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly disabled: boolean;
            readonly tag: string;
            readonly color: string;
            readonly loading: boolean;
            readonly sizesConfig: Record<string, any>;
            readonly textColor: string;
            readonly round: boolean;
            readonly fontSizesConfig: Record<string, any>;
            readonly icon: string;
            readonly block: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly plain: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "mask" | "opacity";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "mask" | "opacity";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: string | undefined;
            readonly append?: boolean | undefined;
            readonly href?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly target?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
    };
    "child:nextButton": {
        type: PropType<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            preset: string;
            append: boolean;
            type: string;
            disabled: boolean;
            tag: string;
            href: string;
            color: string;
            loading: boolean;
            to: string | Record<string, any>;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            target: string;
            sizesConfig: Record<string, any>;
            textColor: string;
            round: boolean;
            fontSizesConfig: Record<string, any>;
            icon: string;
            block: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            borderColor: string;
            gradient: boolean;
            plain: boolean;
            iconRight: string;
            iconColor: string;
            pressedBehavior: "mask" | "opacity";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "mask" | "opacity";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly disabled: boolean;
            readonly tag: string;
            readonly color: string;
            readonly loading: boolean;
            readonly sizesConfig: Record<string, any>;
            readonly textColor: string;
            readonly round: boolean;
            readonly fontSizesConfig: Record<string, any>;
            readonly icon: string;
            readonly block: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly plain: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "mask" | "opacity";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "mask" | "opacity";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: string | undefined;
            readonly append?: boolean | undefined;
            readonly href?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly target?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
        required: true;
        default: NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            preset: string;
            append: boolean;
            type: string;
            disabled: boolean;
            tag: string;
            href: string;
            color: string;
            loading: boolean;
            to: string | Record<string, any>;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            target: string;
            sizesConfig: Record<string, any>;
            textColor: string;
            round: boolean;
            fontSizesConfig: Record<string, any>;
            icon: string;
            block: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            borderColor: string;
            gradient: boolean;
            plain: boolean;
            iconRight: string;
            iconColor: string;
            pressedBehavior: "mask" | "opacity";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "mask" | "opacity";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly disabled: boolean;
            readonly tag: string;
            readonly color: string;
            readonly loading: boolean;
            readonly sizesConfig: Record<string, any>;
            readonly textColor: string;
            readonly round: boolean;
            readonly fontSizesConfig: Record<string, any>;
            readonly icon: string;
            readonly block: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly plain: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "mask" | "opacity";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "mask" | "opacity";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: string | undefined;
            readonly append?: boolean | undefined;
            readonly href?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly target?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
    };
    "child:middleButton": {
        type: PropType<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            preset: string;
            append: boolean;
            type: string;
            disabled: boolean;
            tag: string;
            href: string;
            color: string;
            loading: boolean;
            to: string | Record<string, any>;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            target: string;
            sizesConfig: Record<string, any>;
            textColor: string;
            round: boolean;
            fontSizesConfig: Record<string, any>;
            icon: string;
            block: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            borderColor: string;
            gradient: boolean;
            plain: boolean;
            iconRight: string;
            iconColor: string;
            pressedBehavior: "mask" | "opacity";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "mask" | "opacity";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly disabled: boolean;
            readonly tag: string;
            readonly color: string;
            readonly loading: boolean;
            readonly sizesConfig: Record<string, any>;
            readonly textColor: string;
            readonly round: boolean;
            readonly fontSizesConfig: Record<string, any>;
            readonly icon: string;
            readonly block: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly plain: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "mask" | "opacity";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "mask" | "opacity";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: string | undefined;
            readonly append?: boolean | undefined;
            readonly href?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly target?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
        required: true;
        default: NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            preset: string;
            append: boolean;
            type: string;
            disabled: boolean;
            tag: string;
            href: string;
            color: string;
            loading: boolean;
            to: string | Record<string, any>;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            target: string;
            sizesConfig: Record<string, any>;
            textColor: string;
            round: boolean;
            fontSizesConfig: Record<string, any>;
            icon: string;
            block: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            borderColor: string;
            gradient: boolean;
            plain: boolean;
            iconRight: string;
            iconColor: string;
            pressedBehavior: "mask" | "opacity";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "mask" | "opacity";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly disabled: boolean;
            readonly tag: string;
            readonly color: string;
            readonly loading: boolean;
            readonly sizesConfig: Record<string, any>;
            readonly textColor: string;
            readonly round: boolean;
            readonly fontSizesConfig: Record<string, any>;
            readonly icon: string;
            readonly block: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly plain: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "mask" | "opacity";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "mask" | "opacity";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: string | undefined;
            readonly append?: boolean | undefined;
            readonly href?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly target?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
    };
    "onUpdate:view": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    monthNames: {
        type: PropType<string[]>;
        required: true;
        default: string[] | undefined;
    };
    ariaNextPeriodLabel: {
        type: PropType<NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined>>;
        required: true;
        default: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
    };
    ariaPreviousPeriodLabel: {
        type: PropType<NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined>>;
        required: true;
        default: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
    };
    ariaSwitchViewLabel: {
        type: PropType<NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined>>;
        required: true;
        default: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
    };
    "onHover:day": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick:day": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    weekdayNames: {
        type: PropType<string[]>;
        required: true;
        default: string[] | undefined;
    };
    firstWeekday: {
        type: PropType<NonNullable<NonNullable<("Monday" | "Sunday" | "monday" | "sunday") | undefined> | undefined>>;
        required: true;
        default: NonNullable<("Monday" | "Sunday" | "monday" | "sunday") | undefined> | undefined;
    };
    hideWeekDays: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    showOtherMonths: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    allowedDays: {
        type: PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    weekends: {
        type: PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    highlightWeekend: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    highlightToday: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    "onHover:month": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick:month": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    allowedMonths: {
        type: PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    "onHover:year": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick:year": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    allowedYears: {
        type: PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    startYear: {
        type: PropType<NonNullable<NonNullable<string | number | undefined> | undefined>>;
        required: true;
        default: NonNullable<string | number | undefined> | undefined;
    };
    endYear: {
        type: PropType<NonNullable<NonNullable<string | number | undefined> | undefined>>;
        required: true;
        default: NonNullable<string | number | undefined> | undefined;
    };
    weekendsColor: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    label: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    onClick: {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    loading: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    background: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    requiredMark: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    inputAriaLabel: {
        type: PropType<NonNullable<import("../../composables").TranslationProp | undefined>>;
        required: true;
        default: import("../../composables").TranslationProp | undefined;
    };
    inputAriaLabelledby: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    inputAriaDescribedby: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    "onClick-prepend": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-append": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-prepend-inner": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-append-inner": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-field": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    counter: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    placeholder: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    innerLabel: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
    closeOnChange: {
        type: BooleanConstructor;
        default: null;
    };
    isOpen: {
        type: BooleanConstructor;
        default: undefined;
    };
    onClose: {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    anchor: {
        type: PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables").MaybeHTMLElementOrSelector;
    };
    ariaLabel: {
        type: PropType<NonNullable<import("../../composables").TranslationProp | undefined>>;
        required: true;
        default: import("../../composables").TranslationProp | undefined;
    };
    role: {
        type: PropType<NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>>;
        required: true;
        default: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined;
    };
    trigger: {
        type: PropType<NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>>;
        required: true;
        default: import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined;
    };
    target: {
        type: PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables").MaybeHTMLElementOrSelector;
    };
    placement: {
        type: PropType<NonNullable<import("../../composables").PlacementWithAlias | undefined>>;
        required: true;
        default: import("../../composables").PlacementWithAlias | undefined;
    };
    hoverOverTimeout: {
        type: PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    hoverOutTimeout: {
        type: PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    autoPlacement: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    stickToEdges: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    keepAnchorWidth: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    verticalScrollOnOverflow: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    onOpen: {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onAnchor-click": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onAnchor-right-click": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onContent-click": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-outside": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onFocus-outside": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onAnchor-dblclick": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    anchorSelector: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    closeOnClickOutside: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    closeOnFocusOutside: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    closeOnAnchorClick: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    isContentHoverable: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    cursor: {
        type: PropType<NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>>;
        required: true;
        default: boolean | import("../va-dropdown/types").CursorAnchor | undefined;
    };
    teleport: {
        type: PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables").MaybeHTMLElementOrSelector;
    };
    contentClass: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
}, {
    valueText: import("vue").ComputedRef<string>;
    valueWithoutText: import("vue").WritableComputedRef<Date | Date[] | import("./types").DateInputRange<Date> | null | undefined>;
    valueDate: import("vue").WritableComputedRef<Date | Date[] | import("./types").DateInputRange<Date> | null | undefined>;
    focus: () => void;
    blur: () => void;
    reset: () => void;
    validate: () => any;
    showDropdown: () => void;
    hideAndFocus: () => void;
    toggleDropdown: (event: Event | KeyboardEvent) => void;
    focusDatePicker: () => void;
    isDirty: Ref<boolean>;
    isTouched: Ref<boolean>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    [x: string]: (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    clearValue: {
        type: PropType<any>;
        default: undefined;
    };
    modelValue: {
        type: PropType<DateInputModelValue>;
    };
    resetOnClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    offset: {
        default: () => number[];
        type: PropType<NonNullable<import("../va-dropdown/types").DropdownOffsetProp | undefined>>;
        required: true;
    };
    format: {
        type: PropType<(date: DateInputModelValue) => string>;
    };
    formatDate: {
        type: PropType<(date: Date) => string>;
        default: (d: Date) => string;
    };
    /** Force model value to string instead of date */
    formatValue: {
        type: PropType<(date: DateInputModelValue) => string>;
    };
    parse: {
        type: PropType<(input: string) => DateInputValue>;
    };
    parseDate: {
        type: PropType<(input: string) => Date>;
    };
    delimiter: {
        type: StringConstructor;
        default: string;
    };
    rangeDelimiter: {
        type: StringConstructor;
        default: string;
    };
    manualInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    leftIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    ariaToggleDropdownLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    ariaResetLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    ariaSelectedDateLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    rules: {
        type: PropType<import("../../composables").ValidationRule<DateInputModelValue>[]>;
        default: () => any;
        required: false;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    dirty: {
        type: BooleanConstructor;
        default: boolean;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    view: {
        type: PropType<Partial<import("../va-date-picker/types").DatePickerView>>;
        required: true;
        default: Partial<import("../va-date-picker/types").DatePickerView> | undefined;
    };
    type: {
        type: PropType<NonNullable<import("../va-date-picker/types").DatePickerType | undefined>>;
        required: true;
        default: import("../va-date-picker/types").DatePickerType | undefined;
    };
    disabled: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    readonly: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    "onUpdate:modelValue": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    stateful: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    mode: {
        type: PropType<NonNullable<NonNullable<import("../va-date-picker/types").DatePickerMode | undefined> | undefined>>;
        required: true;
        default: NonNullable<import("../va-date-picker/types").DatePickerMode | undefined> | undefined;
    };
    "child:prevButton": {
        type: PropType<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            preset: string;
            append: boolean;
            type: string;
            disabled: boolean;
            tag: string;
            href: string;
            color: string;
            loading: boolean;
            to: string | Record<string, any>;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            target: string;
            sizesConfig: Record<string, any>;
            textColor: string;
            round: boolean;
            fontSizesConfig: Record<string, any>;
            icon: string;
            block: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            borderColor: string;
            gradient: boolean;
            plain: boolean;
            iconRight: string;
            iconColor: string;
            pressedBehavior: "mask" | "opacity";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "mask" | "opacity";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly disabled: boolean;
            readonly tag: string;
            readonly color: string;
            readonly loading: boolean;
            readonly sizesConfig: Record<string, any>;
            readonly textColor: string;
            readonly round: boolean;
            readonly fontSizesConfig: Record<string, any>;
            readonly icon: string;
            readonly block: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly plain: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "mask" | "opacity";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "mask" | "opacity";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: string | undefined;
            readonly append?: boolean | undefined;
            readonly href?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly target?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
        required: true;
        default: NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            preset: string;
            append: boolean;
            type: string;
            disabled: boolean;
            tag: string;
            href: string;
            color: string;
            loading: boolean;
            to: string | Record<string, any>;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            target: string;
            sizesConfig: Record<string, any>;
            textColor: string;
            round: boolean;
            fontSizesConfig: Record<string, any>;
            icon: string;
            block: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            borderColor: string;
            gradient: boolean;
            plain: boolean;
            iconRight: string;
            iconColor: string;
            pressedBehavior: "mask" | "opacity";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "mask" | "opacity";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly disabled: boolean;
            readonly tag: string;
            readonly color: string;
            readonly loading: boolean;
            readonly sizesConfig: Record<string, any>;
            readonly textColor: string;
            readonly round: boolean;
            readonly fontSizesConfig: Record<string, any>;
            readonly icon: string;
            readonly block: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly plain: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "mask" | "opacity";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "mask" | "opacity";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: string | undefined;
            readonly append?: boolean | undefined;
            readonly href?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly target?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
    };
    "child:nextButton": {
        type: PropType<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            preset: string;
            append: boolean;
            type: string;
            disabled: boolean;
            tag: string;
            href: string;
            color: string;
            loading: boolean;
            to: string | Record<string, any>;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            target: string;
            sizesConfig: Record<string, any>;
            textColor: string;
            round: boolean;
            fontSizesConfig: Record<string, any>;
            icon: string;
            block: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            borderColor: string;
            gradient: boolean;
            plain: boolean;
            iconRight: string;
            iconColor: string;
            pressedBehavior: "mask" | "opacity";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "mask" | "opacity";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly disabled: boolean;
            readonly tag: string;
            readonly color: string;
            readonly loading: boolean;
            readonly sizesConfig: Record<string, any>;
            readonly textColor: string;
            readonly round: boolean;
            readonly fontSizesConfig: Record<string, any>;
            readonly icon: string;
            readonly block: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly plain: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "mask" | "opacity";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "mask" | "opacity";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: string | undefined;
            readonly append?: boolean | undefined;
            readonly href?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly target?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
        required: true;
        default: NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            preset: string;
            append: boolean;
            type: string;
            disabled: boolean;
            tag: string;
            href: string;
            color: string;
            loading: boolean;
            to: string | Record<string, any>;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            target: string;
            sizesConfig: Record<string, any>;
            textColor: string;
            round: boolean;
            fontSizesConfig: Record<string, any>;
            icon: string;
            block: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            borderColor: string;
            gradient: boolean;
            plain: boolean;
            iconRight: string;
            iconColor: string;
            pressedBehavior: "mask" | "opacity";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "mask" | "opacity";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly disabled: boolean;
            readonly tag: string;
            readonly color: string;
            readonly loading: boolean;
            readonly sizesConfig: Record<string, any>;
            readonly textColor: string;
            readonly round: boolean;
            readonly fontSizesConfig: Record<string, any>;
            readonly icon: string;
            readonly block: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly plain: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "mask" | "opacity";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "mask" | "opacity";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: string | undefined;
            readonly append?: boolean | undefined;
            readonly href?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly target?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
    };
    "child:middleButton": {
        type: PropType<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            preset: string;
            append: boolean;
            type: string;
            disabled: boolean;
            tag: string;
            href: string;
            color: string;
            loading: boolean;
            to: string | Record<string, any>;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            target: string;
            sizesConfig: Record<string, any>;
            textColor: string;
            round: boolean;
            fontSizesConfig: Record<string, any>;
            icon: string;
            block: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            borderColor: string;
            gradient: boolean;
            plain: boolean;
            iconRight: string;
            iconColor: string;
            pressedBehavior: "mask" | "opacity";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "mask" | "opacity";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly disabled: boolean;
            readonly tag: string;
            readonly color: string;
            readonly loading: boolean;
            readonly sizesConfig: Record<string, any>;
            readonly textColor: string;
            readonly round: boolean;
            readonly fontSizesConfig: Record<string, any>;
            readonly icon: string;
            readonly block: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly plain: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "mask" | "opacity";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "mask" | "opacity";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: string | undefined;
            readonly append?: boolean | undefined;
            readonly href?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly target?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
        required: true;
        default: NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            preset: string;
            append: boolean;
            type: string;
            disabled: boolean;
            tag: string;
            href: string;
            color: string;
            loading: boolean;
            to: string | Record<string, any>;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            target: string;
            sizesConfig: Record<string, any>;
            textColor: string;
            round: boolean;
            fontSizesConfig: Record<string, any>;
            icon: string;
            block: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            borderColor: string;
            gradient: boolean;
            plain: boolean;
            iconRight: string;
            iconColor: string;
            pressedBehavior: "mask" | "opacity";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "mask" | "opacity";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly disabled: boolean;
            readonly tag: string;
            readonly color: string;
            readonly loading: boolean;
            readonly sizesConfig: Record<string, any>;
            readonly textColor: string;
            readonly round: boolean;
            readonly fontSizesConfig: Record<string, any>;
            readonly icon: string;
            readonly block: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly plain: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "mask" | "opacity";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "mask" | "opacity";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: string | undefined;
            readonly append?: boolean | undefined;
            readonly href?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly target?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
    };
    "onUpdate:view": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    monthNames: {
        type: PropType<string[]>;
        required: true;
        default: string[] | undefined;
    };
    ariaNextPeriodLabel: {
        type: PropType<NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined>>;
        required: true;
        default: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
    };
    ariaPreviousPeriodLabel: {
        type: PropType<NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined>>;
        required: true;
        default: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
    };
    ariaSwitchViewLabel: {
        type: PropType<NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined>>;
        required: true;
        default: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
    };
    "onHover:day": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick:day": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    weekdayNames: {
        type: PropType<string[]>;
        required: true;
        default: string[] | undefined;
    };
    firstWeekday: {
        type: PropType<NonNullable<NonNullable<("Monday" | "Sunday" | "monday" | "sunday") | undefined> | undefined>>;
        required: true;
        default: NonNullable<("Monday" | "Sunday" | "monday" | "sunday") | undefined> | undefined;
    };
    hideWeekDays: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    showOtherMonths: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    allowedDays: {
        type: PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    weekends: {
        type: PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    highlightWeekend: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    highlightToday: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    "onHover:month": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick:month": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    allowedMonths: {
        type: PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    "onHover:year": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick:year": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    allowedYears: {
        type: PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    startYear: {
        type: PropType<NonNullable<NonNullable<string | number | undefined> | undefined>>;
        required: true;
        default: NonNullable<string | number | undefined> | undefined;
    };
    endYear: {
        type: PropType<NonNullable<NonNullable<string | number | undefined> | undefined>>;
        required: true;
        default: NonNullable<string | number | undefined> | undefined;
    };
    weekendsColor: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    label: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    onClick: {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    loading: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    background: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    requiredMark: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    inputAriaLabel: {
        type: PropType<NonNullable<import("../../composables").TranslationProp | undefined>>;
        required: true;
        default: import("../../composables").TranslationProp | undefined;
    };
    inputAriaLabelledby: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    inputAriaDescribedby: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    "onClick-prepend": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-append": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-prepend-inner": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-append-inner": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-field": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    counter: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    placeholder: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    innerLabel: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
    closeOnChange: {
        type: BooleanConstructor;
        default: null;
    };
    isOpen: {
        type: BooleanConstructor;
        default: undefined;
    };
    onClose: {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    anchor: {
        type: PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables").MaybeHTMLElementOrSelector;
    };
    ariaLabel: {
        type: PropType<NonNullable<import("../../composables").TranslationProp | undefined>>;
        required: true;
        default: import("../../composables").TranslationProp | undefined;
    };
    role: {
        type: PropType<NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>>;
        required: true;
        default: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined;
    };
    trigger: {
        type: PropType<NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>>;
        required: true;
        default: import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined;
    };
    target: {
        type: PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables").MaybeHTMLElementOrSelector;
    };
    placement: {
        type: PropType<NonNullable<import("../../composables").PlacementWithAlias | undefined>>;
        required: true;
        default: import("../../composables").PlacementWithAlias | undefined;
    };
    hoverOverTimeout: {
        type: PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    hoverOutTimeout: {
        type: PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    autoPlacement: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    stickToEdges: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    keepAnchorWidth: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    verticalScrollOnOverflow: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    onOpen: {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onAnchor-click": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onAnchor-right-click": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onContent-click": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-outside": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onFocus-outside": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onAnchor-dblclick": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    anchorSelector: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    closeOnClickOutside: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    closeOnFocusOutside: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    closeOnAnchorClick: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    isContentHoverable: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    cursor: {
        type: PropType<NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>>;
        required: true;
        default: boolean | import("../va-dropdown/types").CursorAnchor | undefined;
    };
    teleport: {
        type: PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables").MaybeHTMLElementOrSelector;
    };
    contentClass: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
}>>, {
    label: string;
    error: boolean;
    onClick: (...args: any[]) => any;
    onClose: (...args: any[]) => any;
    anchor: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
    preset: string;
    name: string;
    view: Partial<import("../va-date-picker/types").DatePickerView>;
    success: boolean;
    ariaLabel: NonNullable<import("../../composables").TranslationProp | undefined>;
    role: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>;
    type: NonNullable<import("../va-date-picker/types").DatePickerType | undefined>;
    disabled: NonNullable<boolean | undefined>;
    readonly: NonNullable<boolean | undefined>;
    errorMessages: string | string[];
    "onUpdate:modelValue": (...args: any[]) => any;
    trigger: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>;
    stateful: NonNullable<boolean | undefined>;
    color: string;
    loading: NonNullable<boolean | undefined>;
    target: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
    rules: import("../../composables").ValidationRule<DateInputModelValue>[];
    dirty: boolean;
    errorCount: string | number;
    messages: string | string[];
    immediateValidation: boolean;
    placement: NonNullable<import("../../composables").PlacementWithAlias | undefined>;
    mode: NonNullable<NonNullable<import("../va-date-picker/types").DatePickerMode | undefined> | undefined>;
    hoverOverTimeout: NonNullable<string | number | undefined>;
    hoverOutTimeout: NonNullable<string | number | undefined>;
    autoPlacement: NonNullable<boolean | undefined>;
    stickToEdges: NonNullable<boolean | undefined>;
    keepAnchorWidth: NonNullable<boolean | undefined>;
    verticalScrollOnOverflow: NonNullable<boolean | undefined>;
    onOpen: (...args: any[]) => any;
    "onAnchor-click": (...args: any[]) => any;
    "onAnchor-right-click": (...args: any[]) => any;
    "onContent-click": (...args: any[]) => any;
    "onClick-outside": (...args: any[]) => any;
    "onFocus-outside": (...args: any[]) => any;
    "onAnchor-dblclick": (...args: any[]) => any;
    anchorSelector: string;
    closeOnClickOutside: NonNullable<boolean | undefined>;
    closeOnFocusOutside: NonNullable<boolean | undefined>;
    closeOnAnchorClick: NonNullable<boolean | undefined>;
    closeOnContentClick: boolean;
    isContentHoverable: NonNullable<boolean | undefined>;
    offset: NonNullable<import("../va-dropdown/types").DropdownOffsetProp | undefined>;
    cursor: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>;
    teleport: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
    contentClass: string;
    background: string;
    closeOnChange: boolean;
    isOpen: boolean;
    requiredMark: NonNullable<boolean | undefined>;
    inputAriaLabel: NonNullable<import("../../composables").TranslationProp | undefined>;
    inputAriaLabelledby: string;
    inputAriaDescribedby: string;
    "onClick-prepend": (...args: any[]) => any;
    "onClick-append": (...args: any[]) => any;
    "onClick-prepend-inner": (...args: any[]) => any;
    "onClick-append-inner": (...args: any[]) => any;
    "onClick-field": (...args: any[]) => any;
    counter: NonNullable<boolean | undefined>;
    placeholder: string;
    innerLabel: NonNullable<boolean | undefined>;
    ariaResetLabel: import("../../composables").TranslationProp;
    clearable: boolean;
    clearableIcon: string;
    clearValue: any;
    icon: string;
    leftIcon: boolean;
    manualInput: boolean;
    "child:prevButton": Partial<{
        size: "small" | "medium" | "large";
        replace: boolean;
        preset: string;
        append: boolean;
        type: string;
        disabled: boolean;
        tag: string;
        href: string;
        color: string;
        loading: boolean;
        to: string | Record<string, any>;
        exact: boolean;
        activeClass: string;
        exactActiveClass: string;
        target: string;
        sizesConfig: Record<string, any>;
        textColor: string;
        round: boolean;
        fontSizesConfig: Record<string, any>;
        icon: string;
        block: boolean;
        textOpacity: string | number;
        backgroundOpacity: string | number;
        borderColor: string;
        gradient: boolean;
        plain: boolean;
        iconRight: string;
        iconColor: string;
        pressedBehavior: "mask" | "opacity";
        pressedOpacity: number;
        pressedMaskColor: string;
        hoverBehavior: "mask" | "opacity";
        hoverOpacity: string | number;
        hoverMaskColor: string;
    }> & Omit<{
        readonly size: "small" | "medium" | "large";
        readonly type: string;
        readonly disabled: boolean;
        readonly tag: string;
        readonly color: string;
        readonly loading: boolean;
        readonly sizesConfig: Record<string, any>;
        readonly textColor: string;
        readonly round: boolean;
        readonly fontSizesConfig: Record<string, any>;
        readonly icon: string;
        readonly block: boolean;
        readonly textOpacity: string | number;
        readonly backgroundOpacity: string | number;
        readonly borderColor: string;
        readonly gradient: boolean;
        readonly plain: boolean;
        readonly iconRight: string;
        readonly iconColor: string;
        readonly pressedBehavior: "mask" | "opacity";
        readonly pressedOpacity: number;
        readonly pressedMaskColor: string;
        readonly hoverBehavior: "mask" | "opacity";
        readonly hoverOpacity: string | number;
        readonly hoverMaskColor: string;
        readonly replace?: boolean | undefined;
        readonly preset?: string | undefined;
        readonly append?: boolean | undefined;
        readonly href?: string | undefined;
        readonly to?: string | Record<string, any> | undefined;
        readonly exact?: boolean | undefined;
        readonly activeClass?: string | undefined;
        readonly exactActiveClass?: string | undefined;
        readonly target?: string | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        tag: {
            type: StringConstructor;
            default: string;
        };
        type: {
            type: StringConstructor;
            default: string;
        };
        block: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: string;
        };
        textOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        backgroundOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        borderColor: {
            type: StringConstructor;
            default: string;
        };
        gradient: {
            type: BooleanConstructor;
            default: boolean;
        };
        plain: {
            type: BooleanConstructor;
            default: boolean;
        };
        round: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: PropType<"small" | "medium" | "large">;
            default: string;
            validator: (v: string) => boolean;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        iconRight: {
            type: StringConstructor;
            default: string;
        };
        iconColor: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: PropType<string | Record<string, any>>;
            default: undefined;
        };
        replace: {
            type: BooleanConstructor;
            default: undefined;
        };
        append: {
            type: BooleanConstructor;
            default: undefined;
        };
        exact: {
            type: BooleanConstructor;
            default: undefined;
        };
        activeClass: {
            type: StringConstructor;
            default: undefined;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: undefined;
        };
        href: {
            type: StringConstructor;
            default: undefined;
        };
        target: {
            type: StringConstructor;
            default: undefined;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        pressedBehavior: {
            type: PropType<"mask" | "opacity">;
            default: string;
            validator: (value: string) => boolean;
        };
        pressedOpacity: {
            type: NumberConstructor;
            default: number;
        };
        pressedMaskColor: {
            type: StringConstructor;
            default: string;
        };
        hoverBehavior: {
            type: PropType<"mask" | "opacity">;
            default: string;
            validator: (value: string) => boolean;
        };
        hoverOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        hoverMaskColor: {
            type: StringConstructor;
            default: string;
        };
        sizesConfig: {
            type: PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        fontSizesConfig: {
            type: PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">;
    "child:nextButton": Partial<{
        size: "small" | "medium" | "large";
        replace: boolean;
        preset: string;
        append: boolean;
        type: string;
        disabled: boolean;
        tag: string;
        href: string;
        color: string;
        loading: boolean;
        to: string | Record<string, any>;
        exact: boolean;
        activeClass: string;
        exactActiveClass: string;
        target: string;
        sizesConfig: Record<string, any>;
        textColor: string;
        round: boolean;
        fontSizesConfig: Record<string, any>;
        icon: string;
        block: boolean;
        textOpacity: string | number;
        backgroundOpacity: string | number;
        borderColor: string;
        gradient: boolean;
        plain: boolean;
        iconRight: string;
        iconColor: string;
        pressedBehavior: "mask" | "opacity";
        pressedOpacity: number;
        pressedMaskColor: string;
        hoverBehavior: "mask" | "opacity";
        hoverOpacity: string | number;
        hoverMaskColor: string;
    }> & Omit<{
        readonly size: "small" | "medium" | "large";
        readonly type: string;
        readonly disabled: boolean;
        readonly tag: string;
        readonly color: string;
        readonly loading: boolean;
        readonly sizesConfig: Record<string, any>;
        readonly textColor: string;
        readonly round: boolean;
        readonly fontSizesConfig: Record<string, any>;
        readonly icon: string;
        readonly block: boolean;
        readonly textOpacity: string | number;
        readonly backgroundOpacity: string | number;
        readonly borderColor: string;
        readonly gradient: boolean;
        readonly plain: boolean;
        readonly iconRight: string;
        readonly iconColor: string;
        readonly pressedBehavior: "mask" | "opacity";
        readonly pressedOpacity: number;
        readonly pressedMaskColor: string;
        readonly hoverBehavior: "mask" | "opacity";
        readonly hoverOpacity: string | number;
        readonly hoverMaskColor: string;
        readonly replace?: boolean | undefined;
        readonly preset?: string | undefined;
        readonly append?: boolean | undefined;
        readonly href?: string | undefined;
        readonly to?: string | Record<string, any> | undefined;
        readonly exact?: boolean | undefined;
        readonly activeClass?: string | undefined;
        readonly exactActiveClass?: string | undefined;
        readonly target?: string | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        tag: {
            type: StringConstructor;
            default: string;
        };
        type: {
            type: StringConstructor;
            default: string;
        };
        block: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: string;
        };
        textOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        backgroundOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        borderColor: {
            type: StringConstructor;
            default: string;
        };
        gradient: {
            type: BooleanConstructor;
            default: boolean;
        };
        plain: {
            type: BooleanConstructor;
            default: boolean;
        };
        round: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: PropType<"small" | "medium" | "large">;
            default: string;
            validator: (v: string) => boolean;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        iconRight: {
            type: StringConstructor;
            default: string;
        };
        iconColor: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: PropType<string | Record<string, any>>;
            default: undefined;
        };
        replace: {
            type: BooleanConstructor;
            default: undefined;
        };
        append: {
            type: BooleanConstructor;
            default: undefined;
        };
        exact: {
            type: BooleanConstructor;
            default: undefined;
        };
        activeClass: {
            type: StringConstructor;
            default: undefined;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: undefined;
        };
        href: {
            type: StringConstructor;
            default: undefined;
        };
        target: {
            type: StringConstructor;
            default: undefined;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        pressedBehavior: {
            type: PropType<"mask" | "opacity">;
            default: string;
            validator: (value: string) => boolean;
        };
        pressedOpacity: {
            type: NumberConstructor;
            default: number;
        };
        pressedMaskColor: {
            type: StringConstructor;
            default: string;
        };
        hoverBehavior: {
            type: PropType<"mask" | "opacity">;
            default: string;
            validator: (value: string) => boolean;
        };
        hoverOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        hoverMaskColor: {
            type: StringConstructor;
            default: string;
        };
        sizesConfig: {
            type: PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        fontSizesConfig: {
            type: PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">;
    "child:middleButton": Partial<{
        size: "small" | "medium" | "large";
        replace: boolean;
        preset: string;
        append: boolean;
        type: string;
        disabled: boolean;
        tag: string;
        href: string;
        color: string;
        loading: boolean;
        to: string | Record<string, any>;
        exact: boolean;
        activeClass: string;
        exactActiveClass: string;
        target: string;
        sizesConfig: Record<string, any>;
        textColor: string;
        round: boolean;
        fontSizesConfig: Record<string, any>;
        icon: string;
        block: boolean;
        textOpacity: string | number;
        backgroundOpacity: string | number;
        borderColor: string;
        gradient: boolean;
        plain: boolean;
        iconRight: string;
        iconColor: string;
        pressedBehavior: "mask" | "opacity";
        pressedOpacity: number;
        pressedMaskColor: string;
        hoverBehavior: "mask" | "opacity";
        hoverOpacity: string | number;
        hoverMaskColor: string;
    }> & Omit<{
        readonly size: "small" | "medium" | "large";
        readonly type: string;
        readonly disabled: boolean;
        readonly tag: string;
        readonly color: string;
        readonly loading: boolean;
        readonly sizesConfig: Record<string, any>;
        readonly textColor: string;
        readonly round: boolean;
        readonly fontSizesConfig: Record<string, any>;
        readonly icon: string;
        readonly block: boolean;
        readonly textOpacity: string | number;
        readonly backgroundOpacity: string | number;
        readonly borderColor: string;
        readonly gradient: boolean;
        readonly plain: boolean;
        readonly iconRight: string;
        readonly iconColor: string;
        readonly pressedBehavior: "mask" | "opacity";
        readonly pressedOpacity: number;
        readonly pressedMaskColor: string;
        readonly hoverBehavior: "mask" | "opacity";
        readonly hoverOpacity: string | number;
        readonly hoverMaskColor: string;
        readonly replace?: boolean | undefined;
        readonly preset?: string | undefined;
        readonly append?: boolean | undefined;
        readonly href?: string | undefined;
        readonly to?: string | Record<string, any> | undefined;
        readonly exact?: boolean | undefined;
        readonly activeClass?: string | undefined;
        readonly exactActiveClass?: string | undefined;
        readonly target?: string | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        tag: {
            type: StringConstructor;
            default: string;
        };
        type: {
            type: StringConstructor;
            default: string;
        };
        block: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: string;
        };
        textOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        backgroundOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        borderColor: {
            type: StringConstructor;
            default: string;
        };
        gradient: {
            type: BooleanConstructor;
            default: boolean;
        };
        plain: {
            type: BooleanConstructor;
            default: boolean;
        };
        round: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: PropType<"small" | "medium" | "large">;
            default: string;
            validator: (v: string) => boolean;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        iconRight: {
            type: StringConstructor;
            default: string;
        };
        iconColor: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: PropType<string | Record<string, any>>;
            default: undefined;
        };
        replace: {
            type: BooleanConstructor;
            default: undefined;
        };
        append: {
            type: BooleanConstructor;
            default: undefined;
        };
        exact: {
            type: BooleanConstructor;
            default: undefined;
        };
        activeClass: {
            type: StringConstructor;
            default: undefined;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: undefined;
        };
        href: {
            type: StringConstructor;
            default: undefined;
        };
        target: {
            type: StringConstructor;
            default: undefined;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        pressedBehavior: {
            type: PropType<"mask" | "opacity">;
            default: string;
            validator: (value: string) => boolean;
        };
        pressedOpacity: {
            type: NumberConstructor;
            default: number;
        };
        pressedMaskColor: {
            type: StringConstructor;
            default: string;
        };
        hoverBehavior: {
            type: PropType<"mask" | "opacity">;
            default: string;
            validator: (value: string) => boolean;
        };
        hoverOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        hoverMaskColor: {
            type: StringConstructor;
            default: string;
        };
        sizesConfig: {
            type: PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        fontSizesConfig: {
            type: PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">;
    "onUpdate:view": (...args: any[]) => any;
    monthNames: string[];
    ariaNextPeriodLabel: NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined>;
    ariaPreviousPeriodLabel: NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined>;
    ariaSwitchViewLabel: NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined>;
    "onHover:day": (...args: any[]) => any;
    "onClick:day": (...args: any[]) => any;
    weekdayNames: string[];
    firstWeekday: NonNullable<NonNullable<("Monday" | "Sunday" | "monday" | "sunday") | undefined> | undefined>;
    hideWeekDays: NonNullable<NonNullable<boolean | undefined> | undefined>;
    showOtherMonths: NonNullable<NonNullable<boolean | undefined> | undefined>;
    allowedDays: (date: Date) => boolean;
    weekends: (date: Date) => boolean;
    highlightWeekend: NonNullable<NonNullable<boolean | undefined> | undefined>;
    highlightToday: NonNullable<NonNullable<boolean | undefined> | undefined>;
    "onHover:month": (...args: any[]) => any;
    "onClick:month": (...args: any[]) => any;
    allowedMonths: (date: Date) => boolean;
    "onHover:year": (...args: any[]) => any;
    "onClick:year": (...args: any[]) => any;
    allowedYears: (date: Date) => boolean;
    startYear: NonNullable<NonNullable<string | number | undefined> | undefined>;
    endYear: NonNullable<NonNullable<string | number | undefined> | undefined>;
    weekendsColor: string;
    resetOnClose: boolean;
    formatDate: (date: Date) => string;
    delimiter: string;
    rangeDelimiter: string;
    ariaToggleDropdownLabel: import("../../composables").TranslationProp;
    ariaSelectedDateLabel: import("../../composables").TranslationProp;
}, {}>, Partial<Record<string, (_: any) => any>> & Partial<Record<NonNullable<string | number>, (_: any) => any>> & {
    input?(_: {
        valueText: string;
        inputAttributes: {
            'aria-invalid': boolean;
            'aria-errormessage': string;
            readonly: boolean;
            disabled: NonNullable<boolean | undefined>;
            tabindex: number;
            placeholder: string;
            value: string;
            ariaLabel: string;
            ariaRequired: NonNullable<boolean | undefined>;
            ariaDisabled: NonNullable<boolean | undefined>;
            ariaReadOnly: NonNullable<boolean | undefined>;
        };
        inputWrapperProps: {
            focused: boolean | undefined;
            error: boolean;
            errorMessages: string[];
            readonly: boolean;
            label: string;
            preset: string;
            name: string;
            success: NonNullable<boolean | undefined>;
            disabled: NonNullable<boolean | undefined>;
            color: string;
            loading: NonNullable<boolean | undefined>;
            rules: import("../../composables").ValidationRule<any>[];
            dirty: NonNullable<boolean | undefined>;
            errorCount: NonNullable<string | number | undefined>;
            messages: NonNullable<string | string[] | undefined>;
            immediateValidation: NonNullable<boolean | undefined>;
            background: string;
            requiredMark: NonNullable<boolean | undefined>;
            inputAriaLabel: NonNullable<import("../../composables").TranslationProp | undefined>;
            inputAriaLabelledby: string;
            inputAriaDescribedby: string;
            counter: NonNullable<boolean | undefined>;
            placeholder: string;
            innerLabel: NonNullable<boolean | undefined>;
            onClick?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            modelValue?: any;
            "onClick-prepend"?: ((...args: any[]) => any) | undefined;
            "onClick-append"?: ((...args: any[]) => any) | undefined;
            "onClick-prepend-inner"?: ((...args: any[]) => any) | undefined;
            "onClick-append-inner"?: ((...args: any[]) => any) | undefined;
            "onClick-field"?: ((...args: any[]) => any) | undefined;
        };
        inputListeners: {
            focus: () => void;
            blur: () => void;
        };
    }): any;
    prependInner?(_: any): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
