import { PropType } from 'vue';
import { DatePickerMode, DatePickerView, DatePickerModelValue } from '../../types';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    modelValue: {
        type: PropType<DatePickerModelValue>;
    };
    monthNames: {
        type: PropType<string[]>;
        required: true;
    };
    view: {
        type: PropType<DatePickerView>;
        default: () => {
            type: string;
        };
    };
    allowedMonths: {
        type: PropType<(date: Date) => boolean>;
        default: undefined;
    };
    highlightToday: {
        type: BooleanConstructor;
        default: boolean;
    };
    mode: {
        type: PropType<DatePickerMode>;
        default: string;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
    "hover:month": (...args: any[]) => void;
    "click:month": (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: PropType<DatePickerModelValue>;
    };
    monthNames: {
        type: PropType<string[]>;
        required: true;
    };
    view: {
        type: PropType<DatePickerView>;
        default: () => {
            type: string;
        };
    };
    allowedMonths: {
        type: PropType<(date: Date) => boolean>;
        default: undefined;
    };
    highlightToday: {
        type: BooleanConstructor;
        default: boolean;
    };
    mode: {
        type: PropType<DatePickerMode>;
        default: string;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onHover:month"?: ((...args: any[]) => any) | undefined;
    "onClick:month"?: ((...args: any[]) => any) | undefined;
}, {
    view: DatePickerView;
    readonly: boolean;
    color: string;
    mode: DatePickerMode;
    highlightToday: boolean;
    allowedMonths: (date: Date) => boolean;
}, {}>, {
    month?(_: {
        monthIndex: number;
        month: string;
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
