export { VaFileUploadGalleryItem } from './VaFileUploadGalleryItem';
export { VaFileUploadList } from './VaFileUploadList';
export { VaFileUploadListItem } from './VaFileUploadListItem';
export { VaFileUploadSingleItem } from './VaFileUploadSingleItem';
export { VaFileUploadUndo } from './VaFileUploadUndo';
export declare const VaFileUpload: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        fileTypes: {
            type: StringConstructor;
            default: string;
        };
        dropzone: {
            type: BooleanConstructor;
            default: boolean;
        };
        hideFileList: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        undo: {
            type: BooleanConstructor;
            default: boolean;
        };
        undoDuration: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        undoButtonText: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        dropZoneText: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        uploadButtonText: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        deletedFileMessage: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        fileIncorrectMessage: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        modelValue: {
            type: import("vue").PropType<import("./types").VaFile | import("./types").VaFile[]>;
            default: () => never[];
        };
        type: {
            type: import("vue").PropType<"list" | "single" | "gallery">;
            default: string;
            validator: (value: string) => boolean;
        };
        file: {
            type: import("vue").PropType<import("./types").ConvertedFile>;
            required: true;
            default: import("./types").ConvertedFile | undefined;
        };
        onRemove: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        ariaRemoveFileLabel: {
            type: import("vue").PropType<NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined>>;
            required: true;
            default: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
        };
        onRemoveSingle: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        files: {
            type: import("vue").PropType<import("./types").VaFile[]>;
            required: true;
            default: import("./types").VaFile[] | undefined;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onFile-removed"?: ((...args: any[]) => any) | undefined;
        "onFile-added"?: ((...args: any[]) => any) | undefined;
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:modelValue": (...args: any[]) => void;
        "file-removed": (...args: any[]) => void;
        "file-added": (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        fileTypes: {
            type: StringConstructor;
            default: string;
        };
        dropzone: {
            type: BooleanConstructor;
            default: boolean;
        };
        hideFileList: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        undo: {
            type: BooleanConstructor;
            default: boolean;
        };
        undoDuration: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        undoButtonText: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        dropZoneText: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        uploadButtonText: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        deletedFileMessage: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        fileIncorrectMessage: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        modelValue: {
            type: import("vue").PropType<import("./types").VaFile | import("./types").VaFile[]>;
            default: () => never[];
        };
        type: {
            type: import("vue").PropType<"list" | "single" | "gallery">;
            default: string;
            validator: (value: string) => boolean;
        };
        file: {
            type: import("vue").PropType<import("./types").ConvertedFile>;
            required: true;
            default: import("./types").ConvertedFile | undefined;
        };
        onRemove: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        ariaRemoveFileLabel: {
            type: import("vue").PropType<NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined>>;
            required: true;
            default: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
        };
        onRemoveSingle: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        files: {
            type: import("vue").PropType<import("./types").VaFile[]>;
            required: true;
            default: import("./types").VaFile[] | undefined;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onFile-removed"?: ((...args: any[]) => any) | undefined;
        "onFile-added"?: ((...args: any[]) => any) | undefined;
    }, {
        preset: string;
        type: "list" | "single" | "gallery";
        disabled: boolean;
        modelValue: import("./types").VaFile | import("./types").VaFile[];
        color: string;
        undo: boolean;
        dropzone: boolean;
        file: import("./types").ConvertedFile;
        onRemove: (...args: any[]) => any;
        ariaRemoveFileLabel: NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined>;
        onRemoveSingle: (...args: any[]) => any;
        files: import("./types").VaFile[];
        fileTypes: string;
        hideFileList: boolean;
        undoDuration: string | number;
        undoButtonText: import("../../composables").TranslationProp;
        dropZoneText: import("../../composables").TranslationProp;
        uploadButtonText: import("../../composables").TranslationProp;
        deletedFileMessage: import("../../composables").TranslationProp;
        fileIncorrectMessage: import("../../composables").TranslationProp;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        fileTypes: {
            type: StringConstructor;
            default: string;
        };
        dropzone: {
            type: BooleanConstructor;
            default: boolean;
        };
        hideFileList: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        undo: {
            type: BooleanConstructor;
            default: boolean;
        };
        undoDuration: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        undoButtonText: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        dropZoneText: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        uploadButtonText: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        deletedFileMessage: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        fileIncorrectMessage: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        modelValue: {
            type: import("vue").PropType<import("./types").VaFile | import("./types").VaFile[]>;
            default: () => never[];
        };
        type: {
            type: import("vue").PropType<"list" | "single" | "gallery">;
            default: string;
            validator: (value: string) => boolean;
        };
        file: {
            type: import("vue").PropType<import("./types").ConvertedFile>;
            required: true;
            default: import("./types").ConvertedFile | undefined;
        };
        onRemove: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        ariaRemoveFileLabel: {
            type: import("vue").PropType<NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined>>;
            required: true;
            default: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
        };
        onRemoveSingle: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        files: {
            type: import("vue").PropType<import("./types").VaFile[]>;
            required: true;
            default: import("./types").VaFile[] | undefined;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onFile-removed"?: ((...args: any[]) => any) | undefined;
        "onFile-added"?: ((...args: any[]) => any) | undefined;
    }, {}, {}, {}, {}, {
        preset: string;
        type: "list" | "single" | "gallery";
        disabled: boolean;
        modelValue: import("./types").VaFile | import("./types").VaFile[];
        color: string;
        undo: boolean;
        dropzone: boolean;
        file: import("./types").ConvertedFile;
        onRemove: (...args: any[]) => any;
        ariaRemoveFileLabel: NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined>;
        onRemoveSingle: (...args: any[]) => any;
        files: import("./types").VaFile[];
        fileTypes: string;
        hideFileList: boolean;
        undoDuration: string | number;
        undoButtonText: import("../../composables").TranslationProp;
        dropZoneText: import("../../composables").TranslationProp;
        uploadButtonText: import("../../composables").TranslationProp;
        deletedFileMessage: import("../../composables").TranslationProp;
        fileIncorrectMessage: import("../../composables").TranslationProp;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    fileTypes: {
        type: StringConstructor;
        default: string;
    };
    dropzone: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideFileList: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    undo: {
        type: BooleanConstructor;
        default: boolean;
    };
    undoDuration: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    undoButtonText: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    dropZoneText: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    uploadButtonText: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    deletedFileMessage: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    fileIncorrectMessage: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    modelValue: {
        type: import("vue").PropType<import("./types").VaFile | import("./types").VaFile[]>;
        default: () => never[];
    };
    type: {
        type: import("vue").PropType<"list" | "single" | "gallery">;
        default: string;
        validator: (value: string) => boolean;
    };
    file: {
        type: import("vue").PropType<import("./types").ConvertedFile>;
        required: true;
        default: import("./types").ConvertedFile | undefined;
    };
    onRemove: {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    ariaRemoveFileLabel: {
        type: import("vue").PropType<NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined>>;
        required: true;
        default: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
    };
    onRemoveSingle: {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    files: {
        type: import("vue").PropType<import("./types").VaFile[]>;
        required: true;
        default: import("./types").VaFile[] | undefined;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onFile-removed"?: ((...args: any[]) => any) | undefined;
    "onFile-added"?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
    "file-removed": (...args: any[]) => void;
    "file-added": (...args: any[]) => void;
}, string, {
    preset: string;
    type: "list" | "single" | "gallery";
    disabled: boolean;
    modelValue: import("./types").VaFile | import("./types").VaFile[];
    color: string;
    undo: boolean;
    dropzone: boolean;
    file: import("./types").ConvertedFile;
    onRemove: (...args: any[]) => any;
    ariaRemoveFileLabel: NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined>;
    onRemoveSingle: (...args: any[]) => any;
    files: import("./types").VaFile[];
    fileTypes: string;
    hideFileList: boolean;
    undoDuration: string | number;
    undoButtonText: import("../../composables").TranslationProp;
    dropZoneText: import("../../composables").TranslationProp;
    uploadButtonText: import("../../composables").TranslationProp;
    deletedFileMessage: import("../../composables").TranslationProp;
    fileIncorrectMessage: import("../../composables").TranslationProp;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
export * from './types';
