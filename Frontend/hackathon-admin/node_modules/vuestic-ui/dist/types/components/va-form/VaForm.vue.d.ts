import { PropType } from 'vue';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    autofocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    immediate: {
        type: BooleanConstructor;
        default: boolean;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    trigger: {
        type: PropType<"blur" | "change">;
        default: string;
    };
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideErrors: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideErrorMessages: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideLoading: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: BooleanConstructor;
        default: boolean;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}, {
    immediate: import("vue").ComputedRef<boolean>;
    isDirty: import("vue").Ref<boolean>;
    formData: import("vue").ComputedRef<Record<string, unknown>>;
    fields: import("vue").ComputedRef<{
        name: string | undefined;
        value?: unknown;
        isValid: boolean;
        isLoading: boolean;
        isDirty: boolean;
        isTouched: boolean;
        errorMessages: string[];
        validate: () => boolean;
        validateAsync: () => Promise<boolean>;
        reset: () => void;
        resetValidation: () => void;
        focus: () => void;
    }[]>;
    fieldsNamed: import("vue").ComputedRef<Record<string, {
        name: string | undefined;
        value?: unknown;
        isValid: boolean;
        isLoading: boolean;
        isDirty: boolean;
        isTouched: boolean;
        errorMessages: string[];
        validate: () => boolean;
        validateAsync: () => Promise<boolean>;
        reset: () => void;
        resetValidation: () => void;
        focus: () => void;
    }>>;
    fieldNames: import("vue").ComputedRef<string[]>;
    isValid: import("vue").ComputedRef<boolean>;
    isTouched: import("vue").Ref<boolean>;
    isLoading: import("vue").ComputedRef<boolean>;
    errorMessages: import("vue").ComputedRef<string[]>;
    errorMessagesNamed: import("vue").ComputedRef<Record<string, string[]>>;
    validate: () => boolean;
    validateAsync: () => Promise<boolean>;
    reset: () => void;
    resetValidation: () => void;
    focus: () => void;
    focusInvalidField: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    autofocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    immediate: {
        type: BooleanConstructor;
        default: boolean;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    trigger: {
        type: PropType<"blur" | "change">;
        default: string;
    };
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideErrors: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideErrorMessages: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideLoading: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: BooleanConstructor;
        default: boolean;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    name: string;
    immediate: boolean;
    autofocus: boolean;
    tag: string;
    trigger: "blur" | "change";
    modelValue: boolean;
    hideErrors: boolean;
    hideErrorMessages: boolean;
    hideLoading: boolean;
    stateful: boolean;
}, {}>, {
    default?(_: {
        isValid: boolean;
        isDirty: boolean;
        isTouched: boolean;
        isLoading: boolean;
        errorMessages: string[];
        errorMessagesNamed: Record<string, string[]>;
        formData: Record<string, unknown>;
        fields: {
            name: string | undefined;
            value?: unknown;
            isValid: boolean;
            isLoading: boolean;
            isDirty: boolean;
            isTouched: boolean;
            errorMessages: string[];
            validate: () => boolean;
            validateAsync: () => Promise<boolean>;
            reset: () => void;
            resetValidation: () => void;
            focus: () => void;
        }[];
        fieldsNamed: Record<string, {
            name: string | undefined;
            value?: unknown;
            isValid: boolean;
            isLoading: boolean;
            isDirty: boolean;
            isTouched: boolean;
            errorMessages: string[];
            validate: () => boolean;
            validateAsync: () => Promise<boolean>;
            reset: () => void;
            resetValidation: () => void;
            focus: () => void;
        }>;
        fieldNames: string[];
        validate: () => boolean;
        validateAsync: () => Promise<boolean>;
        reset: () => void;
        resetValidation: () => void;
        focus: () => void;
        focusInvalidField: () => void;
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
