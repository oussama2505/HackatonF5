export declare const VaIcon: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        name: {
            type: StringConstructor;
            default: string;
        };
        tag: {
            type: StringConstructor;
        };
        component: {
            type: import("vue").PropType<any>;
        };
        color: {
            type: StringConstructor;
        };
        rotation: {
            type: (StringConstructor | NumberConstructor)[];
        };
        spin: {
            type: (BooleanConstructor | StringConstructor)[];
        };
        flip: {
            type: import("vue").PropType<"horizontal" | "vertical" | "off" | "both">;
            default: string;
            validator: (value: string) => boolean;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        size: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
            validator: (size: string | number) => boolean;
        };
        sizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        fontSizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
    }>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        name: {
            type: StringConstructor;
            default: string;
        };
        tag: {
            type: StringConstructor;
        };
        component: {
            type: import("vue").PropType<any>;
        };
        color: {
            type: StringConstructor;
        };
        rotation: {
            type: (StringConstructor | NumberConstructor)[];
        };
        spin: {
            type: (BooleanConstructor | StringConstructor)[];
        };
        flip: {
            type: import("vue").PropType<"horizontal" | "vertical" | "off" | "both">;
            default: string;
            validator: (value: string) => boolean;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        size: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
            validator: (size: string | number) => boolean;
        };
        sizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        fontSizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
    }>>, {
        size: string | number;
        preset: string;
        name: string;
        sizesConfig: Record<string, any>;
        flip: "horizontal" | "vertical" | "off" | "both";
        fontSizesConfig: Record<string, any>;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        name: {
            type: StringConstructor;
            default: string;
        };
        tag: {
            type: StringConstructor;
        };
        component: {
            type: import("vue").PropType<any>;
        };
        color: {
            type: StringConstructor;
        };
        rotation: {
            type: (StringConstructor | NumberConstructor)[];
        };
        spin: {
            type: (BooleanConstructor | StringConstructor)[];
        };
        flip: {
            type: import("vue").PropType<"horizontal" | "vertical" | "off" | "both">;
            default: string;
            validator: (value: string) => boolean;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        size: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
            validator: (size: string | number) => boolean;
        };
        sizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        fontSizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
    }>>, {}, {}, {}, {}, {
        size: string | number;
        preset: string;
        name: string;
        sizesConfig: Record<string, any>;
        flip: "horizontal" | "vertical" | "off" | "both";
        fontSizesConfig: Record<string, any>;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    name: {
        type: StringConstructor;
        default: string;
    };
    tag: {
        type: StringConstructor;
    };
    component: {
        type: import("vue").PropType<any>;
    };
    color: {
        type: StringConstructor;
    };
    rotation: {
        type: (StringConstructor | NumberConstructor)[];
    };
    spin: {
        type: (BooleanConstructor | StringConstructor)[];
    };
    flip: {
        type: import("vue").PropType<"horizontal" | "vertical" | "off" | "both">;
        default: string;
        validator: (value: string) => boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
        validator: (size: string | number) => boolean;
    };
    sizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        default: () => import("../../services/global-config").SizeConfig;
    };
    fontSizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        default: () => import("../../services/global-config").SizeConfig;
    };
}>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    size: string | number;
    preset: string;
    name: string;
    sizesConfig: Record<string, any>;
    flip: "horizontal" | "vertical" | "off" | "both";
    fontSizesConfig: Record<string, any>;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
