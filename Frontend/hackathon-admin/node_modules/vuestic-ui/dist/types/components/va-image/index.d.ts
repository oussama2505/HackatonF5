export declare const VaImage: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        ratio: {
            type: import("vue").PropType<number | "auto">;
            default: string;
            validator: (v: number | "auto") => boolean;
        };
        fit: {
            type: import("vue").PropType<"fill" | "none" | "contain" | "cover" | "scale-down">;
            default: string;
        };
        maxWidth: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
            validator: (v: string | number) => boolean;
        };
        lazy: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholderSrc: {
            type: StringConstructor;
            default: string;
        };
        onFallback: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        fallbackSrc: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        fallbackText: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        fallbackIcon: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        fallbackRender: {
            type: import("vue").PropType<() => any>;
            required: true;
            default: (() => any) | undefined;
        };
        src: {
            type: StringConstructor;
            required: boolean;
        };
        alt: {
            type: StringConstructor;
            default: string;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        sizes: {
            type: StringConstructor;
            default: string;
        };
        srcset: {
            type: StringConstructor;
            default: string;
        };
        draggable: {
            type: BooleanConstructor;
            default: boolean;
        };
        loading: {
            type: import("vue").PropType<"lazy" | "eager">;
        };
        crossorigin: {
            type: import("vue").PropType<"anonymous" | "use-credentials">;
        };
        decoding: {
            type: import("vue").PropType<"auto" | "sync" | "async">;
        };
        fetchpriority: {
            type: import("vue").PropType<"auto" | "high" | "low">;
            default: string;
        };
        referrerpolicy: {
            type: import("vue").PropType<"origin" | "no-referrer" | "no-referrer-when-downgrade" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url">;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>> & {
        onError?: ((...args: any[]) => any) | undefined;
        onFallback?: ((...args: any[]) => any) | undefined;
        onLoaded?: ((...args: any[]) => any) | undefined;
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        error: (...args: any[]) => void;
        fallback: (...args: any[]) => void;
        loaded: (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        ratio: {
            type: import("vue").PropType<number | "auto">;
            default: string;
            validator: (v: number | "auto") => boolean;
        };
        fit: {
            type: import("vue").PropType<"fill" | "none" | "contain" | "cover" | "scale-down">;
            default: string;
        };
        maxWidth: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
            validator: (v: string | number) => boolean;
        };
        lazy: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholderSrc: {
            type: StringConstructor;
            default: string;
        };
        onFallback: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        fallbackSrc: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        fallbackText: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        fallbackIcon: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        fallbackRender: {
            type: import("vue").PropType<() => any>;
            required: true;
            default: (() => any) | undefined;
        };
        src: {
            type: StringConstructor;
            required: boolean;
        };
        alt: {
            type: StringConstructor;
            default: string;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        sizes: {
            type: StringConstructor;
            default: string;
        };
        srcset: {
            type: StringConstructor;
            default: string;
        };
        draggable: {
            type: BooleanConstructor;
            default: boolean;
        };
        loading: {
            type: import("vue").PropType<"lazy" | "eager">;
        };
        crossorigin: {
            type: import("vue").PropType<"anonymous" | "use-credentials">;
        };
        decoding: {
            type: import("vue").PropType<"auto" | "sync" | "async">;
        };
        fetchpriority: {
            type: import("vue").PropType<"auto" | "high" | "low">;
            default: string;
        };
        referrerpolicy: {
            type: import("vue").PropType<"origin" | "no-referrer" | "no-referrer-when-downgrade" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url">;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>> & {
        onError?: ((...args: any[]) => any) | undefined;
        onFallback?: ((...args: any[]) => any) | undefined;
        onLoaded?: ((...args: any[]) => any) | undefined;
    }, {
        title: string;
        preset: string;
        draggable: boolean;
        sizes: string;
        alt: string;
        onFallback: (...args: any[]) => any;
        fallbackSrc: string;
        fallbackText: string;
        fallbackIcon: string;
        fallbackRender: () => any;
        maxWidth: string | number;
        ratio: number | "auto";
        lazy: boolean;
        fit: "fill" | "none" | "contain" | "cover" | "scale-down";
        placeholderSrc: string;
        srcset: string;
        fetchpriority: "auto" | "high" | "low";
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        ratio: {
            type: import("vue").PropType<number | "auto">;
            default: string;
            validator: (v: number | "auto") => boolean;
        };
        fit: {
            type: import("vue").PropType<"fill" | "none" | "contain" | "cover" | "scale-down">;
            default: string;
        };
        maxWidth: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
            validator: (v: string | number) => boolean;
        };
        lazy: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholderSrc: {
            type: StringConstructor;
            default: string;
        };
        onFallback: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        fallbackSrc: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        fallbackText: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        fallbackIcon: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        fallbackRender: {
            type: import("vue").PropType<() => any>;
            required: true;
            default: (() => any) | undefined;
        };
        src: {
            type: StringConstructor;
            required: boolean;
        };
        alt: {
            type: StringConstructor;
            default: string;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        sizes: {
            type: StringConstructor;
            default: string;
        };
        srcset: {
            type: StringConstructor;
            default: string;
        };
        draggable: {
            type: BooleanConstructor;
            default: boolean;
        };
        loading: {
            type: import("vue").PropType<"lazy" | "eager">;
        };
        crossorigin: {
            type: import("vue").PropType<"anonymous" | "use-credentials">;
        };
        decoding: {
            type: import("vue").PropType<"auto" | "sync" | "async">;
        };
        fetchpriority: {
            type: import("vue").PropType<"auto" | "high" | "low">;
            default: string;
        };
        referrerpolicy: {
            type: import("vue").PropType<"origin" | "no-referrer" | "no-referrer-when-downgrade" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url">;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>> & {
        onError?: ((...args: any[]) => any) | undefined;
        onFallback?: ((...args: any[]) => any) | undefined;
        onLoaded?: ((...args: any[]) => any) | undefined;
    }, {}, {}, {}, {}, {
        title: string;
        preset: string;
        draggable: boolean;
        sizes: string;
        alt: string;
        onFallback: (...args: any[]) => any;
        fallbackSrc: string;
        fallbackText: string;
        fallbackIcon: string;
        fallbackRender: () => any;
        maxWidth: string | number;
        ratio: number | "auto";
        lazy: boolean;
        fit: "fill" | "none" | "contain" | "cover" | "scale-down";
        placeholderSrc: string;
        srcset: string;
        fetchpriority: "auto" | "high" | "low";
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    ratio: {
        type: import("vue").PropType<number | "auto">;
        default: string;
        validator: (v: number | "auto") => boolean;
    };
    fit: {
        type: import("vue").PropType<"fill" | "none" | "contain" | "cover" | "scale-down">;
        default: string;
    };
    maxWidth: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
        validator: (v: string | number) => boolean;
    };
    lazy: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholderSrc: {
        type: StringConstructor;
        default: string;
    };
    onFallback: {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    fallbackSrc: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    fallbackText: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    fallbackIcon: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    fallbackRender: {
        type: import("vue").PropType<() => any>;
        required: true;
        default: (() => any) | undefined;
    };
    src: {
        type: StringConstructor;
        required: boolean;
    };
    alt: {
        type: StringConstructor;
        default: string;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    sizes: {
        type: StringConstructor;
        default: string;
    };
    srcset: {
        type: StringConstructor;
        default: string;
    };
    draggable: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: import("vue").PropType<"lazy" | "eager">;
    };
    crossorigin: {
        type: import("vue").PropType<"anonymous" | "use-credentials">;
    };
    decoding: {
        type: import("vue").PropType<"auto" | "sync" | "async">;
    };
    fetchpriority: {
        type: import("vue").PropType<"auto" | "high" | "low">;
        default: string;
    };
    referrerpolicy: {
        type: import("vue").PropType<"origin" | "no-referrer" | "no-referrer-when-downgrade" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url">;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    onError?: ((...args: any[]) => any) | undefined;
    onFallback?: ((...args: any[]) => any) | undefined;
    onLoaded?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    error: (...args: any[]) => void;
    fallback: (...args: any[]) => void;
    loaded: (...args: any[]) => void;
}, string, {
    title: string;
    preset: string;
    draggable: boolean;
    sizes: string;
    alt: string;
    onFallback: (...args: any[]) => any;
    fallbackSrc: string;
    fallbackText: string;
    fallbackIcon: string;
    fallbackRender: () => any;
    maxWidth: string | number;
    ratio: number | "auto";
    lazy: boolean;
    fit: "fill" | "none" | "contain" | "cover" | "scale-down";
    placeholderSrc: string;
    srcset: string;
    fetchpriority: "auto" | "high" | "low";
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        sources?(_: {}): any;
        default?(_: {}): any;
        error?(_: {}): any;
        loader?(_: {}): any;
        placeholder?(_: {}): any;
    };
});
