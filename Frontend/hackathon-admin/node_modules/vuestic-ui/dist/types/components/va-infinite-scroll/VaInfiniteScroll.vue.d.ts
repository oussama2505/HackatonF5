import { PropType } from 'vue';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    load: {
        type: FunctionConstructor;
        required: true;
    };
    offset: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    reverse: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    scrollTarget: {
        type: PropType<string | HTMLElement | undefined>;
        default: null;
    };
    debounce: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    onerror: (...args: any[]) => void;
    onload: (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    load: {
        type: FunctionConstructor;
        required: true;
    };
    offset: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    reverse: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    scrollTarget: {
        type: PropType<string | HTMLElement | undefined>;
        default: null;
    };
    debounce: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    onOnerror?: ((...args: any[]) => any) | undefined;
    onOnload?: ((...args: any[]) => any) | undefined;
}, {
    reverse: boolean;
    preset: string;
    disabled: boolean;
    tag: string;
    offset: string | number;
    scrollTarget: string | HTMLElement | undefined;
    debounce: string | number;
}, {}>, {
    default?(_: {}): any;
    loading?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
