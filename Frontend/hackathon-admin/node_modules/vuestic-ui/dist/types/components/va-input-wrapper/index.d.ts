export declare const VaInputWrapper: import("vue").DefineComponent<{
    modelValue: {
        type: null;
        default: string;
    };
    counter: {
        type: BooleanConstructor;
    };
    maxLength: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    background: {
        type: StringConstructor;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: boolean;
    };
    innerLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    rules: {
        type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    };
    dirty: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: import("vue").PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    messages: {
        type: import("vue").PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputAriaLabel: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    inputAriaLabelledby: {
        type: StringConstructor;
    };
    inputAriaDescribedby: {
        type: StringConstructor;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}, {
    inputRef: import("vue").Ref<any>;
    focus: () => void;
    blur: () => void;
    labelId: string;
    characterCountId: string;
    ariaAttributes: import("vue").ComputedRef<{
        'aria-label': string;
        'aria-labelledby': string;
        'aria-describedby': string;
    }>;
    vModel: import("vue").WritableComputedRef<string>;
    counterValue: import("vue").ComputedRef<number | undefined>;
    vaInputLabelProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<Omit<{
        label: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        color: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        requiredMark: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
    }, "">>>;
    wrapperClass: {
        "va-input-wrapper--error": boolean | undefined;
        "va-input-wrapper--success": boolean | undefined;
        "va-input-wrapper--disabled": boolean | undefined;
        "va-input-wrapper--readonly": boolean | undefined;
        "va-input-wrapper--focused": boolean | undefined;
        "va-input-wrapper--labeled": boolean | undefined;
        "va-input-wrapper--labeledInner": boolean | undefined;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            "va-input-wrapper--error": boolean | undefined;
            "va-input-wrapper--success": boolean | undefined;
            "va-input-wrapper--disabled": boolean | undefined;
            "va-input-wrapper--readonly": boolean | undefined;
            "va-input-wrapper--focused": boolean | undefined;
            "va-input-wrapper--labeled": boolean | undefined;
            "va-input-wrapper--labeledInner": boolean | undefined;
        }>;
        readonly asArray: import("vue").ComputedRef<("va-input-wrapper--error" | "va-input-wrapper--success" | "va-input-wrapper--disabled" | "va-input-wrapper--readonly" | "va-input-wrapper--focused" | "va-input-wrapper--labeled" | "va-input-wrapper--labeledInner")[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    textColorComputed: import("vue").ComputedRef<string>;
    isCounterVisible: import("vue").ComputedRef<boolean>;
    counterComputed: import("vue").ComputedRef<string | number | undefined>;
    colorComputed: import("vue").ComputedRef<string>;
    backgroundComputed: import("vue").ComputedRef<string>;
    messagesColor: import("vue").ComputedRef<"" | "danger" | "success">;
    messagesComputed: import("vue").ComputedRef<string | string[] | undefined>;
    errorLimit: import("vue").ComputedRef<number>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "update:modelValue" | "click-prepend" | "click-append" | "click-prepend-inner" | "click-append-inner" | "click-field")[], "click" | "update:modelValue" | "click-prepend" | "click-append" | "click-prepend-inner" | "click-append-inner" | "click-field", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: null;
        default: string;
    };
    counter: {
        type: BooleanConstructor;
    };
    maxLength: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    background: {
        type: StringConstructor;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: boolean;
    };
    innerLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    rules: {
        type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    };
    dirty: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: import("vue").PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    messages: {
        type: import("vue").PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputAriaLabel: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    inputAriaLabelledby: {
        type: StringConstructor;
    };
    inputAriaDescribedby: {
        type: StringConstructor;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    onClick?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onClick-prepend"?: ((...args: any[]) => any) | undefined;
    "onClick-append"?: ((...args: any[]) => any) | undefined;
    "onClick-prepend-inner"?: ((...args: any[]) => any) | undefined;
    "onClick-append-inner"?: ((...args: any[]) => any) | undefined;
    "onClick-field"?: ((...args: any[]) => any) | undefined;
}, {
    label: string;
    error: boolean;
    preset: string;
    name: string;
    success: boolean;
    disabled: boolean;
    readonly: boolean;
    errorMessages: string | string[];
    modelValue: any;
    color: string;
    loading: boolean;
    rules: import("../../composables").ValidationRule<any>[];
    dirty: boolean;
    errorCount: string | number;
    messages: string | string[];
    immediateValidation: boolean;
    requiredMark: boolean;
    inputAriaLabel: import("../../composables").TranslationProp;
    counter: boolean;
    maxLength: string | number;
    placeholder: string;
    innerLabel: boolean;
}, {}>;
