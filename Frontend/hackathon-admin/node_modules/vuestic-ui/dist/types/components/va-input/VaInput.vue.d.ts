import { PropType } from 'vue';
import type { AnyStringPropType } from '../../utils/types/prop-type';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    modelValue: {
        type: PropType<string | number | null>;
        default: string;
    };
    type: {
        type: AnyStringPropType<"text" | "password">;
        default: string;
    };
    inputClass: {
        type: StringConstructor;
        default: string;
    };
    pattern: {
        type: StringConstructor;
    };
    inputmode: {
        type: StringConstructor;
        default: string;
    };
    counter: {
        type: BooleanConstructor;
        default: boolean;
    };
    ariaResetLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    /** Set value to input when model value is updated */
    strictBindInputValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    mask: {
        type: PropType<string | Record<string, number[]> | import("cleave.js/options").CleaveOptions>;
        default: string;
    };
    returnRaw: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
    clearValue: {
        type: StringConstructor;
        default: string;
    };
    rules: {
        type: PropType<import("../../composables").ValidationRule<string>[]>;
        default: () => any;
        required: false;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    dirty: {
        type: BooleanConstructor;
        default: boolean;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    autofocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    onClick: {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onUpdate:modelValue": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    color: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    loading: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    background: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    requiredMark: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    inputAriaLabel: {
        type: PropType<NonNullable<import("../../composables").TranslationProp | undefined>>;
        required: true;
        default: import("../../composables").TranslationProp | undefined;
    };
    inputAriaLabelledby: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    inputAriaDescribedby: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    "onClick-prepend": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-append": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-prepend-inner": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-append-inner": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-field": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    maxLength: {
        type: PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    innerLabel: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
}, {
    isValid: import("vue").ComputedRef<boolean>;
    isDirty: import("vue").Ref<boolean>;
    isTouched: import("vue").Ref<boolean>;
    isLoading: import("vue").WritableComputedRef<boolean>;
    computedError: import("vue").ComputedRef<boolean>;
    computedErrorMessages: import("vue").ComputedRef<string[]>;
    reset: () => void;
    focus: () => void;
    blur: () => void;
    value: import("../../composables").StatefulValue<string | number | null>;
    withoutValidation: (cb: () => any) => void;
    resetValidation: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    [x: string]: (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    modelValue: {
        type: PropType<string | number | null>;
        default: string;
    };
    type: {
        type: AnyStringPropType<"text" | "password">;
        default: string;
    };
    inputClass: {
        type: StringConstructor;
        default: string;
    };
    pattern: {
        type: StringConstructor;
    };
    inputmode: {
        type: StringConstructor;
        default: string;
    };
    counter: {
        type: BooleanConstructor;
        default: boolean;
    };
    ariaResetLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    /** Set value to input when model value is updated */
    strictBindInputValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    mask: {
        type: PropType<string | Record<string, number[]> | import("cleave.js/options").CleaveOptions>;
        default: string;
    };
    returnRaw: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
    clearValue: {
        type: StringConstructor;
        default: string;
    };
    rules: {
        type: PropType<import("../../composables").ValidationRule<string>[]>;
        default: () => any;
        required: false;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    dirty: {
        type: BooleanConstructor;
        default: boolean;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    autofocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    onClick: {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onUpdate:modelValue": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    color: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    loading: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    background: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    requiredMark: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    inputAriaLabel: {
        type: PropType<NonNullable<import("../../composables").TranslationProp | undefined>>;
        required: true;
        default: import("../../composables").TranslationProp | undefined;
    };
    inputAriaLabelledby: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    inputAriaDescribedby: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    "onClick-prepend": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-append": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-prepend-inner": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-append-inner": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-field": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    maxLength: {
        type: PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    innerLabel: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
}>>, {
    label: string;
    error: boolean;
    onClick: (...args: any[]) => any;
    preset: string;
    name: string;
    mask: string | Record<string, number[]> | import("cleave.js/options").CleaveOptions;
    success: boolean;
    autofocus: boolean;
    type: import("../../utils/types/prop-type").StringWithAutocomplete<"text" | "password">;
    disabled: boolean;
    readonly: boolean;
    errorMessages: string | string[];
    "onUpdate:modelValue": (...args: any[]) => any;
    modelValue: string | number | null;
    stateful: boolean;
    color: string;
    loading: NonNullable<boolean | undefined>;
    rules: import("../../composables").ValidationRule<string>[];
    dirty: boolean;
    errorCount: string | number;
    messages: string | string[];
    immediateValidation: boolean;
    background: string;
    tabindex: string | number;
    requiredMark: NonNullable<boolean | undefined>;
    inputAriaLabel: NonNullable<import("../../composables").TranslationProp | undefined>;
    inputAriaLabelledby: string;
    inputAriaDescribedby: string;
    "onClick-prepend": (...args: any[]) => any;
    "onClick-append": (...args: any[]) => any;
    "onClick-prepend-inner": (...args: any[]) => any;
    "onClick-append-inner": (...args: any[]) => any;
    "onClick-field": (...args: any[]) => any;
    counter: boolean;
    maxLength: NonNullable<string | number | undefined>;
    placeholder: string;
    innerLabel: NonNullable<boolean | undefined>;
    returnRaw: boolean;
    inputClass: string;
    inputmode: string;
    ariaResetLabel: import("../../composables").TranslationProp;
    strictBindInputValue: boolean;
    clearable: boolean;
    clearableIcon: string;
    clearValue: string;
}, {}>, Partial<Record<string, (_: any) => any>> & {
    icon?(_: any): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
