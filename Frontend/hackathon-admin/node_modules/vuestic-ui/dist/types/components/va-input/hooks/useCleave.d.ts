import { PropType, Ref, type ExtractPropTypes, type WritableComputedRef } from 'vue';
import Cleave from 'cleave.js';
import { type CleaveOptions } from 'cleave.js/options';
export declare const useCleaveProps: {
    mask: {
        type: PropType<string | Record<string, number[]> | CleaveOptions>;
        default: string;
    };
    returnRaw: {
        type: BooleanConstructor;
        default: boolean;
    };
};
export declare const useCleave: (element: Ref<HTMLInputElement | undefined>, props: ExtractPropTypes<typeof useCleaveProps>, syncValue: WritableComputedRef<string | number | null>) => {
    cleave: Ref<Cleave | undefined>;
    cleaveEnabled: import("vue").ComputedRef<number | null>;
    computedValue: import("vue").ComputedRef<string | number>;
    onInput: (event: Event) => void;
};
