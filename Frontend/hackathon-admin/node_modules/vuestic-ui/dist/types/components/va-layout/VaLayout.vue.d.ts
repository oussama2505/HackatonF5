import { AreaName } from './hooks/useGridTemplateArea';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    allowBodyScrollOnOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    top: {
        type: import("vue").PropType<{
            absolute?: boolean | undefined;
            order?: number | undefined;
            fixed?: boolean | undefined;
            overlay?: boolean | undefined;
        }>;
        default: () => {
            order: number;
        };
    };
    right: {
        type: import("vue").PropType<{
            absolute?: boolean | undefined;
            order?: number | undefined;
            fixed?: boolean | undefined;
            overlay?: boolean | undefined;
        }>;
        default: () => {
            order: number;
        };
    };
    left: {
        type: import("vue").PropType<{
            absolute?: boolean | undefined;
            order?: number | undefined;
            fixed?: boolean | undefined;
            overlay?: boolean | undefined;
        }>;
        default: () => {
            order: number;
        };
    };
    bottom: {
        type: import("vue").PropType<{
            absolute?: boolean | undefined;
            order?: number | undefined;
            fixed?: boolean | undefined;
            overlay?: boolean | undefined;
        }>;
        default: () => {
            order: number;
        };
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "top-overlay-click": (...args: any[]) => void;
    "left-overlay-click": (...args: any[]) => void;
    "right-overlay-click": (...args: any[]) => void;
    "bottom-overlay-click": (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    allowBodyScrollOnOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    top: {
        type: import("vue").PropType<{
            absolute?: boolean | undefined;
            order?: number | undefined;
            fixed?: boolean | undefined;
            overlay?: boolean | undefined;
        }>;
        default: () => {
            order: number;
        };
    };
    right: {
        type: import("vue").PropType<{
            absolute?: boolean | undefined;
            order?: number | undefined;
            fixed?: boolean | undefined;
            overlay?: boolean | undefined;
        }>;
        default: () => {
            order: number;
        };
    };
    left: {
        type: import("vue").PropType<{
            absolute?: boolean | undefined;
            order?: number | undefined;
            fixed?: boolean | undefined;
            overlay?: boolean | undefined;
        }>;
        default: () => {
            order: number;
        };
    };
    bottom: {
        type: import("vue").PropType<{
            absolute?: boolean | undefined;
            order?: number | undefined;
            fixed?: boolean | undefined;
            overlay?: boolean | undefined;
        }>;
        default: () => {
            order: number;
        };
    };
}>> & {
    "onTop-overlay-click"?: ((...args: any[]) => any) | undefined;
    "onLeft-overlay-click"?: ((...args: any[]) => any) | undefined;
    "onRight-overlay-click"?: ((...args: any[]) => any) | undefined;
    "onBottom-overlay-click"?: ((...args: any[]) => any) | undefined;
}, {
    left: {
        absolute?: boolean | undefined;
        order?: number | undefined;
        fixed?: boolean | undefined;
        overlay?: boolean | undefined;
    };
    right: {
        absolute?: boolean | undefined;
        order?: number | undefined;
        fixed?: boolean | undefined;
        overlay?: boolean | undefined;
    };
    bottom: {
        absolute?: boolean | undefined;
        order?: number | undefined;
        fixed?: boolean | undefined;
        overlay?: boolean | undefined;
    };
    top: {
        absolute?: boolean | undefined;
        order?: number | undefined;
        fixed?: boolean | undefined;
        overlay?: boolean | undefined;
    };
    allowBodyScrollOnOverlay: boolean;
}, {}>, Partial<Record<NonNullable<AreaName>, (_: {}) => any>> & {
    default?(_: {}): any;
    content?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
