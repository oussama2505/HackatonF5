export declare const VaLayout: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        allowBodyScrollOnOverlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        top: {
            type: import("vue").PropType<{
                absolute?: boolean | undefined;
                order?: number | undefined;
                fixed?: boolean | undefined;
                overlay?: boolean | undefined;
            }>;
            default: () => {
                order: number;
            };
        };
        right: {
            type: import("vue").PropType<{
                absolute?: boolean | undefined;
                order?: number | undefined;
                fixed?: boolean | undefined;
                overlay?: boolean | undefined;
            }>;
            default: () => {
                order: number;
            };
        };
        left: {
            type: import("vue").PropType<{
                absolute?: boolean | undefined;
                order?: number | undefined;
                fixed?: boolean | undefined;
                overlay?: boolean | undefined;
            }>;
            default: () => {
                order: number;
            };
        };
        bottom: {
            type: import("vue").PropType<{
                absolute?: boolean | undefined;
                order?: number | undefined;
                fixed?: boolean | undefined;
                overlay?: boolean | undefined;
            }>;
            default: () => {
                order: number;
            };
        };
    }>> & {
        "onTop-overlay-click"?: ((...args: any[]) => any) | undefined;
        "onLeft-overlay-click"?: ((...args: any[]) => any) | undefined;
        "onRight-overlay-click"?: ((...args: any[]) => any) | undefined;
        "onBottom-overlay-click"?: ((...args: any[]) => any) | undefined;
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "top-overlay-click": (...args: any[]) => void;
        "left-overlay-click": (...args: any[]) => void;
        "right-overlay-click": (...args: any[]) => void;
        "bottom-overlay-click": (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        allowBodyScrollOnOverlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        top: {
            type: import("vue").PropType<{
                absolute?: boolean | undefined;
                order?: number | undefined;
                fixed?: boolean | undefined;
                overlay?: boolean | undefined;
            }>;
            default: () => {
                order: number;
            };
        };
        right: {
            type: import("vue").PropType<{
                absolute?: boolean | undefined;
                order?: number | undefined;
                fixed?: boolean | undefined;
                overlay?: boolean | undefined;
            }>;
            default: () => {
                order: number;
            };
        };
        left: {
            type: import("vue").PropType<{
                absolute?: boolean | undefined;
                order?: number | undefined;
                fixed?: boolean | undefined;
                overlay?: boolean | undefined;
            }>;
            default: () => {
                order: number;
            };
        };
        bottom: {
            type: import("vue").PropType<{
                absolute?: boolean | undefined;
                order?: number | undefined;
                fixed?: boolean | undefined;
                overlay?: boolean | undefined;
            }>;
            default: () => {
                order: number;
            };
        };
    }>> & {
        "onTop-overlay-click"?: ((...args: any[]) => any) | undefined;
        "onLeft-overlay-click"?: ((...args: any[]) => any) | undefined;
        "onRight-overlay-click"?: ((...args: any[]) => any) | undefined;
        "onBottom-overlay-click"?: ((...args: any[]) => any) | undefined;
    }, {
        left: {
            absolute?: boolean | undefined;
            order?: number | undefined;
            fixed?: boolean | undefined;
            overlay?: boolean | undefined;
        };
        right: {
            absolute?: boolean | undefined;
            order?: number | undefined;
            fixed?: boolean | undefined;
            overlay?: boolean | undefined;
        };
        bottom: {
            absolute?: boolean | undefined;
            order?: number | undefined;
            fixed?: boolean | undefined;
            overlay?: boolean | undefined;
        };
        top: {
            absolute?: boolean | undefined;
            order?: number | undefined;
            fixed?: boolean | undefined;
            overlay?: boolean | undefined;
        };
        allowBodyScrollOnOverlay: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        allowBodyScrollOnOverlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        top: {
            type: import("vue").PropType<{
                absolute?: boolean | undefined;
                order?: number | undefined;
                fixed?: boolean | undefined;
                overlay?: boolean | undefined;
            }>;
            default: () => {
                order: number;
            };
        };
        right: {
            type: import("vue").PropType<{
                absolute?: boolean | undefined;
                order?: number | undefined;
                fixed?: boolean | undefined;
                overlay?: boolean | undefined;
            }>;
            default: () => {
                order: number;
            };
        };
        left: {
            type: import("vue").PropType<{
                absolute?: boolean | undefined;
                order?: number | undefined;
                fixed?: boolean | undefined;
                overlay?: boolean | undefined;
            }>;
            default: () => {
                order: number;
            };
        };
        bottom: {
            type: import("vue").PropType<{
                absolute?: boolean | undefined;
                order?: number | undefined;
                fixed?: boolean | undefined;
                overlay?: boolean | undefined;
            }>;
            default: () => {
                order: number;
            };
        };
    }>> & {
        "onTop-overlay-click"?: ((...args: any[]) => any) | undefined;
        "onLeft-overlay-click"?: ((...args: any[]) => any) | undefined;
        "onRight-overlay-click"?: ((...args: any[]) => any) | undefined;
        "onBottom-overlay-click"?: ((...args: any[]) => any) | undefined;
    }, {}, {}, {}, {}, {
        left: {
            absolute?: boolean | undefined;
            order?: number | undefined;
            fixed?: boolean | undefined;
            overlay?: boolean | undefined;
        };
        right: {
            absolute?: boolean | undefined;
            order?: number | undefined;
            fixed?: boolean | undefined;
            overlay?: boolean | undefined;
        };
        bottom: {
            absolute?: boolean | undefined;
            order?: number | undefined;
            fixed?: boolean | undefined;
            overlay?: boolean | undefined;
        };
        top: {
            absolute?: boolean | undefined;
            order?: number | undefined;
            fixed?: boolean | undefined;
            overlay?: boolean | undefined;
        };
        allowBodyScrollOnOverlay: boolean;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    allowBodyScrollOnOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    top: {
        type: import("vue").PropType<{
            absolute?: boolean | undefined;
            order?: number | undefined;
            fixed?: boolean | undefined;
            overlay?: boolean | undefined;
        }>;
        default: () => {
            order: number;
        };
    };
    right: {
        type: import("vue").PropType<{
            absolute?: boolean | undefined;
            order?: number | undefined;
            fixed?: boolean | undefined;
            overlay?: boolean | undefined;
        }>;
        default: () => {
            order: number;
        };
    };
    left: {
        type: import("vue").PropType<{
            absolute?: boolean | undefined;
            order?: number | undefined;
            fixed?: boolean | undefined;
            overlay?: boolean | undefined;
        }>;
        default: () => {
            order: number;
        };
    };
    bottom: {
        type: import("vue").PropType<{
            absolute?: boolean | undefined;
            order?: number | undefined;
            fixed?: boolean | undefined;
            overlay?: boolean | undefined;
        }>;
        default: () => {
            order: number;
        };
    };
}>> & {
    "onTop-overlay-click"?: ((...args: any[]) => any) | undefined;
    "onLeft-overlay-click"?: ((...args: any[]) => any) | undefined;
    "onRight-overlay-click"?: ((...args: any[]) => any) | undefined;
    "onBottom-overlay-click"?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "top-overlay-click": (...args: any[]) => void;
    "left-overlay-click": (...args: any[]) => void;
    "right-overlay-click": (...args: any[]) => void;
    "bottom-overlay-click": (...args: any[]) => void;
}, string, {
    left: {
        absolute?: boolean | undefined;
        order?: number | undefined;
        fixed?: boolean | undefined;
        overlay?: boolean | undefined;
    };
    right: {
        absolute?: boolean | undefined;
        order?: number | undefined;
        fixed?: boolean | undefined;
        overlay?: boolean | undefined;
    };
    bottom: {
        absolute?: boolean | undefined;
        order?: number | undefined;
        fixed?: boolean | undefined;
        overlay?: boolean | undefined;
    };
    top: {
        absolute?: boolean | undefined;
        order?: number | undefined;
        fixed?: boolean | undefined;
        overlay?: boolean | undefined;
    };
    allowBodyScrollOnOverlay: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: Partial<Record<NonNullable<import("./hooks/useGridTemplateArea").AreaName>, (_: {}) => any>> & {
        default?(_: {}): any;
        content?(_: {}): any;
    };
});
