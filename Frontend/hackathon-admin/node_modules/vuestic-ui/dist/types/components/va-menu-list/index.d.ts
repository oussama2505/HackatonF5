export declare const VaMenuList: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        options: {
            type: import("vue").PropType<import("./types").VaMenuOption[]>;
            default: () => never[];
        };
        textBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        valueBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        trackBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        disabledBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        groupBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
    }>> & {
        onSelected?: ((...args: any[]) => any) | undefined;
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        selected: (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        options: {
            type: import("vue").PropType<import("./types").VaMenuOption[]>;
            default: () => never[];
        };
        textBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        valueBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        trackBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        disabledBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        groupBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
    }>> & {
        onSelected?: ((...args: any[]) => any) | undefined;
    }, {
        options: import("./types").VaMenuOption[];
        textBy: import("../../composables").StringOrFunction;
        valueBy: import("../../composables").StringOrFunction;
        trackBy: import("../../composables").StringOrFunction;
        disabledBy: import("../../composables").StringOrFunction;
        groupBy: import("../../composables").StringOrFunction;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        options: {
            type: import("vue").PropType<import("./types").VaMenuOption[]>;
            default: () => never[];
        };
        textBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        valueBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        trackBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        disabledBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        groupBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
    }>> & {
        onSelected?: ((...args: any[]) => any) | undefined;
    }, {}, {}, {}, {}, {
        options: import("./types").VaMenuOption[];
        textBy: import("../../composables").StringOrFunction;
        valueBy: import("../../composables").StringOrFunction;
        trackBy: import("../../composables").StringOrFunction;
        disabledBy: import("../../composables").StringOrFunction;
        groupBy: import("../../composables").StringOrFunction;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    options: {
        type: import("vue").PropType<import("./types").VaMenuOption[]>;
        default: () => never[];
    };
    textBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    valueBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    trackBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    disabledBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    groupBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
}>> & {
    onSelected?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    selected: (...args: any[]) => void;
}, string, {
    options: import("./types").VaMenuOption[];
    textBy: import("../../composables").StringOrFunction;
    valueBy: import("../../composables").StringOrFunction;
    trackBy: import("../../composables").StringOrFunction;
    disabledBy: import("../../composables").StringOrFunction;
    groupBy: import("../../composables").StringOrFunction;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
        group?(_: {}): any;
        "left-icon"?(_: {}): any;
        "right-icon"?(_: {}): any;
    };
});
export declare const VaMenuItem: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        name: {
            type: StringConstructor;
            default: string;
        };
        icon: {
            type: StringConstructor;
            defatult: string;
        };
        rightIcon: {
            type: StringConstructor;
            defatult: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        onSelected?: ((...args: any[]) => any) | undefined;
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        selected: (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        name: {
            type: StringConstructor;
            default: string;
        };
        icon: {
            type: StringConstructor;
            defatult: string;
        };
        rightIcon: {
            type: StringConstructor;
            defatult: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        onSelected?: ((...args: any[]) => any) | undefined;
    }, {
        name: string;
        disabled: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        name: {
            type: StringConstructor;
            default: string;
        };
        icon: {
            type: StringConstructor;
            defatult: string;
        };
        rightIcon: {
            type: StringConstructor;
            defatult: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        onSelected?: ((...args: any[]) => any) | undefined;
    }, {}, {}, {}, {}, {
        name: string;
        disabled: boolean;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    name: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: StringConstructor;
        defatult: string;
    };
    rightIcon: {
        type: StringConstructor;
        defatult: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onSelected?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    selected: (...args: any[]) => void;
}, string, {
    name: string;
    disabled: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        "left-icon"?(_: {}): any;
        default?(_: {}): any;
        "right-icon"?(_: {}): any;
    };
});
export declare const VaMenuGroup: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        groupName: {
            type: StringConstructor;
            required: true;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
    }>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        groupName: {
            type: StringConstructor;
            required: true;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
    }>>, {
        color: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        groupName: {
            type: StringConstructor;
            required: true;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
    }>>, {}, {}, {}, {}, {
        color: string;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    groupName: {
        type: StringConstructor;
        required: true;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    color: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
