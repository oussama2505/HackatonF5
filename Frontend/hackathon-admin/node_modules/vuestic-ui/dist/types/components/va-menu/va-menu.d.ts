export declare const VaMenu: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        stickToEdges: {
            type: BooleanConstructor;
            default: boolean;
        };
        onClose: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        anchor: {
            type: import("vue").PropType<NonNullable<import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector;
        };
        ariaLabel: {
            type: import("vue").PropType<NonNullable<import("../../composables/useTranslation.js").TranslationProp | undefined>>;
            required: true;
            default: import("../../composables/useTranslation.js").TranslationProp | undefined;
        };
        role: {
            type: import("vue").PropType<NonNullable<import("../../utils/types/prop-type.js").StringWithAutocomplete<"button" | "none"> | undefined>>;
            required: true;
            default: import("../../utils/types/prop-type.js").StringWithAutocomplete<"button" | "none"> | undefined;
        };
        disabled: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        readonly: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        "onUpdate:modelValue": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        trigger: {
            type: import("vue").PropType<NonNullable<import("../va-dropdown/hooks/useDropdownNavigation.js").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation.js").Trigger[] | undefined>>;
            required: true;
            default: import("../va-dropdown/hooks/useDropdownNavigation.js").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation.js").Trigger[] | undefined;
        };
        modelValue: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        stateful: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        target: {
            type: import("vue").PropType<NonNullable<import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector;
        };
        placement: {
            type: import("vue").PropType<NonNullable<import("../../composables/usePlacementAliases.js").PlacementWithAlias | undefined>>;
            required: true;
            default: import("../../composables/usePlacementAliases.js").PlacementWithAlias | undefined;
        };
        hoverOverTimeout: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        hoverOutTimeout: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        autoPlacement: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        keepAnchorWidth: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        verticalScrollOnOverflow: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        onOpen: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-right-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onContent-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-outside": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onFocus-outside": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-dblclick": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        anchorSelector: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        innerAnchorSelector: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        closeOnClickOutside: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnFocusOutside: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnAnchorClick: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnContentClick: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        isContentHoverable: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        offset: {
            type: import("vue").PropType<NonNullable<import("../va-dropdown/types.js").DropdownOffsetProp | undefined>>;
            required: true;
            default: import("../va-dropdown/types.js").DropdownOffsetProp | undefined;
        };
        cursor: {
            type: import("vue").PropType<NonNullable<boolean | import("../va-dropdown/types.js").CursorAnchor | undefined>>;
            required: true;
            default: boolean | import("../va-dropdown/types.js").CursorAnchor | undefined;
        };
        teleport: {
            type: import("vue").PropType<NonNullable<import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector;
        };
        keyboardNavigation: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        contentClass: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        options: {
            type: import("vue").PropType<import("../va-menu-list/types.js").VaMenuOption[]>;
            required: true;
            default: import("../va-menu-list/types.js").VaMenuOption[] | undefined;
        };
        textBy: {
            type: import("vue").PropType<NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>>;
            required: true;
            default: import("../../composables/useSelectableList.js").StringOrFunction | undefined;
        };
        valueBy: {
            type: import("vue").PropType<NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>>;
            required: true;
            default: import("../../composables/useSelectableList.js").StringOrFunction | undefined;
        };
        trackBy: {
            type: import("vue").PropType<NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>>;
            required: true;
            default: import("../../composables/useSelectableList.js").StringOrFunction | undefined;
        };
        disabledBy: {
            type: import("vue").PropType<NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>>;
            required: true;
            default: import("../../composables/useSelectableList.js").StringOrFunction | undefined;
        };
        groupBy: {
            type: import("vue").PropType<NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>>;
            required: true;
            default: import("../../composables/useSelectableList.js").StringOrFunction | undefined;
        };
        onSelected: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>> & {
        onClose?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onOpen?: ((...args: any[]) => any) | undefined;
        "onAnchor-click"?: ((...args: any[]) => any) | undefined;
        "onAnchor-right-click"?: ((...args: any[]) => any) | undefined;
        "onContent-click"?: ((...args: any[]) => any) | undefined;
        "onClick-outside"?: ((...args: any[]) => any) | undefined;
        "onFocus-outside"?: ((...args: any[]) => any) | undefined;
        "onAnchor-dblclick"?: ((...args: any[]) => any) | undefined;
        onSelected?: ((...args: any[]) => any) | undefined;
    }, {
        close: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        close: (...args: any[]) => void;
        "update:modelValue": (...args: any[]) => void;
        open: (...args: any[]) => void;
        "anchor-click": (...args: any[]) => void;
        "anchor-right-click": (...args: any[]) => void;
        "content-click": (...args: any[]) => void;
        "click-outside": (...args: any[]) => void;
        "focus-outside": (...args: any[]) => void;
        "anchor-dblclick": (...args: any[]) => void;
        selected: (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        stickToEdges: {
            type: BooleanConstructor;
            default: boolean;
        };
        onClose: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        anchor: {
            type: import("vue").PropType<NonNullable<import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector;
        };
        ariaLabel: {
            type: import("vue").PropType<NonNullable<import("../../composables/useTranslation.js").TranslationProp | undefined>>;
            required: true;
            default: import("../../composables/useTranslation.js").TranslationProp | undefined;
        };
        role: {
            type: import("vue").PropType<NonNullable<import("../../utils/types/prop-type.js").StringWithAutocomplete<"button" | "none"> | undefined>>;
            required: true;
            default: import("../../utils/types/prop-type.js").StringWithAutocomplete<"button" | "none"> | undefined;
        };
        disabled: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        readonly: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        "onUpdate:modelValue": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        trigger: {
            type: import("vue").PropType<NonNullable<import("../va-dropdown/hooks/useDropdownNavigation.js").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation.js").Trigger[] | undefined>>;
            required: true;
            default: import("../va-dropdown/hooks/useDropdownNavigation.js").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation.js").Trigger[] | undefined;
        };
        modelValue: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        stateful: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        target: {
            type: import("vue").PropType<NonNullable<import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector;
        };
        placement: {
            type: import("vue").PropType<NonNullable<import("../../composables/usePlacementAliases.js").PlacementWithAlias | undefined>>;
            required: true;
            default: import("../../composables/usePlacementAliases.js").PlacementWithAlias | undefined;
        };
        hoverOverTimeout: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        hoverOutTimeout: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        autoPlacement: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        keepAnchorWidth: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        verticalScrollOnOverflow: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        onOpen: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-right-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onContent-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-outside": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onFocus-outside": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-dblclick": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        anchorSelector: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        innerAnchorSelector: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        closeOnClickOutside: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnFocusOutside: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnAnchorClick: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnContentClick: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        isContentHoverable: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        offset: {
            type: import("vue").PropType<NonNullable<import("../va-dropdown/types.js").DropdownOffsetProp | undefined>>;
            required: true;
            default: import("../va-dropdown/types.js").DropdownOffsetProp | undefined;
        };
        cursor: {
            type: import("vue").PropType<NonNullable<boolean | import("../va-dropdown/types.js").CursorAnchor | undefined>>;
            required: true;
            default: boolean | import("../va-dropdown/types.js").CursorAnchor | undefined;
        };
        teleport: {
            type: import("vue").PropType<NonNullable<import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector;
        };
        keyboardNavigation: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        contentClass: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        options: {
            type: import("vue").PropType<import("../va-menu-list/types.js").VaMenuOption[]>;
            required: true;
            default: import("../va-menu-list/types.js").VaMenuOption[] | undefined;
        };
        textBy: {
            type: import("vue").PropType<NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>>;
            required: true;
            default: import("../../composables/useSelectableList.js").StringOrFunction | undefined;
        };
        valueBy: {
            type: import("vue").PropType<NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>>;
            required: true;
            default: import("../../composables/useSelectableList.js").StringOrFunction | undefined;
        };
        trackBy: {
            type: import("vue").PropType<NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>>;
            required: true;
            default: import("../../composables/useSelectableList.js").StringOrFunction | undefined;
        };
        disabledBy: {
            type: import("vue").PropType<NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>>;
            required: true;
            default: import("../../composables/useSelectableList.js").StringOrFunction | undefined;
        };
        groupBy: {
            type: import("vue").PropType<NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>>;
            required: true;
            default: import("../../composables/useSelectableList.js").StringOrFunction | undefined;
        };
        onSelected: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>> & {
        onClose?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onOpen?: ((...args: any[]) => any) | undefined;
        "onAnchor-click"?: ((...args: any[]) => any) | undefined;
        "onAnchor-right-click"?: ((...args: any[]) => any) | undefined;
        "onContent-click"?: ((...args: any[]) => any) | undefined;
        "onClick-outside"?: ((...args: any[]) => any) | undefined;
        "onFocus-outside"?: ((...args: any[]) => any) | undefined;
        "onAnchor-dblclick"?: ((...args: any[]) => any) | undefined;
        onSelected?: ((...args: any[]) => any) | undefined;
    }, {
        onClose: (...args: any[]) => any;
        anchor: NonNullable<import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector>;
        options: import("../va-menu-list/types.js").VaMenuOption[];
        preset: string;
        ariaLabel: NonNullable<import("../../composables/useTranslation.js").TranslationProp | undefined>;
        role: NonNullable<import("../../utils/types/prop-type.js").StringWithAutocomplete<"button" | "none"> | undefined>;
        disabled: NonNullable<boolean | undefined>;
        readonly: NonNullable<boolean | undefined>;
        "onUpdate:modelValue": (...args: any[]) => any;
        trigger: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation.js").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation.js").Trigger[] | undefined>;
        modelValue: NonNullable<boolean | undefined>;
        stateful: NonNullable<boolean | undefined>;
        target: NonNullable<import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector>;
        textBy: NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>;
        valueBy: NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>;
        trackBy: NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>;
        disabledBy: NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>;
        groupBy: NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>;
        placement: NonNullable<import("../../composables/usePlacementAliases.js").PlacementWithAlias | undefined>;
        hoverOverTimeout: NonNullable<string | number | undefined>;
        hoverOutTimeout: NonNullable<string | number | undefined>;
        autoPlacement: NonNullable<boolean | undefined>;
        stickToEdges: boolean;
        keepAnchorWidth: NonNullable<boolean | undefined>;
        verticalScrollOnOverflow: NonNullable<boolean | undefined>;
        onOpen: (...args: any[]) => any;
        "onAnchor-click": (...args: any[]) => any;
        "onAnchor-right-click": (...args: any[]) => any;
        "onContent-click": (...args: any[]) => any;
        "onClick-outside": (...args: any[]) => any;
        "onFocus-outside": (...args: any[]) => any;
        "onAnchor-dblclick": (...args: any[]) => any;
        anchorSelector: string;
        innerAnchorSelector: string;
        closeOnClickOutside: NonNullable<boolean | undefined>;
        closeOnFocusOutside: NonNullable<boolean | undefined>;
        closeOnAnchorClick: NonNullable<boolean | undefined>;
        closeOnContentClick: NonNullable<boolean | undefined>;
        isContentHoverable: NonNullable<boolean | undefined>;
        offset: NonNullable<import("../va-dropdown/types.js").DropdownOffsetProp | undefined>;
        cursor: NonNullable<boolean | import("../va-dropdown/types.js").CursorAnchor | undefined>;
        teleport: NonNullable<import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector>;
        keyboardNavigation: NonNullable<boolean | undefined>;
        contentClass: string;
        onSelected: (...args: any[]) => any;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        stickToEdges: {
            type: BooleanConstructor;
            default: boolean;
        };
        onClose: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        anchor: {
            type: import("vue").PropType<NonNullable<import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector;
        };
        ariaLabel: {
            type: import("vue").PropType<NonNullable<import("../../composables/useTranslation.js").TranslationProp | undefined>>;
            required: true;
            default: import("../../composables/useTranslation.js").TranslationProp | undefined;
        };
        role: {
            type: import("vue").PropType<NonNullable<import("../../utils/types/prop-type.js").StringWithAutocomplete<"button" | "none"> | undefined>>;
            required: true;
            default: import("../../utils/types/prop-type.js").StringWithAutocomplete<"button" | "none"> | undefined;
        };
        disabled: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        readonly: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        "onUpdate:modelValue": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        trigger: {
            type: import("vue").PropType<NonNullable<import("../va-dropdown/hooks/useDropdownNavigation.js").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation.js").Trigger[] | undefined>>;
            required: true;
            default: import("../va-dropdown/hooks/useDropdownNavigation.js").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation.js").Trigger[] | undefined;
        };
        modelValue: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        stateful: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        target: {
            type: import("vue").PropType<NonNullable<import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector;
        };
        placement: {
            type: import("vue").PropType<NonNullable<import("../../composables/usePlacementAliases.js").PlacementWithAlias | undefined>>;
            required: true;
            default: import("../../composables/usePlacementAliases.js").PlacementWithAlias | undefined;
        };
        hoverOverTimeout: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        hoverOutTimeout: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        autoPlacement: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        keepAnchorWidth: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        verticalScrollOnOverflow: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        onOpen: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-right-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onContent-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-outside": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onFocus-outside": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-dblclick": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        anchorSelector: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        innerAnchorSelector: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        closeOnClickOutside: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnFocusOutside: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnAnchorClick: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnContentClick: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        isContentHoverable: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        offset: {
            type: import("vue").PropType<NonNullable<import("../va-dropdown/types.js").DropdownOffsetProp | undefined>>;
            required: true;
            default: import("../va-dropdown/types.js").DropdownOffsetProp | undefined;
        };
        cursor: {
            type: import("vue").PropType<NonNullable<boolean | import("../va-dropdown/types.js").CursorAnchor | undefined>>;
            required: true;
            default: boolean | import("../va-dropdown/types.js").CursorAnchor | undefined;
        };
        teleport: {
            type: import("vue").PropType<NonNullable<import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector;
        };
        keyboardNavigation: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        contentClass: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        options: {
            type: import("vue").PropType<import("../va-menu-list/types.js").VaMenuOption[]>;
            required: true;
            default: import("../va-menu-list/types.js").VaMenuOption[] | undefined;
        };
        textBy: {
            type: import("vue").PropType<NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>>;
            required: true;
            default: import("../../composables/useSelectableList.js").StringOrFunction | undefined;
        };
        valueBy: {
            type: import("vue").PropType<NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>>;
            required: true;
            default: import("../../composables/useSelectableList.js").StringOrFunction | undefined;
        };
        trackBy: {
            type: import("vue").PropType<NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>>;
            required: true;
            default: import("../../composables/useSelectableList.js").StringOrFunction | undefined;
        };
        disabledBy: {
            type: import("vue").PropType<NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>>;
            required: true;
            default: import("../../composables/useSelectableList.js").StringOrFunction | undefined;
        };
        groupBy: {
            type: import("vue").PropType<NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>>;
            required: true;
            default: import("../../composables/useSelectableList.js").StringOrFunction | undefined;
        };
        onSelected: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>> & {
        onClose?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onOpen?: ((...args: any[]) => any) | undefined;
        "onAnchor-click"?: ((...args: any[]) => any) | undefined;
        "onAnchor-right-click"?: ((...args: any[]) => any) | undefined;
        "onContent-click"?: ((...args: any[]) => any) | undefined;
        "onClick-outside"?: ((...args: any[]) => any) | undefined;
        "onFocus-outside"?: ((...args: any[]) => any) | undefined;
        "onAnchor-dblclick"?: ((...args: any[]) => any) | undefined;
        onSelected?: ((...args: any[]) => any) | undefined;
    }, {
        close: () => void;
    }, {}, {}, {}, {
        onClose: (...args: any[]) => any;
        anchor: NonNullable<import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector>;
        options: import("../va-menu-list/types.js").VaMenuOption[];
        preset: string;
        ariaLabel: NonNullable<import("../../composables/useTranslation.js").TranslationProp | undefined>;
        role: NonNullable<import("../../utils/types/prop-type.js").StringWithAutocomplete<"button" | "none"> | undefined>;
        disabled: NonNullable<boolean | undefined>;
        readonly: NonNullable<boolean | undefined>;
        "onUpdate:modelValue": (...args: any[]) => any;
        trigger: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation.js").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation.js").Trigger[] | undefined>;
        modelValue: NonNullable<boolean | undefined>;
        stateful: NonNullable<boolean | undefined>;
        target: NonNullable<import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector>;
        textBy: NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>;
        valueBy: NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>;
        trackBy: NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>;
        disabledBy: NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>;
        groupBy: NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>;
        placement: NonNullable<import("../../composables/usePlacementAliases.js").PlacementWithAlias | undefined>;
        hoverOverTimeout: NonNullable<string | number | undefined>;
        hoverOutTimeout: NonNullable<string | number | undefined>;
        autoPlacement: NonNullable<boolean | undefined>;
        stickToEdges: boolean;
        keepAnchorWidth: NonNullable<boolean | undefined>;
        verticalScrollOnOverflow: NonNullable<boolean | undefined>;
        onOpen: (...args: any[]) => any;
        "onAnchor-click": (...args: any[]) => any;
        "onAnchor-right-click": (...args: any[]) => any;
        "onContent-click": (...args: any[]) => any;
        "onClick-outside": (...args: any[]) => any;
        "onFocus-outside": (...args: any[]) => any;
        "onAnchor-dblclick": (...args: any[]) => any;
        anchorSelector: string;
        innerAnchorSelector: string;
        closeOnClickOutside: NonNullable<boolean | undefined>;
        closeOnFocusOutside: NonNullable<boolean | undefined>;
        closeOnAnchorClick: NonNullable<boolean | undefined>;
        closeOnContentClick: NonNullable<boolean | undefined>;
        isContentHoverable: NonNullable<boolean | undefined>;
        offset: NonNullable<import("../va-dropdown/types.js").DropdownOffsetProp | undefined>;
        cursor: NonNullable<boolean | import("../va-dropdown/types.js").CursorAnchor | undefined>;
        teleport: NonNullable<import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector>;
        keyboardNavigation: NonNullable<boolean | undefined>;
        contentClass: string;
        onSelected: (...args: any[]) => any;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    stickToEdges: {
        type: BooleanConstructor;
        default: boolean;
    };
    onClose: {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    anchor: {
        type: import("vue").PropType<NonNullable<import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector;
    };
    ariaLabel: {
        type: import("vue").PropType<NonNullable<import("../../composables/useTranslation.js").TranslationProp | undefined>>;
        required: true;
        default: import("../../composables/useTranslation.js").TranslationProp | undefined;
    };
    role: {
        type: import("vue").PropType<NonNullable<import("../../utils/types/prop-type.js").StringWithAutocomplete<"button" | "none"> | undefined>>;
        required: true;
        default: import("../../utils/types/prop-type.js").StringWithAutocomplete<"button" | "none"> | undefined;
    };
    disabled: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    readonly: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    "onUpdate:modelValue": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    trigger: {
        type: import("vue").PropType<NonNullable<import("../va-dropdown/hooks/useDropdownNavigation.js").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation.js").Trigger[] | undefined>>;
        required: true;
        default: import("../va-dropdown/hooks/useDropdownNavigation.js").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation.js").Trigger[] | undefined;
    };
    modelValue: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    stateful: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    target: {
        type: import("vue").PropType<NonNullable<import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector;
    };
    placement: {
        type: import("vue").PropType<NonNullable<import("../../composables/usePlacementAliases.js").PlacementWithAlias | undefined>>;
        required: true;
        default: import("../../composables/usePlacementAliases.js").PlacementWithAlias | undefined;
    };
    hoverOverTimeout: {
        type: import("vue").PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    hoverOutTimeout: {
        type: import("vue").PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    autoPlacement: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    keepAnchorWidth: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    verticalScrollOnOverflow: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    onOpen: {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onAnchor-click": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onAnchor-right-click": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onContent-click": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-outside": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onFocus-outside": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onAnchor-dblclick": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    anchorSelector: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    innerAnchorSelector: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    closeOnClickOutside: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    closeOnFocusOutside: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    closeOnAnchorClick: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    closeOnContentClick: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    isContentHoverable: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    offset: {
        type: import("vue").PropType<NonNullable<import("../va-dropdown/types.js").DropdownOffsetProp | undefined>>;
        required: true;
        default: import("../va-dropdown/types.js").DropdownOffsetProp | undefined;
    };
    cursor: {
        type: import("vue").PropType<NonNullable<boolean | import("../va-dropdown/types.js").CursorAnchor | undefined>>;
        required: true;
        default: boolean | import("../va-dropdown/types.js").CursorAnchor | undefined;
    };
    teleport: {
        type: import("vue").PropType<NonNullable<import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector;
    };
    keyboardNavigation: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    contentClass: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    options: {
        type: import("vue").PropType<import("../va-menu-list/types.js").VaMenuOption[]>;
        required: true;
        default: import("../va-menu-list/types.js").VaMenuOption[] | undefined;
    };
    textBy: {
        type: import("vue").PropType<NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>>;
        required: true;
        default: import("../../composables/useSelectableList.js").StringOrFunction | undefined;
    };
    valueBy: {
        type: import("vue").PropType<NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>>;
        required: true;
        default: import("../../composables/useSelectableList.js").StringOrFunction | undefined;
    };
    trackBy: {
        type: import("vue").PropType<NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>>;
        required: true;
        default: import("../../composables/useSelectableList.js").StringOrFunction | undefined;
    };
    disabledBy: {
        type: import("vue").PropType<NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>>;
        required: true;
        default: import("../../composables/useSelectableList.js").StringOrFunction | undefined;
    };
    groupBy: {
        type: import("vue").PropType<NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>>;
        required: true;
        default: import("../../composables/useSelectableList.js").StringOrFunction | undefined;
    };
    onSelected: {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    onClose?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onOpen?: ((...args: any[]) => any) | undefined;
    "onAnchor-click"?: ((...args: any[]) => any) | undefined;
    "onAnchor-right-click"?: ((...args: any[]) => any) | undefined;
    "onContent-click"?: ((...args: any[]) => any) | undefined;
    "onClick-outside"?: ((...args: any[]) => any) | undefined;
    "onFocus-outside"?: ((...args: any[]) => any) | undefined;
    "onAnchor-dblclick"?: ((...args: any[]) => any) | undefined;
    onSelected?: ((...args: any[]) => any) | undefined;
}, {
    close: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    close: (...args: any[]) => void;
    "update:modelValue": (...args: any[]) => void;
    open: (...args: any[]) => void;
    "anchor-click": (...args: any[]) => void;
    "anchor-right-click": (...args: any[]) => void;
    "content-click": (...args: any[]) => void;
    "click-outside": (...args: any[]) => void;
    "focus-outside": (...args: any[]) => void;
    "anchor-dblclick": (...args: any[]) => void;
    selected: (...args: any[]) => void;
}, string, {
    onClose: (...args: any[]) => any;
    anchor: NonNullable<import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector>;
    options: import("../va-menu-list/types.js").VaMenuOption[];
    preset: string;
    ariaLabel: NonNullable<import("../../composables/useTranslation.js").TranslationProp | undefined>;
    role: NonNullable<import("../../utils/types/prop-type.js").StringWithAutocomplete<"button" | "none"> | undefined>;
    disabled: NonNullable<boolean | undefined>;
    readonly: NonNullable<boolean | undefined>;
    "onUpdate:modelValue": (...args: any[]) => any;
    trigger: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation.js").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation.js").Trigger[] | undefined>;
    modelValue: NonNullable<boolean | undefined>;
    stateful: NonNullable<boolean | undefined>;
    target: NonNullable<import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector>;
    textBy: NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>;
    valueBy: NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>;
    trackBy: NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>;
    disabledBy: NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>;
    groupBy: NonNullable<import("../../composables/useSelectableList.js").StringOrFunction | undefined>;
    placement: NonNullable<import("../../composables/usePlacementAliases.js").PlacementWithAlias | undefined>;
    hoverOverTimeout: NonNullable<string | number | undefined>;
    hoverOutTimeout: NonNullable<string | number | undefined>;
    autoPlacement: NonNullable<boolean | undefined>;
    stickToEdges: boolean;
    keepAnchorWidth: NonNullable<boolean | undefined>;
    verticalScrollOnOverflow: NonNullable<boolean | undefined>;
    onOpen: (...args: any[]) => any;
    "onAnchor-click": (...args: any[]) => any;
    "onAnchor-right-click": (...args: any[]) => any;
    "onContent-click": (...args: any[]) => any;
    "onClick-outside": (...args: any[]) => any;
    "onFocus-outside": (...args: any[]) => any;
    "onAnchor-dblclick": (...args: any[]) => any;
    anchorSelector: string;
    innerAnchorSelector: string;
    closeOnClickOutside: NonNullable<boolean | undefined>;
    closeOnFocusOutside: NonNullable<boolean | undefined>;
    closeOnAnchorClick: NonNullable<boolean | undefined>;
    closeOnContentClick: NonNullable<boolean | undefined>;
    isContentHoverable: NonNullable<boolean | undefined>;
    offset: NonNullable<import("../va-dropdown/types.js").DropdownOffsetProp | undefined>;
    cursor: NonNullable<boolean | import("../va-dropdown/types.js").CursorAnchor | undefined>;
    teleport: NonNullable<import("../../composables/useHTMLElementSelector.js").MaybeHTMLElementOrSelector>;
    keyboardNavigation: NonNullable<boolean | undefined>;
    contentClass: string;
    onSelected: (...args: any[]) => any;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        anchor?(_: {}): any;
        default?(_: {}): any;
    };
});
