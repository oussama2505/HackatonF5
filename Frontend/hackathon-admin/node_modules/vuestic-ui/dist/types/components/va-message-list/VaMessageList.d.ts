export declare const VaMessageList: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: import("vue").PropType<string | string[]>;
            default: string;
        };
        limit: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        color: {
            type: StringConstructor;
        };
        hasError: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>>, {
        messages: import("vue").ComputedRef<string[]>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: import("vue").PropType<string | string[]>;
            default: string;
        };
        limit: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        color: {
            type: StringConstructor;
        };
        hasError: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>>, {
        modelValue: string | string[];
        limit: string | number;
        hasError: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: import("vue").PropType<string | string[]>;
            default: string;
        };
        limit: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        color: {
            type: StringConstructor;
        };
        hasError: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>>, {
        messages: import("vue").ComputedRef<string[]>;
    }, {}, {}, {}, {
        modelValue: string | string[];
        limit: string | number;
        hasError: boolean;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: import("vue").PropType<string | string[]>;
        default: string;
    };
    limit: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    color: {
        type: StringConstructor;
    };
    hasError: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, {
    messages: import("vue").ComputedRef<string[]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    modelValue: string | string[];
    limit: string | number;
    hasError: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {
            ariaAttributes: {
                'aria-describedby': string | undefined;
                'aria-invalid': boolean;
            };
            messages: string[];
            attrs: {
                [x: string]: unknown;
            };
        }): any;
        messages?(_: {
            ariaAttributes: {
                id: string;
                role: "alert";
            };
            messages: string[];
        }): any;
        message?(_: {
            messages: string[];
            message: string;
        }): any;
    };
});
