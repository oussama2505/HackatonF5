import { ComputedRef, PropType } from 'vue';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    modelValue: {
        type: PropType<string | string[]>;
        default: string;
    };
    limit: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    color: {
        type: StringConstructor;
    };
    hasError: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    messages: ComputedRef<string[]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: PropType<string | string[]>;
        default: string;
    };
    limit: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    color: {
        type: StringConstructor;
    };
    hasError: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, {
    modelValue: string | string[];
    limit: string | number;
    hasError: boolean;
}, {}>, {
    default?(_: {
        ariaAttributes: {
            'aria-describedby': string | undefined;
            'aria-invalid': boolean;
        };
        messages: string[];
        attrs: {
            [x: string]: unknown;
        };
    }): any;
    messages?(_: {
        ariaAttributes: {
            id: string;
            role: "alert";
        };
        messages: string[];
    }): any;
    message?(_: {
        messages: string[];
        message: string;
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
