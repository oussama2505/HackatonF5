export declare const VaModal: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        attachElement: {
            type: StringConstructor;
            default: string;
        };
        allowBodyScroll: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableAttachment: {
            type: BooleanConstructor;
            default: boolean;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        message: {
            type: StringConstructor;
            default: string;
        };
        okText: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        cancelText: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        hideDefaultActions: {
            type: BooleanConstructor;
            default: boolean;
        };
        fullscreen: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeButton: {
            type: BooleanConstructor;
            default: boolean;
        };
        mobileFullscreen: {
            type: BooleanConstructor;
            default: boolean;
        };
        noDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        noOutsideDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        noEscDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxWidth: {
            type: StringConstructor;
            default: string;
        };
        maxHeight: {
            type: StringConstructor;
            default: string;
        };
        anchorClass: {
            type: StringConstructor;
        };
        size: {
            type: import("vue").PropType<import("../../utils/types/prop-type").StringWithAutocomplete<"small" | "medium" | "large" | "auto">>;
            default: string;
        };
        sizesConfig: {
            type: ObjectConstructor;
            default: () => {
                defaultSize: string;
                sizes: {
                    small: number;
                    medium: number;
                    large: number;
                    auto: string;
                };
            };
        };
        fixedLayout: {
            type: BooleanConstructor;
            default: boolean;
        };
        withoutTransitions: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlayOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        showNestedOverlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        blur: {
            type: BooleanConstructor;
            default: boolean;
        };
        zIndex: {
            type: (StringConstructor | NumberConstructor)[];
            default: undefined;
        };
        backgroundColor: {
            type: StringConstructor;
            default: string;
        };
        noPadding: {
            type: BooleanConstructor;
            default: boolean;
        };
        beforeClose: {
            type: import("vue").PropType<(hide: () => void) => any>;
        };
        beforeOk: {
            type: import("vue").PropType<(hide: () => void) => any>;
        };
        beforeCancel: {
            type: import("vue").PropType<(hide: () => void) => any>;
        };
        ariaCloseLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        "child:cancelButton": {
            type: import("vue").PropType<NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                preset: string;
                append: boolean;
                type: string;
                disabled: boolean;
                tag: string;
                href: string;
                color: string;
                loading: boolean;
                to: string | Record<string, any>;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                target: string;
                sizesConfig: Record<string, any>;
                textColor: string;
                round: boolean;
                fontSizesConfig: Record<string, any>;
                icon: string;
                block: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                borderColor: string;
                gradient: boolean;
                plain: boolean;
                iconRight: string;
                iconColor: string;
                pressedBehavior: "mask" | "opacity";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "mask" | "opacity";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly disabled: boolean;
                readonly tag: string;
                readonly color: string;
                readonly loading: boolean;
                readonly sizesConfig: Record<string, any>;
                readonly textColor: string;
                readonly round: boolean;
                readonly fontSizesConfig: Record<string, any>;
                readonly icon: string;
                readonly block: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly plain: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "mask" | "opacity";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "mask" | "opacity";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: string | undefined;
                readonly append?: boolean | undefined;
                readonly href?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly target?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: import("vue").PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: import("vue").PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: import("vue").PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
            }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
            required: false;
            default: undefined;
        };
        "child:okButton": {
            type: import("vue").PropType<NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                preset: string;
                append: boolean;
                type: string;
                disabled: boolean;
                tag: string;
                href: string;
                color: string;
                loading: boolean;
                to: string | Record<string, any>;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                target: string;
                sizesConfig: Record<string, any>;
                textColor: string;
                round: boolean;
                fontSizesConfig: Record<string, any>;
                icon: string;
                block: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                borderColor: string;
                gradient: boolean;
                plain: boolean;
                iconRight: string;
                iconColor: string;
                pressedBehavior: "mask" | "opacity";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "mask" | "opacity";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly disabled: boolean;
                readonly tag: string;
                readonly color: string;
                readonly loading: boolean;
                readonly sizesConfig: Record<string, any>;
                readonly textColor: string;
                readonly round: boolean;
                readonly fontSizesConfig: Record<string, any>;
                readonly icon: string;
                readonly block: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly plain: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "mask" | "opacity";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "mask" | "opacity";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: string | undefined;
                readonly append?: boolean | undefined;
                readonly href?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly target?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: import("vue").PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: import("vue").PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: import("vue").PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
            }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
            required: false;
            default: undefined;
        };
        "child:closeButton": {
            type: import("vue").PropType<NonNullable<Partial<{
                size: string | number;
                preset: string;
                name: string;
                sizesConfig: Record<string, any>;
                flip: "horizontal" | "vertical" | "off" | "both";
                fontSizesConfig: Record<string, any>;
            }> & Omit<{
                readonly size: string | number;
                readonly name: string;
                readonly sizesConfig: Record<string, any>;
                readonly flip: "horizontal" | "vertical" | "off" | "both";
                readonly fontSizesConfig: Record<string, any>;
                readonly preset?: string | undefined;
                readonly tag?: string | undefined;
                readonly color?: string | undefined;
                readonly component?: any;
                readonly rotation?: string | number | undefined;
                readonly spin?: string | boolean | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                name: {
                    type: StringConstructor;
                    default: string;
                };
                tag: {
                    type: StringConstructor;
                };
                component: {
                    type: import("vue").PropType<any>;
                };
                color: {
                    type: StringConstructor;
                };
                rotation: {
                    type: (StringConstructor | NumberConstructor)[];
                };
                spin: {
                    type: (BooleanConstructor | StringConstructor)[];
                };
                flip: {
                    type: import("vue").PropType<"horizontal" | "vertical" | "off" | "both">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
                size: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: string;
                    validator: (size: string | number) => boolean;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
            }>>, "size" | "preset" | "name" | "sizesConfig" | "flip" | "fontSizesConfig">>>;
            required: false;
            default: undefined;
        };
    }>> & {
        onCancel?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onOpen?: ((...args: any[]) => any) | undefined;
        "onClick-outside"?: ((...args: any[]) => any) | undefined;
        onOk?: ((...args: any[]) => any) | undefined;
        "onBefore-open"?: ((...args: any[]) => any) | undefined;
        "onBefore-close"?: ((...args: any[]) => any) | undefined;
    }, {
        show: () => void;
        hide: (cb?: (() => void) | undefined) => void;
        toggle: () => void;
        cancel: () => void;
        ok: () => void;
        onBeforeEnterTransition: (el: HTMLElement) => void;
        onAfterEnterTransition: (el: HTMLElement) => void;
        onBeforeLeaveTransition: (el: HTMLElement) => void;
        onAfterLeaveTransition: (el: HTMLElement) => void;
        listenKeyUp: (e: KeyboardEvent) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        cancel: (...args: any[]) => void;
        close: (...args: any[]) => void;
        "update:modelValue": (...args: any[]) => void;
        ok: (...args: any[]) => void;
        open: (...args: any[]) => void;
        "click-outside": (...args: any[]) => void;
        "before-open": (...args: any[]) => void;
        "before-close": (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        attachElement: {
            type: StringConstructor;
            default: string;
        };
        allowBodyScroll: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableAttachment: {
            type: BooleanConstructor;
            default: boolean;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        message: {
            type: StringConstructor;
            default: string;
        };
        okText: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        cancelText: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        hideDefaultActions: {
            type: BooleanConstructor;
            default: boolean;
        };
        fullscreen: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeButton: {
            type: BooleanConstructor;
            default: boolean;
        };
        mobileFullscreen: {
            type: BooleanConstructor;
            default: boolean;
        };
        noDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        noOutsideDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        noEscDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxWidth: {
            type: StringConstructor;
            default: string;
        };
        maxHeight: {
            type: StringConstructor;
            default: string;
        };
        anchorClass: {
            type: StringConstructor;
        };
        size: {
            type: import("vue").PropType<import("../../utils/types/prop-type").StringWithAutocomplete<"small" | "medium" | "large" | "auto">>;
            default: string;
        };
        sizesConfig: {
            type: ObjectConstructor;
            default: () => {
                defaultSize: string;
                sizes: {
                    small: number;
                    medium: number;
                    large: number;
                    auto: string;
                };
            };
        };
        fixedLayout: {
            type: BooleanConstructor;
            default: boolean;
        };
        withoutTransitions: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlayOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        showNestedOverlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        blur: {
            type: BooleanConstructor;
            default: boolean;
        };
        zIndex: {
            type: (StringConstructor | NumberConstructor)[];
            default: undefined;
        };
        backgroundColor: {
            type: StringConstructor;
            default: string;
        };
        noPadding: {
            type: BooleanConstructor;
            default: boolean;
        };
        beforeClose: {
            type: import("vue").PropType<(hide: () => void) => any>;
        };
        beforeOk: {
            type: import("vue").PropType<(hide: () => void) => any>;
        };
        beforeCancel: {
            type: import("vue").PropType<(hide: () => void) => any>;
        };
        ariaCloseLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        "child:cancelButton": {
            type: import("vue").PropType<NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                preset: string;
                append: boolean;
                type: string;
                disabled: boolean;
                tag: string;
                href: string;
                color: string;
                loading: boolean;
                to: string | Record<string, any>;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                target: string;
                sizesConfig: Record<string, any>;
                textColor: string;
                round: boolean;
                fontSizesConfig: Record<string, any>;
                icon: string;
                block: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                borderColor: string;
                gradient: boolean;
                plain: boolean;
                iconRight: string;
                iconColor: string;
                pressedBehavior: "mask" | "opacity";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "mask" | "opacity";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly disabled: boolean;
                readonly tag: string;
                readonly color: string;
                readonly loading: boolean;
                readonly sizesConfig: Record<string, any>;
                readonly textColor: string;
                readonly round: boolean;
                readonly fontSizesConfig: Record<string, any>;
                readonly icon: string;
                readonly block: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly plain: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "mask" | "opacity";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "mask" | "opacity";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: string | undefined;
                readonly append?: boolean | undefined;
                readonly href?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly target?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: import("vue").PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: import("vue").PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: import("vue").PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
            }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
            required: false;
            default: undefined;
        };
        "child:okButton": {
            type: import("vue").PropType<NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                preset: string;
                append: boolean;
                type: string;
                disabled: boolean;
                tag: string;
                href: string;
                color: string;
                loading: boolean;
                to: string | Record<string, any>;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                target: string;
                sizesConfig: Record<string, any>;
                textColor: string;
                round: boolean;
                fontSizesConfig: Record<string, any>;
                icon: string;
                block: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                borderColor: string;
                gradient: boolean;
                plain: boolean;
                iconRight: string;
                iconColor: string;
                pressedBehavior: "mask" | "opacity";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "mask" | "opacity";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly disabled: boolean;
                readonly tag: string;
                readonly color: string;
                readonly loading: boolean;
                readonly sizesConfig: Record<string, any>;
                readonly textColor: string;
                readonly round: boolean;
                readonly fontSizesConfig: Record<string, any>;
                readonly icon: string;
                readonly block: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly plain: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "mask" | "opacity";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "mask" | "opacity";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: string | undefined;
                readonly append?: boolean | undefined;
                readonly href?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly target?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: import("vue").PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: import("vue").PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: import("vue").PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
            }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
            required: false;
            default: undefined;
        };
        "child:closeButton": {
            type: import("vue").PropType<NonNullable<Partial<{
                size: string | number;
                preset: string;
                name: string;
                sizesConfig: Record<string, any>;
                flip: "horizontal" | "vertical" | "off" | "both";
                fontSizesConfig: Record<string, any>;
            }> & Omit<{
                readonly size: string | number;
                readonly name: string;
                readonly sizesConfig: Record<string, any>;
                readonly flip: "horizontal" | "vertical" | "off" | "both";
                readonly fontSizesConfig: Record<string, any>;
                readonly preset?: string | undefined;
                readonly tag?: string | undefined;
                readonly color?: string | undefined;
                readonly component?: any;
                readonly rotation?: string | number | undefined;
                readonly spin?: string | boolean | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                name: {
                    type: StringConstructor;
                    default: string;
                };
                tag: {
                    type: StringConstructor;
                };
                component: {
                    type: import("vue").PropType<any>;
                };
                color: {
                    type: StringConstructor;
                };
                rotation: {
                    type: (StringConstructor | NumberConstructor)[];
                };
                spin: {
                    type: (BooleanConstructor | StringConstructor)[];
                };
                flip: {
                    type: import("vue").PropType<"horizontal" | "vertical" | "off" | "both">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
                size: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: string;
                    validator: (size: string | number) => boolean;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
            }>>, "size" | "preset" | "name" | "sizesConfig" | "flip" | "fontSizesConfig">>>;
            required: false;
            default: undefined;
        };
    }>> & {
        onCancel?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onOpen?: ((...args: any[]) => any) | undefined;
        "onClick-outside"?: ((...args: any[]) => any) | undefined;
        onOk?: ((...args: any[]) => any) | undefined;
        "onBefore-open"?: ((...args: any[]) => any) | undefined;
        "onBefore-close"?: ((...args: any[]) => any) | undefined;
    }, {
        title: string;
        blur: boolean;
        size: import("../../utils/types/prop-type").StringWithAutocomplete<"small" | "medium" | "large" | "auto">;
        message: string;
        modelValue: boolean;
        stateful: boolean;
        sizesConfig: Record<string, any>;
        zIndex: string | number;
        noPadding: boolean;
        backgroundColor: string;
        closeButton: boolean;
        "child:cancelButton": NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            preset: string;
            append: boolean;
            type: string;
            disabled: boolean;
            tag: string;
            href: string;
            color: string;
            loading: boolean;
            to: string | Record<string, any>;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            target: string;
            sizesConfig: Record<string, any>;
            textColor: string;
            round: boolean;
            fontSizesConfig: Record<string, any>;
            icon: string;
            block: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            borderColor: string;
            gradient: boolean;
            plain: boolean;
            iconRight: string;
            iconColor: string;
            pressedBehavior: "mask" | "opacity";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "mask" | "opacity";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly disabled: boolean;
            readonly tag: string;
            readonly color: string;
            readonly loading: boolean;
            readonly sizesConfig: Record<string, any>;
            readonly textColor: string;
            readonly round: boolean;
            readonly fontSizesConfig: Record<string, any>;
            readonly icon: string;
            readonly block: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly plain: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "mask" | "opacity";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "mask" | "opacity";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: string | undefined;
            readonly append?: boolean | undefined;
            readonly href?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly target?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
        "child:okButton": NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            preset: string;
            append: boolean;
            type: string;
            disabled: boolean;
            tag: string;
            href: string;
            color: string;
            loading: boolean;
            to: string | Record<string, any>;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            target: string;
            sizesConfig: Record<string, any>;
            textColor: string;
            round: boolean;
            fontSizesConfig: Record<string, any>;
            icon: string;
            block: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            borderColor: string;
            gradient: boolean;
            plain: boolean;
            iconRight: string;
            iconColor: string;
            pressedBehavior: "mask" | "opacity";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "mask" | "opacity";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly disabled: boolean;
            readonly tag: string;
            readonly color: string;
            readonly loading: boolean;
            readonly sizesConfig: Record<string, any>;
            readonly textColor: string;
            readonly round: boolean;
            readonly fontSizesConfig: Record<string, any>;
            readonly icon: string;
            readonly block: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly plain: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "mask" | "opacity";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "mask" | "opacity";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: string | undefined;
            readonly append?: boolean | undefined;
            readonly href?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly target?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
        "child:closeButton": NonNullable<Partial<{
            size: string | number;
            preset: string;
            name: string;
            sizesConfig: Record<string, any>;
            flip: "horizontal" | "vertical" | "off" | "both";
            fontSizesConfig: Record<string, any>;
        }> & Omit<{
            readonly size: string | number;
            readonly name: string;
            readonly sizesConfig: Record<string, any>;
            readonly flip: "horizontal" | "vertical" | "off" | "both";
            readonly fontSizesConfig: Record<string, any>;
            readonly preset?: string | undefined;
            readonly tag?: string | undefined;
            readonly color?: string | undefined;
            readonly component?: any;
            readonly rotation?: string | number | undefined;
            readonly spin?: string | boolean | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            name: {
                type: StringConstructor;
                default: string;
            };
            tag: {
                type: StringConstructor;
            };
            component: {
                type: import("vue").PropType<any>;
            };
            color: {
                type: StringConstructor;
            };
            rotation: {
                type: (StringConstructor | NumberConstructor)[];
            };
            spin: {
                type: (BooleanConstructor | StringConstructor)[];
            };
            flip: {
                type: import("vue").PropType<"horizontal" | "vertical" | "off" | "both">;
                default: string;
                validator: (value: string) => boolean;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
            size: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
                validator: (size: string | number) => boolean;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
        }>>, "size" | "preset" | "name" | "sizesConfig" | "flip" | "fontSizesConfig">>;
        attachElement: string;
        allowBodyScroll: boolean;
        disableAttachment: boolean;
        okText: import("../../composables").TranslationProp;
        cancelText: import("../../composables").TranslationProp;
        hideDefaultActions: boolean;
        fullscreen: boolean;
        mobileFullscreen: boolean;
        noDismiss: boolean;
        noOutsideDismiss: boolean;
        noEscDismiss: boolean;
        maxWidth: string;
        maxHeight: string;
        fixedLayout: boolean;
        withoutTransitions: boolean;
        overlay: boolean;
        overlayOpacity: string | number;
        showNestedOverlay: boolean;
        ariaCloseLabel: import("../../composables").TranslationProp;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        attachElement: {
            type: StringConstructor;
            default: string;
        };
        allowBodyScroll: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableAttachment: {
            type: BooleanConstructor;
            default: boolean;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        message: {
            type: StringConstructor;
            default: string;
        };
        okText: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        cancelText: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        hideDefaultActions: {
            type: BooleanConstructor;
            default: boolean;
        };
        fullscreen: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeButton: {
            type: BooleanConstructor;
            default: boolean;
        };
        mobileFullscreen: {
            type: BooleanConstructor;
            default: boolean;
        };
        noDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        noOutsideDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        noEscDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxWidth: {
            type: StringConstructor;
            default: string;
        };
        maxHeight: {
            type: StringConstructor;
            default: string;
        };
        anchorClass: {
            type: StringConstructor;
        };
        size: {
            type: import("vue").PropType<import("../../utils/types/prop-type").StringWithAutocomplete<"small" | "medium" | "large" | "auto">>;
            default: string;
        };
        sizesConfig: {
            type: ObjectConstructor;
            default: () => {
                defaultSize: string;
                sizes: {
                    small: number;
                    medium: number;
                    large: number;
                    auto: string;
                };
            };
        };
        fixedLayout: {
            type: BooleanConstructor;
            default: boolean;
        };
        withoutTransitions: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlayOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        showNestedOverlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        blur: {
            type: BooleanConstructor;
            default: boolean;
        };
        zIndex: {
            type: (StringConstructor | NumberConstructor)[];
            default: undefined;
        };
        backgroundColor: {
            type: StringConstructor;
            default: string;
        };
        noPadding: {
            type: BooleanConstructor;
            default: boolean;
        };
        beforeClose: {
            type: import("vue").PropType<(hide: () => void) => any>;
        };
        beforeOk: {
            type: import("vue").PropType<(hide: () => void) => any>;
        };
        beforeCancel: {
            type: import("vue").PropType<(hide: () => void) => any>;
        };
        ariaCloseLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        "child:cancelButton": {
            type: import("vue").PropType<NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                preset: string;
                append: boolean;
                type: string;
                disabled: boolean;
                tag: string;
                href: string;
                color: string;
                loading: boolean;
                to: string | Record<string, any>;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                target: string;
                sizesConfig: Record<string, any>;
                textColor: string;
                round: boolean;
                fontSizesConfig: Record<string, any>;
                icon: string;
                block: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                borderColor: string;
                gradient: boolean;
                plain: boolean;
                iconRight: string;
                iconColor: string;
                pressedBehavior: "mask" | "opacity";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "mask" | "opacity";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly disabled: boolean;
                readonly tag: string;
                readonly color: string;
                readonly loading: boolean;
                readonly sizesConfig: Record<string, any>;
                readonly textColor: string;
                readonly round: boolean;
                readonly fontSizesConfig: Record<string, any>;
                readonly icon: string;
                readonly block: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly plain: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "mask" | "opacity";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "mask" | "opacity";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: string | undefined;
                readonly append?: boolean | undefined;
                readonly href?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly target?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: import("vue").PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: import("vue").PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: import("vue").PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
            }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
            required: false;
            default: undefined;
        };
        "child:okButton": {
            type: import("vue").PropType<NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                preset: string;
                append: boolean;
                type: string;
                disabled: boolean;
                tag: string;
                href: string;
                color: string;
                loading: boolean;
                to: string | Record<string, any>;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                target: string;
                sizesConfig: Record<string, any>;
                textColor: string;
                round: boolean;
                fontSizesConfig: Record<string, any>;
                icon: string;
                block: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                borderColor: string;
                gradient: boolean;
                plain: boolean;
                iconRight: string;
                iconColor: string;
                pressedBehavior: "mask" | "opacity";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "mask" | "opacity";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly disabled: boolean;
                readonly tag: string;
                readonly color: string;
                readonly loading: boolean;
                readonly sizesConfig: Record<string, any>;
                readonly textColor: string;
                readonly round: boolean;
                readonly fontSizesConfig: Record<string, any>;
                readonly icon: string;
                readonly block: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly plain: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "mask" | "opacity";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "mask" | "opacity";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: string | undefined;
                readonly append?: boolean | undefined;
                readonly href?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly target?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: import("vue").PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: import("vue").PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: import("vue").PropType<"mask" | "opacity">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
            }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
            required: false;
            default: undefined;
        };
        "child:closeButton": {
            type: import("vue").PropType<NonNullable<Partial<{
                size: string | number;
                preset: string;
                name: string;
                sizesConfig: Record<string, any>;
                flip: "horizontal" | "vertical" | "off" | "both";
                fontSizesConfig: Record<string, any>;
            }> & Omit<{
                readonly size: string | number;
                readonly name: string;
                readonly sizesConfig: Record<string, any>;
                readonly flip: "horizontal" | "vertical" | "off" | "both";
                readonly fontSizesConfig: Record<string, any>;
                readonly preset?: string | undefined;
                readonly tag?: string | undefined;
                readonly color?: string | undefined;
                readonly component?: any;
                readonly rotation?: string | number | undefined;
                readonly spin?: string | boolean | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                name: {
                    type: StringConstructor;
                    default: string;
                };
                tag: {
                    type: StringConstructor;
                };
                component: {
                    type: import("vue").PropType<any>;
                };
                color: {
                    type: StringConstructor;
                };
                rotation: {
                    type: (StringConstructor | NumberConstructor)[];
                };
                spin: {
                    type: (BooleanConstructor | StringConstructor)[];
                };
                flip: {
                    type: import("vue").PropType<"horizontal" | "vertical" | "off" | "both">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
                size: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: string;
                    validator: (size: string | number) => boolean;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
            }>>, "size" | "preset" | "name" | "sizesConfig" | "flip" | "fontSizesConfig">>>;
            required: false;
            default: undefined;
        };
    }>> & {
        onCancel?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onOpen?: ((...args: any[]) => any) | undefined;
        "onClick-outside"?: ((...args: any[]) => any) | undefined;
        onOk?: ((...args: any[]) => any) | undefined;
        "onBefore-open"?: ((...args: any[]) => any) | undefined;
        "onBefore-close"?: ((...args: any[]) => any) | undefined;
    }, {
        show: () => void;
        hide: (cb?: (() => void) | undefined) => void;
        toggle: () => void;
        cancel: () => void;
        ok: () => void;
        onBeforeEnterTransition: (el: HTMLElement) => void;
        onAfterEnterTransition: (el: HTMLElement) => void;
        onBeforeLeaveTransition: (el: HTMLElement) => void;
        onAfterLeaveTransition: (el: HTMLElement) => void;
        listenKeyUp: (e: KeyboardEvent) => void;
    }, {}, {}, {}, {
        title: string;
        blur: boolean;
        size: import("../../utils/types/prop-type").StringWithAutocomplete<"small" | "medium" | "large" | "auto">;
        message: string;
        modelValue: boolean;
        stateful: boolean;
        sizesConfig: Record<string, any>;
        zIndex: string | number;
        noPadding: boolean;
        backgroundColor: string;
        closeButton: boolean;
        "child:cancelButton": NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            preset: string;
            append: boolean;
            type: string;
            disabled: boolean;
            tag: string;
            href: string;
            color: string;
            loading: boolean;
            to: string | Record<string, any>;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            target: string;
            sizesConfig: Record<string, any>;
            textColor: string;
            round: boolean;
            fontSizesConfig: Record<string, any>;
            icon: string;
            block: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            borderColor: string;
            gradient: boolean;
            plain: boolean;
            iconRight: string;
            iconColor: string;
            pressedBehavior: "mask" | "opacity";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "mask" | "opacity";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly disabled: boolean;
            readonly tag: string;
            readonly color: string;
            readonly loading: boolean;
            readonly sizesConfig: Record<string, any>;
            readonly textColor: string;
            readonly round: boolean;
            readonly fontSizesConfig: Record<string, any>;
            readonly icon: string;
            readonly block: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly plain: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "mask" | "opacity";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "mask" | "opacity";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: string | undefined;
            readonly append?: boolean | undefined;
            readonly href?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly target?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
        "child:okButton": NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            preset: string;
            append: boolean;
            type: string;
            disabled: boolean;
            tag: string;
            href: string;
            color: string;
            loading: boolean;
            to: string | Record<string, any>;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            target: string;
            sizesConfig: Record<string, any>;
            textColor: string;
            round: boolean;
            fontSizesConfig: Record<string, any>;
            icon: string;
            block: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            borderColor: string;
            gradient: boolean;
            plain: boolean;
            iconRight: string;
            iconColor: string;
            pressedBehavior: "mask" | "opacity";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "mask" | "opacity";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly disabled: boolean;
            readonly tag: string;
            readonly color: string;
            readonly loading: boolean;
            readonly sizesConfig: Record<string, any>;
            readonly textColor: string;
            readonly round: boolean;
            readonly fontSizesConfig: Record<string, any>;
            readonly icon: string;
            readonly block: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly plain: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "mask" | "opacity";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "mask" | "opacity";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: string | undefined;
            readonly append?: boolean | undefined;
            readonly href?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly target?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
        "child:closeButton": NonNullable<Partial<{
            size: string | number;
            preset: string;
            name: string;
            sizesConfig: Record<string, any>;
            flip: "horizontal" | "vertical" | "off" | "both";
            fontSizesConfig: Record<string, any>;
        }> & Omit<{
            readonly size: string | number;
            readonly name: string;
            readonly sizesConfig: Record<string, any>;
            readonly flip: "horizontal" | "vertical" | "off" | "both";
            readonly fontSizesConfig: Record<string, any>;
            readonly preset?: string | undefined;
            readonly tag?: string | undefined;
            readonly color?: string | undefined;
            readonly component?: any;
            readonly rotation?: string | number | undefined;
            readonly spin?: string | boolean | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            name: {
                type: StringConstructor;
                default: string;
            };
            tag: {
                type: StringConstructor;
            };
            component: {
                type: import("vue").PropType<any>;
            };
            color: {
                type: StringConstructor;
            };
            rotation: {
                type: (StringConstructor | NumberConstructor)[];
            };
            spin: {
                type: (BooleanConstructor | StringConstructor)[];
            };
            flip: {
                type: import("vue").PropType<"horizontal" | "vertical" | "off" | "both">;
                default: string;
                validator: (value: string) => boolean;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
            size: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
                validator: (size: string | number) => boolean;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
        }>>, "size" | "preset" | "name" | "sizesConfig" | "flip" | "fontSizesConfig">>;
        attachElement: string;
        allowBodyScroll: boolean;
        disableAttachment: boolean;
        okText: import("../../composables").TranslationProp;
        cancelText: import("../../composables").TranslationProp;
        hideDefaultActions: boolean;
        fullscreen: boolean;
        mobileFullscreen: boolean;
        noDismiss: boolean;
        noOutsideDismiss: boolean;
        noEscDismiss: boolean;
        maxWidth: string;
        maxHeight: string;
        fixedLayout: boolean;
        withoutTransitions: boolean;
        overlay: boolean;
        overlayOpacity: string | number;
        showNestedOverlay: boolean;
        ariaCloseLabel: import("../../composables").TranslationProp;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    attachElement: {
        type: StringConstructor;
        default: string;
    };
    allowBodyScroll: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableAttachment: {
        type: BooleanConstructor;
        default: boolean;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    message: {
        type: StringConstructor;
        default: string;
    };
    okText: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    cancelText: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    hideDefaultActions: {
        type: BooleanConstructor;
        default: boolean;
    };
    fullscreen: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    mobileFullscreen: {
        type: BooleanConstructor;
        default: boolean;
    };
    noDismiss: {
        type: BooleanConstructor;
        default: boolean;
    };
    noOutsideDismiss: {
        type: BooleanConstructor;
        default: boolean;
    };
    noEscDismiss: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxWidth: {
        type: StringConstructor;
        default: string;
    };
    maxHeight: {
        type: StringConstructor;
        default: string;
    };
    anchorClass: {
        type: StringConstructor;
    };
    size: {
        type: import("vue").PropType<import("../../utils/types/prop-type").StringWithAutocomplete<"small" | "medium" | "large" | "auto">>;
        default: string;
    };
    sizesConfig: {
        type: ObjectConstructor;
        default: () => {
            defaultSize: string;
            sizes: {
                small: number;
                medium: number;
                large: number;
                auto: string;
            };
        };
    };
    fixedLayout: {
        type: BooleanConstructor;
        default: boolean;
    };
    withoutTransitions: {
        type: BooleanConstructor;
        default: boolean;
    };
    overlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    overlayOpacity: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    showNestedOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    blur: {
        type: BooleanConstructor;
        default: boolean;
    };
    zIndex: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    backgroundColor: {
        type: StringConstructor;
        default: string;
    };
    noPadding: {
        type: BooleanConstructor;
        default: boolean;
    };
    beforeClose: {
        type: import("vue").PropType<(hide: () => void) => any>;
    };
    beforeOk: {
        type: import("vue").PropType<(hide: () => void) => any>;
    };
    beforeCancel: {
        type: import("vue").PropType<(hide: () => void) => any>;
    };
    ariaCloseLabel: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    "child:cancelButton": {
        type: import("vue").PropType<NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            preset: string;
            append: boolean;
            type: string;
            disabled: boolean;
            tag: string;
            href: string;
            color: string;
            loading: boolean;
            to: string | Record<string, any>;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            target: string;
            sizesConfig: Record<string, any>;
            textColor: string;
            round: boolean;
            fontSizesConfig: Record<string, any>;
            icon: string;
            block: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            borderColor: string;
            gradient: boolean;
            plain: boolean;
            iconRight: string;
            iconColor: string;
            pressedBehavior: "mask" | "opacity";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "mask" | "opacity";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly disabled: boolean;
            readonly tag: string;
            readonly color: string;
            readonly loading: boolean;
            readonly sizesConfig: Record<string, any>;
            readonly textColor: string;
            readonly round: boolean;
            readonly fontSizesConfig: Record<string, any>;
            readonly icon: string;
            readonly block: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly plain: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "mask" | "opacity";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "mask" | "opacity";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: string | undefined;
            readonly append?: boolean | undefined;
            readonly href?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly target?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
        required: false;
        default: undefined;
    };
    "child:okButton": {
        type: import("vue").PropType<NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            preset: string;
            append: boolean;
            type: string;
            disabled: boolean;
            tag: string;
            href: string;
            color: string;
            loading: boolean;
            to: string | Record<string, any>;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            target: string;
            sizesConfig: Record<string, any>;
            textColor: string;
            round: boolean;
            fontSizesConfig: Record<string, any>;
            icon: string;
            block: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            borderColor: string;
            gradient: boolean;
            plain: boolean;
            iconRight: string;
            iconColor: string;
            pressedBehavior: "mask" | "opacity";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "mask" | "opacity";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly disabled: boolean;
            readonly tag: string;
            readonly color: string;
            readonly loading: boolean;
            readonly sizesConfig: Record<string, any>;
            readonly textColor: string;
            readonly round: boolean;
            readonly fontSizesConfig: Record<string, any>;
            readonly icon: string;
            readonly block: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly plain: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "mask" | "opacity";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "mask" | "opacity";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: string | undefined;
            readonly append?: boolean | undefined;
            readonly href?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly target?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
        required: false;
        default: undefined;
    };
    "child:closeButton": {
        type: import("vue").PropType<NonNullable<Partial<{
            size: string | number;
            preset: string;
            name: string;
            sizesConfig: Record<string, any>;
            flip: "horizontal" | "vertical" | "off" | "both";
            fontSizesConfig: Record<string, any>;
        }> & Omit<{
            readonly size: string | number;
            readonly name: string;
            readonly sizesConfig: Record<string, any>;
            readonly flip: "horizontal" | "vertical" | "off" | "both";
            readonly fontSizesConfig: Record<string, any>;
            readonly preset?: string | undefined;
            readonly tag?: string | undefined;
            readonly color?: string | undefined;
            readonly component?: any;
            readonly rotation?: string | number | undefined;
            readonly spin?: string | boolean | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            name: {
                type: StringConstructor;
                default: string;
            };
            tag: {
                type: StringConstructor;
            };
            component: {
                type: import("vue").PropType<any>;
            };
            color: {
                type: StringConstructor;
            };
            rotation: {
                type: (StringConstructor | NumberConstructor)[];
            };
            spin: {
                type: (BooleanConstructor | StringConstructor)[];
            };
            flip: {
                type: import("vue").PropType<"horizontal" | "vertical" | "off" | "both">;
                default: string;
                validator: (value: string) => boolean;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
            size: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
                validator: (size: string | number) => boolean;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
        }>>, "size" | "preset" | "name" | "sizesConfig" | "flip" | "fontSizesConfig">>>;
        required: false;
        default: undefined;
    };
}>> & {
    onCancel?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onOpen?: ((...args: any[]) => any) | undefined;
    "onClick-outside"?: ((...args: any[]) => any) | undefined;
    onOk?: ((...args: any[]) => any) | undefined;
    "onBefore-open"?: ((...args: any[]) => any) | undefined;
    "onBefore-close"?: ((...args: any[]) => any) | undefined;
}, {
    show: () => void;
    hide: (cb?: (() => void) | undefined) => void;
    toggle: () => void;
    cancel: () => void;
    ok: () => void;
    onBeforeEnterTransition: (el: HTMLElement) => void;
    onAfterEnterTransition: (el: HTMLElement) => void;
    onBeforeLeaveTransition: (el: HTMLElement) => void;
    onAfterLeaveTransition: (el: HTMLElement) => void;
    listenKeyUp: (e: KeyboardEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    cancel: (...args: any[]) => void;
    close: (...args: any[]) => void;
    "update:modelValue": (...args: any[]) => void;
    ok: (...args: any[]) => void;
    open: (...args: any[]) => void;
    "click-outside": (...args: any[]) => void;
    "before-open": (...args: any[]) => void;
    "before-close": (...args: any[]) => void;
}, string, {
    title: string;
    blur: boolean;
    size: import("../../utils/types/prop-type").StringWithAutocomplete<"small" | "medium" | "large" | "auto">;
    message: string;
    modelValue: boolean;
    stateful: boolean;
    sizesConfig: Record<string, any>;
    zIndex: string | number;
    noPadding: boolean;
    backgroundColor: string;
    closeButton: boolean;
    "child:cancelButton": NonNullable<Partial<{
        size: "small" | "medium" | "large";
        replace: boolean;
        preset: string;
        append: boolean;
        type: string;
        disabled: boolean;
        tag: string;
        href: string;
        color: string;
        loading: boolean;
        to: string | Record<string, any>;
        exact: boolean;
        activeClass: string;
        exactActiveClass: string;
        target: string;
        sizesConfig: Record<string, any>;
        textColor: string;
        round: boolean;
        fontSizesConfig: Record<string, any>;
        icon: string;
        block: boolean;
        textOpacity: string | number;
        backgroundOpacity: string | number;
        borderColor: string;
        gradient: boolean;
        plain: boolean;
        iconRight: string;
        iconColor: string;
        pressedBehavior: "mask" | "opacity";
        pressedOpacity: number;
        pressedMaskColor: string;
        hoverBehavior: "mask" | "opacity";
        hoverOpacity: string | number;
        hoverMaskColor: string;
    }> & Omit<{
        readonly size: "small" | "medium" | "large";
        readonly type: string;
        readonly disabled: boolean;
        readonly tag: string;
        readonly color: string;
        readonly loading: boolean;
        readonly sizesConfig: Record<string, any>;
        readonly textColor: string;
        readonly round: boolean;
        readonly fontSizesConfig: Record<string, any>;
        readonly icon: string;
        readonly block: boolean;
        readonly textOpacity: string | number;
        readonly backgroundOpacity: string | number;
        readonly borderColor: string;
        readonly gradient: boolean;
        readonly plain: boolean;
        readonly iconRight: string;
        readonly iconColor: string;
        readonly pressedBehavior: "mask" | "opacity";
        readonly pressedOpacity: number;
        readonly pressedMaskColor: string;
        readonly hoverBehavior: "mask" | "opacity";
        readonly hoverOpacity: string | number;
        readonly hoverMaskColor: string;
        readonly replace?: boolean | undefined;
        readonly preset?: string | undefined;
        readonly append?: boolean | undefined;
        readonly href?: string | undefined;
        readonly to?: string | Record<string, any> | undefined;
        readonly exact?: boolean | undefined;
        readonly activeClass?: string | undefined;
        readonly exactActiveClass?: string | undefined;
        readonly target?: string | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        tag: {
            type: StringConstructor;
            default: string;
        };
        type: {
            type: StringConstructor;
            default: string;
        };
        block: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: string;
        };
        textOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        backgroundOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        borderColor: {
            type: StringConstructor;
            default: string;
        };
        gradient: {
            type: BooleanConstructor;
            default: boolean;
        };
        plain: {
            type: BooleanConstructor;
            default: boolean;
        };
        round: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: string;
            validator: (v: string) => boolean;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        iconRight: {
            type: StringConstructor;
            default: string;
        };
        iconColor: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: import("vue").PropType<string | Record<string, any>>;
            default: undefined;
        };
        replace: {
            type: BooleanConstructor;
            default: undefined;
        };
        append: {
            type: BooleanConstructor;
            default: undefined;
        };
        exact: {
            type: BooleanConstructor;
            default: undefined;
        };
        activeClass: {
            type: StringConstructor;
            default: undefined;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: undefined;
        };
        href: {
            type: StringConstructor;
            default: undefined;
        };
        target: {
            type: StringConstructor;
            default: undefined;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        pressedBehavior: {
            type: import("vue").PropType<"mask" | "opacity">;
            default: string;
            validator: (value: string) => boolean;
        };
        pressedOpacity: {
            type: NumberConstructor;
            default: number;
        };
        pressedMaskColor: {
            type: StringConstructor;
            default: string;
        };
        hoverBehavior: {
            type: import("vue").PropType<"mask" | "opacity">;
            default: string;
            validator: (value: string) => boolean;
        };
        hoverOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        hoverMaskColor: {
            type: StringConstructor;
            default: string;
        };
        sizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        fontSizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
    "child:okButton": NonNullable<Partial<{
        size: "small" | "medium" | "large";
        replace: boolean;
        preset: string;
        append: boolean;
        type: string;
        disabled: boolean;
        tag: string;
        href: string;
        color: string;
        loading: boolean;
        to: string | Record<string, any>;
        exact: boolean;
        activeClass: string;
        exactActiveClass: string;
        target: string;
        sizesConfig: Record<string, any>;
        textColor: string;
        round: boolean;
        fontSizesConfig: Record<string, any>;
        icon: string;
        block: boolean;
        textOpacity: string | number;
        backgroundOpacity: string | number;
        borderColor: string;
        gradient: boolean;
        plain: boolean;
        iconRight: string;
        iconColor: string;
        pressedBehavior: "mask" | "opacity";
        pressedOpacity: number;
        pressedMaskColor: string;
        hoverBehavior: "mask" | "opacity";
        hoverOpacity: string | number;
        hoverMaskColor: string;
    }> & Omit<{
        readonly size: "small" | "medium" | "large";
        readonly type: string;
        readonly disabled: boolean;
        readonly tag: string;
        readonly color: string;
        readonly loading: boolean;
        readonly sizesConfig: Record<string, any>;
        readonly textColor: string;
        readonly round: boolean;
        readonly fontSizesConfig: Record<string, any>;
        readonly icon: string;
        readonly block: boolean;
        readonly textOpacity: string | number;
        readonly backgroundOpacity: string | number;
        readonly borderColor: string;
        readonly gradient: boolean;
        readonly plain: boolean;
        readonly iconRight: string;
        readonly iconColor: string;
        readonly pressedBehavior: "mask" | "opacity";
        readonly pressedOpacity: number;
        readonly pressedMaskColor: string;
        readonly hoverBehavior: "mask" | "opacity";
        readonly hoverOpacity: string | number;
        readonly hoverMaskColor: string;
        readonly replace?: boolean | undefined;
        readonly preset?: string | undefined;
        readonly append?: boolean | undefined;
        readonly href?: string | undefined;
        readonly to?: string | Record<string, any> | undefined;
        readonly exact?: boolean | undefined;
        readonly activeClass?: string | undefined;
        readonly exactActiveClass?: string | undefined;
        readonly target?: string | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        tag: {
            type: StringConstructor;
            default: string;
        };
        type: {
            type: StringConstructor;
            default: string;
        };
        block: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: string;
        };
        textOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        backgroundOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        borderColor: {
            type: StringConstructor;
            default: string;
        };
        gradient: {
            type: BooleanConstructor;
            default: boolean;
        };
        plain: {
            type: BooleanConstructor;
            default: boolean;
        };
        round: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: string;
            validator: (v: string) => boolean;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        iconRight: {
            type: StringConstructor;
            default: string;
        };
        iconColor: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: import("vue").PropType<string | Record<string, any>>;
            default: undefined;
        };
        replace: {
            type: BooleanConstructor;
            default: undefined;
        };
        append: {
            type: BooleanConstructor;
            default: undefined;
        };
        exact: {
            type: BooleanConstructor;
            default: undefined;
        };
        activeClass: {
            type: StringConstructor;
            default: undefined;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: undefined;
        };
        href: {
            type: StringConstructor;
            default: undefined;
        };
        target: {
            type: StringConstructor;
            default: undefined;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        pressedBehavior: {
            type: import("vue").PropType<"mask" | "opacity">;
            default: string;
            validator: (value: string) => boolean;
        };
        pressedOpacity: {
            type: NumberConstructor;
            default: number;
        };
        pressedMaskColor: {
            type: StringConstructor;
            default: string;
        };
        hoverBehavior: {
            type: import("vue").PropType<"mask" | "opacity">;
            default: string;
            validator: (value: string) => boolean;
        };
        hoverOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        hoverMaskColor: {
            type: StringConstructor;
            default: string;
        };
        sizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        fontSizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
    "child:closeButton": NonNullable<Partial<{
        size: string | number;
        preset: string;
        name: string;
        sizesConfig: Record<string, any>;
        flip: "horizontal" | "vertical" | "off" | "both";
        fontSizesConfig: Record<string, any>;
    }> & Omit<{
        readonly size: string | number;
        readonly name: string;
        readonly sizesConfig: Record<string, any>;
        readonly flip: "horizontal" | "vertical" | "off" | "both";
        readonly fontSizesConfig: Record<string, any>;
        readonly preset?: string | undefined;
        readonly tag?: string | undefined;
        readonly color?: string | undefined;
        readonly component?: any;
        readonly rotation?: string | number | undefined;
        readonly spin?: string | boolean | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        name: {
            type: StringConstructor;
            default: string;
        };
        tag: {
            type: StringConstructor;
        };
        component: {
            type: import("vue").PropType<any>;
        };
        color: {
            type: StringConstructor;
        };
        rotation: {
            type: (StringConstructor | NumberConstructor)[];
        };
        spin: {
            type: (BooleanConstructor | StringConstructor)[];
        };
        flip: {
            type: import("vue").PropType<"horizontal" | "vertical" | "off" | "both">;
            default: string;
            validator: (value: string) => boolean;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        size: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
            validator: (size: string | number) => boolean;
        };
        sizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        fontSizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
    }>>, "size" | "preset" | "name" | "sizesConfig" | "flip" | "fontSizesConfig">>;
    attachElement: string;
    allowBodyScroll: boolean;
    disableAttachment: boolean;
    okText: import("../../composables").TranslationProp;
    cancelText: import("../../composables").TranslationProp;
    hideDefaultActions: boolean;
    fullscreen: boolean;
    mobileFullscreen: boolean;
    noDismiss: boolean;
    noOutsideDismiss: boolean;
    noEscDismiss: boolean;
    maxWidth: string;
    maxHeight: string;
    fixedLayout: boolean;
    withoutTransitions: boolean;
    overlay: boolean;
    overlayOpacity: string | number;
    showNestedOverlay: boolean;
    ariaCloseLabel: import("../../composables").TranslationProp;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        anchor?(_: {
            show: () => void;
            hide: (cb?: (() => void) | undefined) => void;
            toggle: () => void;
            cancel: () => void;
            ok: () => void;
        }): any;
        content?(_: {
            show: () => void;
            hide: (cb?: (() => void) | undefined) => void;
            toggle: () => void;
            cancel: () => void;
            ok: () => void;
        }): any;
        header?(_: {
            show: () => void;
            hide: (cb?: (() => void) | undefined) => void;
            toggle: () => void;
            cancel: () => void;
            ok: () => void;
        }): any;
        default?(_: {
            show: () => void;
            hide: (cb?: (() => void) | undefined) => void;
            toggle: () => void;
            cancel: () => void;
            ok: () => void;
        }): any;
        footer?(_: {
            show: () => void;
            hide: (cb?: (() => void) | undefined) => void;
            toggle: () => void;
            cancel: () => void;
            ok: () => void;
        }): any;
    };
});
