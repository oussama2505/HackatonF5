import { PropType } from 'vue';
import { SelectableOption } from '../../composables';
type OptionListValue = SelectableOption | SelectableOption[] | null;
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    type: {
        type: PropType<"switch" | "checkbox" | "radio">;
        default: string;
        validator: (type: any) => boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    defaultValue: {
        type: PropType<OptionListValue>;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    leftLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: PropType<OptionListValue>;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
    rules: {
        type: PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    };
    dirty: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    options: {
        type: PropType<SelectableOption[]>;
        default: () => never[];
    };
    textBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    valueBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    trackBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    disabledBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    groupBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}, {
    focus: () => void;
    reset: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    clear: (...args: any[]) => void;
    "update:modelValue": (...args: any[]) => void;
    "update:error": (...args: any[]) => void;
    "update:errorMessages": (...args: any[]) => void;
    "update:dirty": (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    type: {
        type: PropType<"switch" | "checkbox" | "radio">;
        default: string;
        validator: (type: any) => boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    defaultValue: {
        type: PropType<OptionListValue>;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    leftLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: PropType<OptionListValue>;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
    rules: {
        type: PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    };
    dirty: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    options: {
        type: PropType<SelectableOption[]>;
        default: () => never[];
    };
    textBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    valueBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    trackBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    disabledBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    groupBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onClear?: ((...args: any[]) => any) | undefined;
    "onUpdate:error"?: ((...args: any[]) => any) | undefined;
    "onUpdate:errorMessages"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dirty"?: ((...args: any[]) => any) | undefined;
}, {
    error: boolean;
    options: SelectableOption[];
    preset: string;
    name: string;
    success: boolean;
    type: "switch" | "checkbox" | "radio";
    disabled: boolean;
    readonly: boolean;
    errorMessages: string | string[];
    stateful: boolean;
    color: string;
    rules: import("../../composables").ValidationRule<any>[];
    dirty: boolean;
    errorCount: string | number;
    messages: string | string[];
    immediateValidation: boolean;
    textBy: import("../../composables").StringOrFunction;
    valueBy: import("../../composables").StringOrFunction;
    trackBy: import("../../composables").StringOrFunction;
    disabledBy: import("../../composables").StringOrFunction;
    groupBy: import("../../composables").StringOrFunction;
    leftLabel: boolean;
}, {}>, {
    default?(_: {
        option: SelectableOption;
        selectedValue: OptionListValue;
        isDisabled: (option: SelectableOption) => boolean;
        getText: (option: SelectableOption) => string;
        getValue: (option: SelectableOption) => any;
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
