import { PropType } from 'vue';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    visiblePages: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    pages: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: PropType<"small" | "medium" | "large">;
        default: string;
        validator: (v: string) => boolean;
    };
    boundaryLinks: {
        type: BooleanConstructor;
        default: boolean;
    };
    boundaryNumbers: {
        type: BooleanConstructor;
        default: boolean;
    };
    directionLinks: {
        type: BooleanConstructor;
        default: boolean;
    };
    input: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideOnSinglePage: {
        type: BooleanConstructor;
        default: boolean;
    };
    total: {
        type: (StringConstructor | NumberConstructor)[];
        default: null;
    };
    pageSize: {
        type: (StringConstructor | NumberConstructor)[];
        default: null;
    };
    boundaryIconLeft: {
        type: StringConstructor;
        default: string;
    };
    boundaryIconRight: {
        type: StringConstructor;
        default: string;
    };
    directionIconLeft: {
        type: StringConstructor;
        default: string;
    };
    directionIconRight: {
        type: StringConstructor;
        default: string;
    };
    gapped: {
        type: BooleanConstructor;
        default: boolean;
    };
    borderColor: {
        type: StringConstructor;
        default: string;
    };
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** @deprecated Use activeButtonProps="{ color: 'myColor' }" */
    activePageColor: {
        type: StringConstructor;
        default: string;
    };
    activeButtonProps: {
        type: PropType<NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            preset: string;
            append: boolean;
            type: string;
            disabled: boolean;
            tag: string;
            href: string;
            color: string;
            loading: boolean;
            to: string | Record<string, any>;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            target: string;
            sizesConfig: Record<string, any>;
            textColor: string;
            round: boolean;
            fontSizesConfig: Record<string, any>;
            icon: string;
            block: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            borderColor: string;
            gradient: boolean;
            plain: boolean;
            iconRight: string;
            iconColor: string;
            pressedBehavior: "mask" | "opacity";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "mask" | "opacity";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly disabled: boolean;
            readonly tag: string;
            readonly color: string;
            readonly loading: boolean;
            readonly sizesConfig: Record<string, any>;
            readonly textColor: string;
            readonly round: boolean;
            readonly fontSizesConfig: Record<string, any>;
            readonly icon: string;
            readonly block: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly plain: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "mask" | "opacity";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "mask" | "opacity";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: string | undefined;
            readonly append?: boolean | undefined;
            readonly href?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly target?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
        default: () => {};
    };
    buttonProps: {
        type: PropType<NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            preset: string;
            append: boolean;
            type: string;
            disabled: boolean;
            tag: string;
            href: string;
            color: string;
            loading: boolean;
            to: string | Record<string, any>;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            target: string;
            sizesConfig: Record<string, any>;
            textColor: string;
            round: boolean;
            fontSizesConfig: Record<string, any>;
            icon: string;
            block: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            borderColor: string;
            gradient: boolean;
            plain: boolean;
            iconRight: string;
            iconColor: string;
            pressedBehavior: "mask" | "opacity";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "mask" | "opacity";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly disabled: boolean;
            readonly tag: string;
            readonly color: string;
            readonly loading: boolean;
            readonly sizesConfig: Record<string, any>;
            readonly textColor: string;
            readonly round: boolean;
            readonly fontSizesConfig: Record<string, any>;
            readonly icon: string;
            readonly block: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly plain: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "mask" | "opacity";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "mask" | "opacity";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: string | undefined;
            readonly append?: boolean | undefined;
            readonly href?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly target?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
        default: () => {};
    };
    buttonsPreset: {
        type: StringConstructor;
        default: string;
    };
    ariaLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    ariaGoToTheFirstPageLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    ariaGoToPreviousPageLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    ariaGoToSpecificPageLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    ariaGoToSpecificPageInputLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    ariaGoToNextPageLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    ariaGoToLastPageLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}, {
    goNextPage: () => void;
    goPrevPage: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    visiblePages: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    pages: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: PropType<"small" | "medium" | "large">;
        default: string;
        validator: (v: string) => boolean;
    };
    boundaryLinks: {
        type: BooleanConstructor;
        default: boolean;
    };
    boundaryNumbers: {
        type: BooleanConstructor;
        default: boolean;
    };
    directionLinks: {
        type: BooleanConstructor;
        default: boolean;
    };
    input: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideOnSinglePage: {
        type: BooleanConstructor;
        default: boolean;
    };
    total: {
        type: (StringConstructor | NumberConstructor)[];
        default: null;
    };
    pageSize: {
        type: (StringConstructor | NumberConstructor)[];
        default: null;
    };
    boundaryIconLeft: {
        type: StringConstructor;
        default: string;
    };
    boundaryIconRight: {
        type: StringConstructor;
        default: string;
    };
    directionIconLeft: {
        type: StringConstructor;
        default: string;
    };
    directionIconRight: {
        type: StringConstructor;
        default: string;
    };
    gapped: {
        type: BooleanConstructor;
        default: boolean;
    };
    borderColor: {
        type: StringConstructor;
        default: string;
    };
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** @deprecated Use activeButtonProps="{ color: 'myColor' }" */
    activePageColor: {
        type: StringConstructor;
        default: string;
    };
    activeButtonProps: {
        type: PropType<NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            preset: string;
            append: boolean;
            type: string;
            disabled: boolean;
            tag: string;
            href: string;
            color: string;
            loading: boolean;
            to: string | Record<string, any>;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            target: string;
            sizesConfig: Record<string, any>;
            textColor: string;
            round: boolean;
            fontSizesConfig: Record<string, any>;
            icon: string;
            block: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            borderColor: string;
            gradient: boolean;
            plain: boolean;
            iconRight: string;
            iconColor: string;
            pressedBehavior: "mask" | "opacity";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "mask" | "opacity";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly disabled: boolean;
            readonly tag: string;
            readonly color: string;
            readonly loading: boolean;
            readonly sizesConfig: Record<string, any>;
            readonly textColor: string;
            readonly round: boolean;
            readonly fontSizesConfig: Record<string, any>;
            readonly icon: string;
            readonly block: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly plain: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "mask" | "opacity";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "mask" | "opacity";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: string | undefined;
            readonly append?: boolean | undefined;
            readonly href?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly target?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
        default: () => {};
    };
    buttonProps: {
        type: PropType<NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            preset: string;
            append: boolean;
            type: string;
            disabled: boolean;
            tag: string;
            href: string;
            color: string;
            loading: boolean;
            to: string | Record<string, any>;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            target: string;
            sizesConfig: Record<string, any>;
            textColor: string;
            round: boolean;
            fontSizesConfig: Record<string, any>;
            icon: string;
            block: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            borderColor: string;
            gradient: boolean;
            plain: boolean;
            iconRight: string;
            iconColor: string;
            pressedBehavior: "mask" | "opacity";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "mask" | "opacity";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly disabled: boolean;
            readonly tag: string;
            readonly color: string;
            readonly loading: boolean;
            readonly sizesConfig: Record<string, any>;
            readonly textColor: string;
            readonly round: boolean;
            readonly fontSizesConfig: Record<string, any>;
            readonly icon: string;
            readonly block: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly plain: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "mask" | "opacity";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "mask" | "opacity";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: string | undefined;
            readonly append?: boolean | undefined;
            readonly href?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly target?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
        default: () => {};
    };
    buttonsPreset: {
        type: StringConstructor;
        default: string;
    };
    ariaLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    ariaGoToTheFirstPageLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    ariaGoToPreviousPageLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    ariaGoToSpecificPageLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    ariaGoToSpecificPageInputLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    ariaGoToNextPageLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    ariaGoToLastPageLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    input: boolean;
    size: "small" | "medium" | "large";
    preset: string;
    ariaLabel: import("../../composables").TranslationProp;
    disabled: boolean;
    modelValue: number;
    stateful: boolean;
    color: string;
    borderColor: string;
    rounded: boolean;
    visiblePages: string | number;
    pages: string | number;
    boundaryLinks: boolean;
    boundaryNumbers: boolean;
    directionLinks: boolean;
    hideOnSinglePage: boolean;
    total: string | number;
    pageSize: string | number;
    boundaryIconLeft: string;
    boundaryIconRight: string;
    directionIconLeft: string;
    directionIconRight: string;
    gapped: boolean;
    activePageColor: string;
    activeButtonProps: NonNullable<Partial<{
        size: "small" | "medium" | "large";
        replace: boolean;
        preset: string;
        append: boolean;
        type: string;
        disabled: boolean;
        tag: string;
        href: string;
        color: string;
        loading: boolean;
        to: string | Record<string, any>;
        exact: boolean;
        activeClass: string;
        exactActiveClass: string;
        target: string;
        sizesConfig: Record<string, any>;
        textColor: string;
        round: boolean;
        fontSizesConfig: Record<string, any>;
        icon: string;
        block: boolean;
        textOpacity: string | number;
        backgroundOpacity: string | number;
        borderColor: string;
        gradient: boolean;
        plain: boolean;
        iconRight: string;
        iconColor: string;
        pressedBehavior: "mask" | "opacity";
        pressedOpacity: number;
        pressedMaskColor: string;
        hoverBehavior: "mask" | "opacity";
        hoverOpacity: string | number;
        hoverMaskColor: string;
    }> & Omit<{
        readonly size: "small" | "medium" | "large";
        readonly type: string;
        readonly disabled: boolean;
        readonly tag: string;
        readonly color: string;
        readonly loading: boolean;
        readonly sizesConfig: Record<string, any>;
        readonly textColor: string;
        readonly round: boolean;
        readonly fontSizesConfig: Record<string, any>;
        readonly icon: string;
        readonly block: boolean;
        readonly textOpacity: string | number;
        readonly backgroundOpacity: string | number;
        readonly borderColor: string;
        readonly gradient: boolean;
        readonly plain: boolean;
        readonly iconRight: string;
        readonly iconColor: string;
        readonly pressedBehavior: "mask" | "opacity";
        readonly pressedOpacity: number;
        readonly pressedMaskColor: string;
        readonly hoverBehavior: "mask" | "opacity";
        readonly hoverOpacity: string | number;
        readonly hoverMaskColor: string;
        readonly replace?: boolean | undefined;
        readonly preset?: string | undefined;
        readonly append?: boolean | undefined;
        readonly href?: string | undefined;
        readonly to?: string | Record<string, any> | undefined;
        readonly exact?: boolean | undefined;
        readonly activeClass?: string | undefined;
        readonly exactActiveClass?: string | undefined;
        readonly target?: string | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        tag: {
            type: StringConstructor;
            default: string;
        };
        type: {
            type: StringConstructor;
            default: string;
        };
        block: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: string;
        };
        textOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        backgroundOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        borderColor: {
            type: StringConstructor;
            default: string;
        };
        gradient: {
            type: BooleanConstructor;
            default: boolean;
        };
        plain: {
            type: BooleanConstructor;
            default: boolean;
        };
        round: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: PropType<"small" | "medium" | "large">;
            default: string;
            validator: (v: string) => boolean;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        iconRight: {
            type: StringConstructor;
            default: string;
        };
        iconColor: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: PropType<string | Record<string, any>>;
            default: undefined;
        };
        replace: {
            type: BooleanConstructor;
            default: undefined;
        };
        append: {
            type: BooleanConstructor;
            default: undefined;
        };
        exact: {
            type: BooleanConstructor;
            default: undefined;
        };
        activeClass: {
            type: StringConstructor;
            default: undefined;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: undefined;
        };
        href: {
            type: StringConstructor;
            default: undefined;
        };
        target: {
            type: StringConstructor;
            default: undefined;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        pressedBehavior: {
            type: PropType<"mask" | "opacity">;
            default: string;
            validator: (value: string) => boolean;
        };
        pressedOpacity: {
            type: NumberConstructor;
            default: number;
        };
        pressedMaskColor: {
            type: StringConstructor;
            default: string;
        };
        hoverBehavior: {
            type: PropType<"mask" | "opacity">;
            default: string;
            validator: (value: string) => boolean;
        };
        hoverOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        hoverMaskColor: {
            type: StringConstructor;
            default: string;
        };
        sizesConfig: {
            type: PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        fontSizesConfig: {
            type: PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
    buttonProps: NonNullable<Partial<{
        size: "small" | "medium" | "large";
        replace: boolean;
        preset: string;
        append: boolean;
        type: string;
        disabled: boolean;
        tag: string;
        href: string;
        color: string;
        loading: boolean;
        to: string | Record<string, any>;
        exact: boolean;
        activeClass: string;
        exactActiveClass: string;
        target: string;
        sizesConfig: Record<string, any>;
        textColor: string;
        round: boolean;
        fontSizesConfig: Record<string, any>;
        icon: string;
        block: boolean;
        textOpacity: string | number;
        backgroundOpacity: string | number;
        borderColor: string;
        gradient: boolean;
        plain: boolean;
        iconRight: string;
        iconColor: string;
        pressedBehavior: "mask" | "opacity";
        pressedOpacity: number;
        pressedMaskColor: string;
        hoverBehavior: "mask" | "opacity";
        hoverOpacity: string | number;
        hoverMaskColor: string;
    }> & Omit<{
        readonly size: "small" | "medium" | "large";
        readonly type: string;
        readonly disabled: boolean;
        readonly tag: string;
        readonly color: string;
        readonly loading: boolean;
        readonly sizesConfig: Record<string, any>;
        readonly textColor: string;
        readonly round: boolean;
        readonly fontSizesConfig: Record<string, any>;
        readonly icon: string;
        readonly block: boolean;
        readonly textOpacity: string | number;
        readonly backgroundOpacity: string | number;
        readonly borderColor: string;
        readonly gradient: boolean;
        readonly plain: boolean;
        readonly iconRight: string;
        readonly iconColor: string;
        readonly pressedBehavior: "mask" | "opacity";
        readonly pressedOpacity: number;
        readonly pressedMaskColor: string;
        readonly hoverBehavior: "mask" | "opacity";
        readonly hoverOpacity: string | number;
        readonly hoverMaskColor: string;
        readonly replace?: boolean | undefined;
        readonly preset?: string | undefined;
        readonly append?: boolean | undefined;
        readonly href?: string | undefined;
        readonly to?: string | Record<string, any> | undefined;
        readonly exact?: boolean | undefined;
        readonly activeClass?: string | undefined;
        readonly exactActiveClass?: string | undefined;
        readonly target?: string | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        tag: {
            type: StringConstructor;
            default: string;
        };
        type: {
            type: StringConstructor;
            default: string;
        };
        block: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: string;
        };
        textOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        backgroundOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        borderColor: {
            type: StringConstructor;
            default: string;
        };
        gradient: {
            type: BooleanConstructor;
            default: boolean;
        };
        plain: {
            type: BooleanConstructor;
            default: boolean;
        };
        round: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: PropType<"small" | "medium" | "large">;
            default: string;
            validator: (v: string) => boolean;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        iconRight: {
            type: StringConstructor;
            default: string;
        };
        iconColor: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: PropType<string | Record<string, any>>;
            default: undefined;
        };
        replace: {
            type: BooleanConstructor;
            default: undefined;
        };
        append: {
            type: BooleanConstructor;
            default: undefined;
        };
        exact: {
            type: BooleanConstructor;
            default: undefined;
        };
        activeClass: {
            type: StringConstructor;
            default: undefined;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: undefined;
        };
        href: {
            type: StringConstructor;
            default: undefined;
        };
        target: {
            type: StringConstructor;
            default: undefined;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        pressedBehavior: {
            type: PropType<"mask" | "opacity">;
            default: string;
            validator: (value: string) => boolean;
        };
        pressedOpacity: {
            type: NumberConstructor;
            default: number;
        };
        pressedMaskColor: {
            type: StringConstructor;
            default: string;
        };
        hoverBehavior: {
            type: PropType<"mask" | "opacity">;
            default: string;
            validator: (value: string) => boolean;
        };
        hoverOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        hoverMaskColor: {
            type: StringConstructor;
            default: string;
        };
        sizesConfig: {
            type: PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        fontSizesConfig: {
            type: PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, "size" | "replace" | "preset" | "append" | "type" | "disabled" | "tag" | "href" | "color" | "loading" | "to" | "exact" | "activeClass" | "exactActiveClass" | "target" | "sizesConfig" | "textColor" | "round" | "fontSizesConfig" | "icon" | "block" | "textOpacity" | "backgroundOpacity" | "borderColor" | "gradient" | "plain" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
    buttonsPreset: string;
    ariaGoToTheFirstPageLabel: import("../../composables").TranslationProp;
    ariaGoToPreviousPageLabel: import("../../composables").TranslationProp;
    ariaGoToSpecificPageLabel: import("../../composables").TranslationProp;
    ariaGoToSpecificPageInputLabel: import("../../composables").TranslationProp;
    ariaGoToNextPageLabel: import("../../composables").TranslationProp;
    ariaGoToLastPageLabel: import("../../composables").TranslationProp;
}, {}>, {
    firstPageLink?(_: {
        onClick: () => void;
        disabled: boolean;
    }): any;
    prevPageLink?(_: {
        onClick: () => void;
        disabled: boolean;
    }): any;
    default?(_: {}): any;
    nextPageLink?(_: {
        onClick: () => void;
        disabled: boolean;
    }): any;
    lastPageLink?(_: {
        onClick: () => void;
        disabled: boolean;
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
