export declare const VaParallax: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        target: {
            type: import("vue").PropType<string | HTMLElement | undefined>;
        };
        src: {
            type: StringConstructor;
            default: string;
            required: true;
        };
        alt: {
            type: StringConstructor;
            default: string;
        };
        height: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        reversed: {
            type: BooleanConstructor;
            default: boolean;
        };
        speed: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
            validator: (value: string | number) => boolean;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        target: {
            type: import("vue").PropType<string | HTMLElement | undefined>;
        };
        src: {
            type: StringConstructor;
            default: string;
            required: true;
        };
        alt: {
            type: StringConstructor;
            default: string;
        };
        height: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        reversed: {
            type: BooleanConstructor;
            default: boolean;
        };
        speed: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
            validator: (value: string | number) => boolean;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, {
        preset: string;
        height: string | number;
        alt: string;
        src: string;
        speed: string | number;
        reversed: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        target: {
            type: import("vue").PropType<string | HTMLElement | undefined>;
        };
        src: {
            type: StringConstructor;
            default: string;
            required: true;
        };
        alt: {
            type: StringConstructor;
            default: string;
        };
        height: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        reversed: {
            type: BooleanConstructor;
            default: boolean;
        };
        speed: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
            validator: (value: string | number) => boolean;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, {}, {}, {}, {}, {
        preset: string;
        height: string | number;
        alt: string;
        src: string;
        speed: string | number;
        reversed: boolean;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    target: {
        type: import("vue").PropType<string | HTMLElement | undefined>;
    };
    src: {
        type: StringConstructor;
        default: string;
        required: true;
    };
    alt: {
        type: StringConstructor;
        default: string;
    };
    height: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    reversed: {
        type: BooleanConstructor;
        default: boolean;
    };
    speed: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
        validator: (value: string | number) => boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    preset: string;
    height: string | number;
    alt: string;
    src: string;
    speed: string | number;
    reversed: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
