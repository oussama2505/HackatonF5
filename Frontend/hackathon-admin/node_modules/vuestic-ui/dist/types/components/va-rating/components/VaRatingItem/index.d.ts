export declare const VaRatingItem: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: NumberConstructor;
            default: number;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        halfIcon: {
            type: StringConstructor;
            default: string;
        };
        emptyIcon: {
            type: StringConstructor;
            default: string;
        };
        halves: {
            type: BooleanConstructor;
            default: boolean;
        };
        hover: {
            type: BooleanConstructor;
            default: boolean;
        };
        tabindex: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        unselectedColor: {
            type: StringConstructor;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onHover?: ((...args: any[]) => any) | undefined;
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        click: (...args: any[]) => void;
        "update:modelValue": (...args: any[]) => void;
        hover: (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: NumberConstructor;
            default: number;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        halfIcon: {
            type: StringConstructor;
            default: string;
        };
        emptyIcon: {
            type: StringConstructor;
            default: string;
        };
        halves: {
            type: BooleanConstructor;
            default: boolean;
        };
        hover: {
            type: BooleanConstructor;
            default: boolean;
        };
        tabindex: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        unselectedColor: {
            type: StringConstructor;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onHover?: ((...args: any[]) => any) | undefined;
    }, {
        size: string | number;
        disabled: boolean;
        readonly: boolean;
        modelValue: number;
        color: string;
        hover: boolean;
        tabindex: string | number;
        icon: string;
        halfIcon: string;
        emptyIcon: string;
        halves: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: NumberConstructor;
            default: number;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        halfIcon: {
            type: StringConstructor;
            default: string;
        };
        emptyIcon: {
            type: StringConstructor;
            default: string;
        };
        halves: {
            type: BooleanConstructor;
            default: boolean;
        };
        hover: {
            type: BooleanConstructor;
            default: boolean;
        };
        tabindex: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        unselectedColor: {
            type: StringConstructor;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onHover?: ((...args: any[]) => any) | undefined;
    }, {}, {}, {}, {}, {
        size: string | number;
        disabled: boolean;
        readonly: boolean;
        modelValue: number;
        color: string;
        hover: boolean;
        tabindex: string | number;
        icon: string;
        halfIcon: string;
        emptyIcon: string;
        halves: boolean;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    halfIcon: {
        type: StringConstructor;
        default: string;
    };
    emptyIcon: {
        type: StringConstructor;
        default: string;
    };
    halves: {
        type: BooleanConstructor;
        default: boolean;
    };
    hover: {
        type: BooleanConstructor;
        default: boolean;
    };
    tabindex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    unselectedColor: {
        type: StringConstructor;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    onClick?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onHover?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    click: (...args: any[]) => void;
    "update:modelValue": (...args: any[]) => void;
    hover: (...args: any[]) => void;
}, string, {
    size: string | number;
    disabled: boolean;
    readonly: boolean;
    modelValue: number;
    color: string;
    hover: boolean;
    tabindex: string | number;
    icon: string;
    halfIcon: string;
    emptyIcon: string;
    halves: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {
            value: number;
            onClick: () => void;
        }): any;
    };
});
