import { type PropType } from 'vue';
import type { SelectOption } from '../../../index';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    ariaAttributes: {
        type: ObjectConstructor;
    };
    value: {
        type: PropType<SelectOption[]>;
        required: true;
    };
    valueString: {
        type: StringConstructor;
    };
    separator: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    hiddenSelectedOptionsAmount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    isAllOptionsShown: {
        type: BooleanConstructor;
        default: boolean;
    };
    autocomplete: {
        type: BooleanConstructor;
        default: boolean;
    };
    focused: {
        type: BooleanConstructor;
        default: boolean;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    getText: {
        type: PropType<(option: SelectOption) => string>;
        required: true;
    };
    autocompleteInputValue: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "select-option": (...args: any[]) => void;
    "toggle-hidden": (...args: any[]) => void;
    "autocomplete-input": (...args: any[]) => void;
    "focus-prev": (...args: any[]) => void;
    "focus-next": (...args: any[]) => void;
    "delete-last-selected": (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    ariaAttributes: {
        type: ObjectConstructor;
    };
    value: {
        type: PropType<SelectOption[]>;
        required: true;
    };
    valueString: {
        type: StringConstructor;
    };
    separator: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    hiddenSelectedOptionsAmount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    isAllOptionsShown: {
        type: BooleanConstructor;
        default: boolean;
    };
    autocomplete: {
        type: BooleanConstructor;
        default: boolean;
    };
    focused: {
        type: BooleanConstructor;
        default: boolean;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    getText: {
        type: PropType<(option: SelectOption) => string>;
        required: true;
    };
    autocompleteInputValue: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    "onSelect-option"?: ((...args: any[]) => any) | undefined;
    "onToggle-hidden"?: ((...args: any[]) => any) | undefined;
    "onAutocomplete-input"?: ((...args: any[]) => any) | undefined;
    "onFocus-prev"?: ((...args: any[]) => any) | undefined;
    "onFocus-next"?: ((...args: any[]) => any) | undefined;
    "onDelete-last-selected"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    readonly: boolean;
    tabindex: string | number;
    placeholder: string;
    focused: boolean;
    autocomplete: boolean;
    multiple: boolean;
    separator: string;
    hiddenSelectedOptionsAmount: string | number;
    isAllOptionsShown: boolean;
    autocompleteInputValue: string;
}, {}>, {
    content?(_: {
        value: SelectOption | SelectOption[];
        valueString: string | undefined;
        valueArray: SelectOption[];
        tabindex: string | number | undefined;
        ariaAttributes: Record<string, any> | undefined;
    }): any;
    "option-content"?(_: {
        option: SelectOption;
        index: number;
        selectOption: () => undefined;
    }): any;
    hiddenOptionsBadge?(_: {
        amount: string | number;
        isShown: boolean | undefined;
        toggle: () => void;
    }): any;
    hideOptionsButton?(_: {
        isShown: boolean | undefined;
        toggle: () => void;
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
