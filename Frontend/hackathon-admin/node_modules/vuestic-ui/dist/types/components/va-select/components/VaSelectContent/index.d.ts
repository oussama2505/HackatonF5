export declare const VaSelectContent: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        ariaAttributes: {
            type: ObjectConstructor;
        };
        value: {
            type: import("vue").PropType<import("../..").SelectOption[]>;
            required: true;
        };
        valueString: {
            type: StringConstructor;
        };
        separator: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        tabindex: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        hiddenSelectedOptionsAmount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        isAllOptionsShown: {
            type: BooleanConstructor;
            default: boolean;
        };
        autocomplete: {
            type: BooleanConstructor;
            default: boolean;
        };
        focused: {
            type: BooleanConstructor;
            default: boolean;
        };
        multiple: {
            type: BooleanConstructor;
            default: boolean;
        };
        getText: {
            type: import("vue").PropType<(option: import("../..").SelectOption) => string>;
            required: true;
        };
        autocompleteInputValue: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        "onSelect-option"?: ((...args: any[]) => any) | undefined;
        "onToggle-hidden"?: ((...args: any[]) => any) | undefined;
        "onAutocomplete-input"?: ((...args: any[]) => any) | undefined;
        "onFocus-prev"?: ((...args: any[]) => any) | undefined;
        "onFocus-next"?: ((...args: any[]) => any) | undefined;
        "onDelete-last-selected"?: ((...args: any[]) => any) | undefined;
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "select-option": (...args: any[]) => void;
        "toggle-hidden": (...args: any[]) => void;
        "autocomplete-input": (...args: any[]) => void;
        "focus-prev": (...args: any[]) => void;
        "focus-next": (...args: any[]) => void;
        "delete-last-selected": (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        ariaAttributes: {
            type: ObjectConstructor;
        };
        value: {
            type: import("vue").PropType<import("../..").SelectOption[]>;
            required: true;
        };
        valueString: {
            type: StringConstructor;
        };
        separator: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        tabindex: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        hiddenSelectedOptionsAmount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        isAllOptionsShown: {
            type: BooleanConstructor;
            default: boolean;
        };
        autocomplete: {
            type: BooleanConstructor;
            default: boolean;
        };
        focused: {
            type: BooleanConstructor;
            default: boolean;
        };
        multiple: {
            type: BooleanConstructor;
            default: boolean;
        };
        getText: {
            type: import("vue").PropType<(option: import("../..").SelectOption) => string>;
            required: true;
        };
        autocompleteInputValue: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        "onSelect-option"?: ((...args: any[]) => any) | undefined;
        "onToggle-hidden"?: ((...args: any[]) => any) | undefined;
        "onAutocomplete-input"?: ((...args: any[]) => any) | undefined;
        "onFocus-prev"?: ((...args: any[]) => any) | undefined;
        "onFocus-next"?: ((...args: any[]) => any) | undefined;
        "onDelete-last-selected"?: ((...args: any[]) => any) | undefined;
    }, {
        disabled: boolean;
        readonly: boolean;
        tabindex: string | number;
        placeholder: string;
        focused: boolean;
        autocomplete: boolean;
        multiple: boolean;
        separator: string;
        hiddenSelectedOptionsAmount: string | number;
        isAllOptionsShown: boolean;
        autocompleteInputValue: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        ariaAttributes: {
            type: ObjectConstructor;
        };
        value: {
            type: import("vue").PropType<import("../..").SelectOption[]>;
            required: true;
        };
        valueString: {
            type: StringConstructor;
        };
        separator: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        tabindex: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        hiddenSelectedOptionsAmount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        isAllOptionsShown: {
            type: BooleanConstructor;
            default: boolean;
        };
        autocomplete: {
            type: BooleanConstructor;
            default: boolean;
        };
        focused: {
            type: BooleanConstructor;
            default: boolean;
        };
        multiple: {
            type: BooleanConstructor;
            default: boolean;
        };
        getText: {
            type: import("vue").PropType<(option: import("../..").SelectOption) => string>;
            required: true;
        };
        autocompleteInputValue: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        "onSelect-option"?: ((...args: any[]) => any) | undefined;
        "onToggle-hidden"?: ((...args: any[]) => any) | undefined;
        "onAutocomplete-input"?: ((...args: any[]) => any) | undefined;
        "onFocus-prev"?: ((...args: any[]) => any) | undefined;
        "onFocus-next"?: ((...args: any[]) => any) | undefined;
        "onDelete-last-selected"?: ((...args: any[]) => any) | undefined;
    }, {}, {}, {}, {}, {
        disabled: boolean;
        readonly: boolean;
        tabindex: string | number;
        placeholder: string;
        focused: boolean;
        autocomplete: boolean;
        multiple: boolean;
        separator: string;
        hiddenSelectedOptionsAmount: string | number;
        isAllOptionsShown: boolean;
        autocompleteInputValue: string;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    ariaAttributes: {
        type: ObjectConstructor;
    };
    value: {
        type: import("vue").PropType<import("../..").SelectOption[]>;
        required: true;
    };
    valueString: {
        type: StringConstructor;
    };
    separator: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    hiddenSelectedOptionsAmount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    isAllOptionsShown: {
        type: BooleanConstructor;
        default: boolean;
    };
    autocomplete: {
        type: BooleanConstructor;
        default: boolean;
    };
    focused: {
        type: BooleanConstructor;
        default: boolean;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    getText: {
        type: import("vue").PropType<(option: import("../..").SelectOption) => string>;
        required: true;
    };
    autocompleteInputValue: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    "onSelect-option"?: ((...args: any[]) => any) | undefined;
    "onToggle-hidden"?: ((...args: any[]) => any) | undefined;
    "onAutocomplete-input"?: ((...args: any[]) => any) | undefined;
    "onFocus-prev"?: ((...args: any[]) => any) | undefined;
    "onFocus-next"?: ((...args: any[]) => any) | undefined;
    "onDelete-last-selected"?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "select-option": (...args: any[]) => void;
    "toggle-hidden": (...args: any[]) => void;
    "autocomplete-input": (...args: any[]) => void;
    "focus-prev": (...args: any[]) => void;
    "focus-next": (...args: any[]) => void;
    "delete-last-selected": (...args: any[]) => void;
}, string, {
    disabled: boolean;
    readonly: boolean;
    tabindex: string | number;
    placeholder: string;
    focused: boolean;
    autocomplete: boolean;
    multiple: boolean;
    separator: string;
    hiddenSelectedOptionsAmount: string | number;
    isAllOptionsShown: boolean;
    autocompleteInputValue: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        content?(_: {
            value: import("../..").SelectOption | import("../..").SelectOption[];
            valueString: string | undefined;
            valueArray: import("../..").SelectOption[];
            tabindex: string | number | undefined;
            ariaAttributes: Record<string, any> | undefined;
        }): any;
        "option-content"?(_: {
            option: import("../..").SelectOption;
            index: number;
            selectOption: () => undefined;
        }): any;
        hiddenOptionsBadge?(_: {
            amount: string | number;
            isShown: boolean | undefined;
            toggle: () => void;
        }): any;
        hideOptionsButton?(_: {
            isShown: boolean | undefined;
            toggle: () => void;
        }): any;
    };
});
