import { ComputedRef, type PropType } from 'vue';
import type { SelectableOption } from '../../../../composables';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    option: {
        type: PropType<SelectableOption>;
        default: () => {};
    };
    getText: {
        type: PropType<(option: SelectableOption) => string>;
        required: true;
    };
    getTrackBy: {
        type: PropType<(option: SelectableOption) => string | number>;
        required: true;
    };
    currentOption: {
        type: PropType<SelectableOption>;
        default: null;
    };
    getSelectedState: {
        type: PropType<(option: SelectableOption) => boolean>;
        required: true;
    };
    search: {
        type: StringConstructor;
        default: string;
    };
    highlightMatchedText: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputFocused: {
        type: BooleanConstructor;
        default: boolean;
    };
    minSearchChars: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}, {
    isFocused: ComputedRef<boolean>;
    isSelected: ComputedRef<boolean>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    option: {
        type: PropType<SelectableOption>;
        default: () => {};
    };
    getText: {
        type: PropType<(option: SelectableOption) => string>;
        required: true;
    };
    getTrackBy: {
        type: PropType<(option: SelectableOption) => string | number>;
        required: true;
    };
    currentOption: {
        type: PropType<SelectableOption>;
        default: null;
    };
    getSelectedState: {
        type: PropType<(option: SelectableOption) => boolean>;
        required: true;
    };
    search: {
        type: StringConstructor;
        default: string;
    };
    highlightMatchedText: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputFocused: {
        type: BooleanConstructor;
        default: boolean;
    };
    minSearchChars: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}>>, {
    option: SelectableOption;
    search: string;
    disabled: boolean;
    color: string;
    highlightMatchedText: boolean;
    minSearchChars: string | number;
    currentOption: SelectableOption;
    inputFocused: boolean;
}, {}>, {
    "option-content"?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
