export declare const VaSelectOption: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        option: {
            type: import("vue").PropType<import("../..").SelectOption>;
            default: () => {};
        };
        getText: {
            type: import("vue").PropType<(option: import("../..").SelectOption) => string>;
            required: true;
        };
        getTrackBy: {
            type: import("vue").PropType<(option: import("../..").SelectOption) => string | number>;
            required: true;
        };
        currentOption: {
            type: import("vue").PropType<import("../..").SelectOption>;
            default: null;
        };
        getSelectedState: {
            type: import("vue").PropType<(option: import("../..").SelectOption) => boolean>;
            required: true;
        };
        search: {
            type: StringConstructor;
            default: string;
        };
        highlightMatchedText: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputFocused: {
            type: BooleanConstructor;
            default: boolean;
        };
        minSearchChars: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
    }>>, {
        isFocused: import("vue").ComputedRef<boolean>;
        isSelected: import("vue").ComputedRef<boolean>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        option: {
            type: import("vue").PropType<import("../..").SelectOption>;
            default: () => {};
        };
        getText: {
            type: import("vue").PropType<(option: import("../..").SelectOption) => string>;
            required: true;
        };
        getTrackBy: {
            type: import("vue").PropType<(option: import("../..").SelectOption) => string | number>;
            required: true;
        };
        currentOption: {
            type: import("vue").PropType<import("../..").SelectOption>;
            default: null;
        };
        getSelectedState: {
            type: import("vue").PropType<(option: import("../..").SelectOption) => boolean>;
            required: true;
        };
        search: {
            type: StringConstructor;
            default: string;
        };
        highlightMatchedText: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputFocused: {
            type: BooleanConstructor;
            default: boolean;
        };
        minSearchChars: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
    }>>, {
        option: import("../..").SelectOption;
        search: string;
        disabled: boolean;
        color: string;
        highlightMatchedText: boolean;
        minSearchChars: string | number;
        currentOption: import("../..").SelectOption;
        inputFocused: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        option: {
            type: import("vue").PropType<import("../..").SelectOption>;
            default: () => {};
        };
        getText: {
            type: import("vue").PropType<(option: import("../..").SelectOption) => string>;
            required: true;
        };
        getTrackBy: {
            type: import("vue").PropType<(option: import("../..").SelectOption) => string | number>;
            required: true;
        };
        currentOption: {
            type: import("vue").PropType<import("../..").SelectOption>;
            default: null;
        };
        getSelectedState: {
            type: import("vue").PropType<(option: import("../..").SelectOption) => boolean>;
            required: true;
        };
        search: {
            type: StringConstructor;
            default: string;
        };
        highlightMatchedText: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputFocused: {
            type: BooleanConstructor;
            default: boolean;
        };
        minSearchChars: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
    }>>, {
        isFocused: import("vue").ComputedRef<boolean>;
        isSelected: import("vue").ComputedRef<boolean>;
    }, {}, {}, {}, {
        option: import("../..").SelectOption;
        search: string;
        disabled: boolean;
        color: string;
        highlightMatchedText: boolean;
        minSearchChars: string | number;
        currentOption: import("../..").SelectOption;
        inputFocused: boolean;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    option: {
        type: import("vue").PropType<import("../..").SelectOption>;
        default: () => {};
    };
    getText: {
        type: import("vue").PropType<(option: import("../..").SelectOption) => string>;
        required: true;
    };
    getTrackBy: {
        type: import("vue").PropType<(option: import("../..").SelectOption) => string | number>;
        required: true;
    };
    currentOption: {
        type: import("vue").PropType<import("../..").SelectOption>;
        default: null;
    };
    getSelectedState: {
        type: import("vue").PropType<(option: import("../..").SelectOption) => boolean>;
        required: true;
    };
    search: {
        type: StringConstructor;
        default: string;
    };
    highlightMatchedText: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputFocused: {
        type: BooleanConstructor;
        default: boolean;
    };
    minSearchChars: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}>>, {
    isFocused: import("vue").ComputedRef<boolean>;
    isSelected: import("vue").ComputedRef<boolean>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    option: import("../..").SelectOption;
    search: string;
    disabled: boolean;
    color: string;
    highlightMatchedText: boolean;
    minSearchChars: string | number;
    currentOption: import("../..").SelectOption;
    inputFocused: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        "option-content"?(_: {}): any;
    };
});
