import { PropType } from 'vue';
import type { SelectOption } from '../../types';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    noOptionsText: {
        type: StringConstructor;
        default: string;
    };
    getSelectedState: {
        type: PropType<(option: SelectOption) => boolean>;
        required: true;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    search: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    hoveredOption: {
        type: PropType<SelectOption>;
        default: null;
    };
    virtualScroller: {
        type: BooleanConstructor;
        default: boolean;
    };
    highlightMatchedText: {
        type: BooleanConstructor;
        default: boolean;
    };
    minSearchChars: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    autoSelectFirstOption: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectedTopShown: {
        type: BooleanConstructor;
        default: boolean;
    };
    doShowAllOptions: {
        type: BooleanConstructor;
        default: boolean;
    };
    delay: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
    options: {
        type: PropType<SelectOption[]>;
        default: () => never[];
    };
    textBy: {
        type: PropType<import("../../../../composables").StringOrFunction>;
        default: string;
    };
    valueBy: {
        type: PropType<import("../../../../composables").StringOrFunction>;
        default: string;
    };
    trackBy: {
        type: PropType<import("../../../../composables").StringOrFunction>;
        default: string;
    };
    disabledBy: {
        type: PropType<import("../../../../composables").StringOrFunction>;
        default: string;
    };
    groupBy: {
        type: PropType<import("../../../../composables").StringOrFunction>;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}, {
    focusPreviousOption: () => void;
    focusNextOption: () => void;
    focusFirstOption: () => void;
    scrollToOption: (option: SelectOption) => void;
    focus: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "scroll-bottom": (...args: any[]) => void;
    "select-option": (...args: any[]) => void;
    "update:hoveredOption": (...args: any[]) => void;
    "no-previous-option-to-hover": (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    noOptionsText: {
        type: StringConstructor;
        default: string;
    };
    getSelectedState: {
        type: PropType<(option: SelectOption) => boolean>;
        required: true;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    search: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    hoveredOption: {
        type: PropType<SelectOption>;
        default: null;
    };
    virtualScroller: {
        type: BooleanConstructor;
        default: boolean;
    };
    highlightMatchedText: {
        type: BooleanConstructor;
        default: boolean;
    };
    minSearchChars: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    autoSelectFirstOption: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectedTopShown: {
        type: BooleanConstructor;
        default: boolean;
    };
    doShowAllOptions: {
        type: BooleanConstructor;
        default: boolean;
    };
    delay: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
    options: {
        type: PropType<SelectOption[]>;
        default: () => never[];
    };
    textBy: {
        type: PropType<import("../../../../composables").StringOrFunction>;
        default: string;
    };
    valueBy: {
        type: PropType<import("../../../../composables").StringOrFunction>;
        default: string;
    };
    trackBy: {
        type: PropType<import("../../../../composables").StringOrFunction>;
        default: string;
    };
    disabledBy: {
        type: PropType<import("../../../../composables").StringOrFunction>;
        default: string;
    };
    groupBy: {
        type: PropType<import("../../../../composables").StringOrFunction>;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    "onScroll-bottom"?: ((...args: any[]) => any) | undefined;
    "onSelect-option"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredOption"?: ((...args: any[]) => any) | undefined;
    "onNo-previous-option-to-hover"?: ((...args: any[]) => any) | undefined;
}, {
    search: string;
    options: SelectOption[];
    preset: string;
    color: string;
    delay: number;
    textBy: import("../../../../composables").StringOrFunction;
    valueBy: import("../../../../composables").StringOrFunction;
    trackBy: import("../../../../composables").StringOrFunction;
    disabledBy: import("../../../../composables").StringOrFunction;
    groupBy: import("../../../../composables").StringOrFunction;
    tabindex: string | number;
    multiple: boolean;
    virtualScroller: boolean;
    noOptionsText: string;
    selectedTopShown: boolean;
    highlightMatchedText: boolean;
    minSearchChars: string | number;
    autoSelectFirstOption: boolean;
    hoveredOption: SelectOption;
    doShowAllOptions: boolean;
}, {}>, {
    default?(_: {
        option: SelectOption;
        index: number;
        selectOption: (option: SelectOption) => void;
    }): any;
    "option-content"?(_: {
        option: SelectOption;
        index: number;
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
