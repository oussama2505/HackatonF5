export declare const VaSidebarItemContent: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{}>>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{}>>, {}, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{}>>, {}, {}, {}, {}, {}>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{}>>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
export declare const VaSidebarItemTitle: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{}>>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{}>>, {}, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{}>>, {}, {}, {}, {}, {}>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{}>>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
export declare const VaSidebarItem: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        active: {
            type: BooleanConstructor;
            default: boolean;
        };
        textColor: {
            type: StringConstructor;
            default: undefined;
        };
        activeColor: {
            type: StringConstructor;
            default: string;
        };
        hoverColor: {
            type: StringConstructor;
            default: undefined;
        };
        hoverOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        borderColor: {
            type: StringConstructor;
            default: undefined;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: import("vue").PropType<string | Record<string, any>>;
            default: undefined;
        };
        replace: {
            type: BooleanConstructor;
            default: undefined;
        };
        append: {
            type: BooleanConstructor;
            default: undefined;
        };
        exact: {
            type: BooleanConstructor;
            default: undefined;
        };
        activeClass: {
            type: StringConstructor;
            default: undefined;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: undefined;
        };
        href: {
            type: StringConstructor;
            default: undefined;
        };
        target: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        active: {
            type: BooleanConstructor;
            default: boolean;
        };
        textColor: {
            type: StringConstructor;
            default: undefined;
        };
        activeColor: {
            type: StringConstructor;
            default: string;
        };
        hoverColor: {
            type: StringConstructor;
            default: undefined;
        };
        hoverOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        borderColor: {
            type: StringConstructor;
            default: undefined;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: import("vue").PropType<string | Record<string, any>>;
            default: undefined;
        };
        replace: {
            type: BooleanConstructor;
            default: undefined;
        };
        append: {
            type: BooleanConstructor;
            default: undefined;
        };
        exact: {
            type: BooleanConstructor;
            default: undefined;
        };
        activeClass: {
            type: StringConstructor;
            default: undefined;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: undefined;
        };
        href: {
            type: StringConstructor;
            default: undefined;
        };
        target: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, {
        replace: boolean;
        preset: string;
        append: boolean;
        disabled: boolean;
        tag: string;
        href: string;
        to: string | Record<string, any>;
        exact: boolean;
        activeClass: string;
        exactActiveClass: string;
        target: string;
        textColor: string;
        borderColor: string;
        hoverOpacity: string | number;
        active: boolean;
        activeColor: string;
        hoverColor: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        active: {
            type: BooleanConstructor;
            default: boolean;
        };
        textColor: {
            type: StringConstructor;
            default: undefined;
        };
        activeColor: {
            type: StringConstructor;
            default: string;
        };
        hoverColor: {
            type: StringConstructor;
            default: undefined;
        };
        hoverOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        borderColor: {
            type: StringConstructor;
            default: undefined;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: import("vue").PropType<string | Record<string, any>>;
            default: undefined;
        };
        replace: {
            type: BooleanConstructor;
            default: undefined;
        };
        append: {
            type: BooleanConstructor;
            default: undefined;
        };
        exact: {
            type: BooleanConstructor;
            default: undefined;
        };
        activeClass: {
            type: StringConstructor;
            default: undefined;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: undefined;
        };
        href: {
            type: StringConstructor;
            default: undefined;
        };
        target: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, {}, {}, {}, {}, {
        replace: boolean;
        preset: string;
        append: boolean;
        disabled: boolean;
        tag: string;
        href: string;
        to: string | Record<string, any>;
        exact: boolean;
        activeClass: string;
        exactActiveClass: string;
        target: string;
        textColor: string;
        borderColor: string;
        hoverOpacity: string | number;
        active: boolean;
        activeColor: string;
        hoverColor: string;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    active: {
        type: BooleanConstructor;
        default: boolean;
    };
    textColor: {
        type: StringConstructor;
        default: undefined;
    };
    activeColor: {
        type: StringConstructor;
        default: string;
    };
    hoverColor: {
        type: StringConstructor;
        default: undefined;
    };
    hoverOpacity: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    borderColor: {
        type: StringConstructor;
        default: undefined;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    to: {
        type: import("vue").PropType<string | Record<string, any>>;
        default: undefined;
    };
    replace: {
        type: BooleanConstructor;
        default: undefined;
    };
    append: {
        type: BooleanConstructor;
        default: undefined;
    };
    exact: {
        type: BooleanConstructor;
        default: undefined;
    };
    activeClass: {
        type: StringConstructor;
        default: undefined;
    };
    exactActiveClass: {
        type: StringConstructor;
        default: undefined;
    };
    href: {
        type: StringConstructor;
        default: undefined;
    };
    target: {
        type: StringConstructor;
        default: undefined;
    };
}>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    replace: boolean;
    preset: string;
    append: boolean;
    disabled: boolean;
    tag: string;
    href: string;
    to: string | Record<string, any>;
    exact: boolean;
    activeClass: string;
    exactActiveClass: string;
    target: string;
    textColor: string;
    borderColor: string;
    hoverOpacity: string | number;
    active: boolean;
    activeColor: string;
    hoverColor: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
