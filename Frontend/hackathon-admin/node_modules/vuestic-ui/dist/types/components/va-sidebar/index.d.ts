export { VaSidebarItem, VaSidebarItemContent, VaSidebarItemTitle } from './VaSidebarItem';
export declare const VaSidebar: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        activeColor: {
            type: StringConstructor;
            default: string;
        };
        hoverColor: {
            type: StringConstructor;
            default: undefined;
        };
        hoverOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
            validator: (v: string | number) => boolean;
        };
        borderColor: {
            type: StringConstructor;
            default: undefined;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
        };
        gradient: {
            type: BooleanConstructor;
            default: boolean;
        };
        minimized: {
            type: BooleanConstructor;
            default: boolean;
        };
        hoverable: {
            type: BooleanConstructor;
            default: boolean;
        };
        width: {
            type: StringConstructor;
            default: string;
        };
        minimizedWidth: {
            type: StringConstructor;
            default: string;
        };
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        animated: {
            type: (BooleanConstructor | StringConstructor)[];
            default: boolean;
        };
        closeOnClickOutside: {
            type: BooleanConstructor;
            default: boolean;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }, {
        isMinimized: import("vue").ComputedRef<boolean>;
        isHovered: import("vue").Ref<boolean>;
        updateHoverState: (newHoverState: boolean) => void;
        rootElement: import("vue").ShallowRef<HTMLElement | undefined>;
        menu: import("vue").Ref<HTMLElement | undefined>;
        doShowMenu: import("vue").ComputedRef<boolean>;
        menuWidth: import("vue").ComputedRef<string>;
        sidebarWidth: import("vue").Ref<any>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:modelValue": (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        activeColor: {
            type: StringConstructor;
            default: string;
        };
        hoverColor: {
            type: StringConstructor;
            default: undefined;
        };
        hoverOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
            validator: (v: string | number) => boolean;
        };
        borderColor: {
            type: StringConstructor;
            default: undefined;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
        };
        gradient: {
            type: BooleanConstructor;
            default: boolean;
        };
        minimized: {
            type: BooleanConstructor;
            default: boolean;
        };
        hoverable: {
            type: BooleanConstructor;
            default: boolean;
        };
        width: {
            type: StringConstructor;
            default: string;
        };
        minimizedWidth: {
            type: StringConstructor;
            default: string;
        };
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        animated: {
            type: (BooleanConstructor | StringConstructor)[];
            default: boolean;
        };
        closeOnClickOutside: {
            type: BooleanConstructor;
            default: boolean;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }, {
        preset: string;
        modelValue: boolean;
        color: string;
        width: string;
        closeOnClickOutside: boolean;
        borderColor: string;
        gradient: boolean;
        hoverOpacity: string | number;
        activeColor: string;
        hoverable: boolean;
        animated: string | boolean;
        hoverColor: string;
        minimized: boolean;
        minimizedWidth: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        activeColor: {
            type: StringConstructor;
            default: string;
        };
        hoverColor: {
            type: StringConstructor;
            default: undefined;
        };
        hoverOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
            validator: (v: string | number) => boolean;
        };
        borderColor: {
            type: StringConstructor;
            default: undefined;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
        };
        gradient: {
            type: BooleanConstructor;
            default: boolean;
        };
        minimized: {
            type: BooleanConstructor;
            default: boolean;
        };
        hoverable: {
            type: BooleanConstructor;
            default: boolean;
        };
        width: {
            type: StringConstructor;
            default: string;
        };
        minimizedWidth: {
            type: StringConstructor;
            default: string;
        };
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        animated: {
            type: (BooleanConstructor | StringConstructor)[];
            default: boolean;
        };
        closeOnClickOutside: {
            type: BooleanConstructor;
            default: boolean;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }, {
        isMinimized: import("vue").ComputedRef<boolean>;
        isHovered: import("vue").Ref<boolean>;
        updateHoverState: (newHoverState: boolean) => void;
        rootElement: import("vue").ShallowRef<HTMLElement | undefined>;
        menu: import("vue").Ref<HTMLElement | undefined>;
        doShowMenu: import("vue").ComputedRef<boolean>;
        menuWidth: import("vue").ComputedRef<string>;
        sidebarWidth: import("vue").Ref<any>;
    }, {}, {}, {}, {
        preset: string;
        modelValue: boolean;
        color: string;
        width: string;
        closeOnClickOutside: boolean;
        borderColor: string;
        gradient: boolean;
        hoverOpacity: string | number;
        activeColor: string;
        hoverable: boolean;
        animated: string | boolean;
        hoverColor: string;
        minimized: boolean;
        minimizedWidth: string;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    activeColor: {
        type: StringConstructor;
        default: string;
    };
    hoverColor: {
        type: StringConstructor;
        default: undefined;
    };
    hoverOpacity: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
        validator: (v: string | number) => boolean;
    };
    borderColor: {
        type: StringConstructor;
        default: undefined;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
    };
    gradient: {
        type: BooleanConstructor;
        default: boolean;
    };
    minimized: {
        type: BooleanConstructor;
        default: boolean;
    };
    hoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    width: {
        type: StringConstructor;
        default: string;
    };
    minimizedWidth: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    animated: {
        type: (BooleanConstructor | StringConstructor)[];
        default: boolean;
    };
    closeOnClickOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    isMinimized: import("vue").ComputedRef<boolean>;
    isHovered: import("vue").Ref<boolean>;
    updateHoverState: (newHoverState: boolean) => void;
    rootElement: import("vue").ShallowRef<HTMLElement | undefined>;
    menu: import("vue").Ref<HTMLElement | undefined>;
    doShowMenu: import("vue").ComputedRef<boolean>;
    menuWidth: import("vue").ComputedRef<string>;
    sidebarWidth: import("vue").Ref<any>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
}, string, {
    preset: string;
    modelValue: boolean;
    color: string;
    width: string;
    closeOnClickOutside: boolean;
    borderColor: string;
    gradient: boolean;
    hoverOpacity: string | number;
    activeColor: string;
    hoverable: boolean;
    animated: string | boolean;
    hoverColor: string;
    minimized: boolean;
    minimizedWidth: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
