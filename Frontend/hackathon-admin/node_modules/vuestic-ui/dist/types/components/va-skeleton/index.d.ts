export declare const VaSkeleton: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        color: {
            type: StringConstructor;
            default: string;
        };
        delay: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        animation: {
            type: import("vue").PropType<"none" | "pulse" | "wave">;
            default: string;
        };
        lines: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        height: {
            type: StringConstructor[];
            default: string;
        };
        width: {
            type: StringConstructor[];
            default: string;
        };
        lineGap: {
            type: StringConstructor;
            default: string;
        };
        lastLineWidth: {
            type: StringConstructor[];
            default: string;
        };
        variant: {
            type: import("vue").PropType<"circle" | "text" | "rounded" | "squared">;
            default: string;
        };
        ariaLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
    }>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        color: {
            type: StringConstructor;
            default: string;
        };
        delay: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        animation: {
            type: import("vue").PropType<"none" | "pulse" | "wave">;
            default: string;
        };
        lines: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        height: {
            type: StringConstructor[];
            default: string;
        };
        width: {
            type: StringConstructor[];
            default: string;
        };
        lineGap: {
            type: StringConstructor;
            default: string;
        };
        lastLineWidth: {
            type: StringConstructor[];
            default: string;
        };
        variant: {
            type: import("vue").PropType<"circle" | "text" | "rounded" | "squared">;
            default: string;
        };
        ariaLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
    }>>, {
        ariaLabel: import("../../composables").TranslationProp;
        tag: string;
        color: string;
        delay: string | number;
        width: string;
        height: string;
        lines: string | number;
        animation: "none" | "pulse" | "wave";
        lineGap: string;
        lastLineWidth: string;
        variant: "circle" | "text" | "rounded" | "squared";
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        color: {
            type: StringConstructor;
            default: string;
        };
        delay: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        animation: {
            type: import("vue").PropType<"none" | "pulse" | "wave">;
            default: string;
        };
        lines: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        height: {
            type: StringConstructor[];
            default: string;
        };
        width: {
            type: StringConstructor[];
            default: string;
        };
        lineGap: {
            type: StringConstructor;
            default: string;
        };
        lastLineWidth: {
            type: StringConstructor[];
            default: string;
        };
        variant: {
            type: import("vue").PropType<"circle" | "text" | "rounded" | "squared">;
            default: string;
        };
        ariaLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
    }>>, {}, {}, {}, {}, {
        ariaLabel: import("../../composables").TranslationProp;
        tag: string;
        color: string;
        delay: string | number;
        width: string;
        height: string;
        lines: string | number;
        animation: "none" | "pulse" | "wave";
        lineGap: string;
        lastLineWidth: string;
        variant: "circle" | "text" | "rounded" | "squared";
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    color: {
        type: StringConstructor;
        default: string;
    };
    delay: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    animation: {
        type: import("vue").PropType<"none" | "pulse" | "wave">;
        default: string;
    };
    lines: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    height: {
        type: StringConstructor[];
        default: string;
    };
    width: {
        type: StringConstructor[];
        default: string;
    };
    lineGap: {
        type: StringConstructor;
        default: string;
    };
    lastLineWidth: {
        type: StringConstructor[];
        default: string;
    };
    variant: {
        type: import("vue").PropType<"circle" | "text" | "rounded" | "squared">;
        default: string;
    };
    ariaLabel: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
}>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    ariaLabel: import("../../composables").TranslationProp;
    tag: string;
    color: string;
    delay: string | number;
    width: string;
    height: string;
    lines: string | number;
    animation: "none" | "pulse" | "wave";
    lineGap: string;
    lastLineWidth: string;
    variant: "circle" | "text" | "rounded" | "squared";
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
export declare const VaSkeletonGroup: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        color: {
            type: StringConstructor;
            default: string;
        };
        delay: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        animation: {
            type: import("vue").PropType<"none" | "pulse" | "wave">;
            default: string;
        };
        lines: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        lineGap: {
            type: StringConstructor;
            default: string;
        };
        lastLineWidth: {
            type: StringConstructor[];
            default: string;
        };
    }>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        color: {
            type: StringConstructor;
            default: string;
        };
        delay: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        animation: {
            type: import("vue").PropType<"none" | "pulse" | "wave">;
            default: string;
        };
        lines: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        lineGap: {
            type: StringConstructor;
            default: string;
        };
        lastLineWidth: {
            type: StringConstructor[];
            default: string;
        };
    }>>, {
        color: string;
        delay: string | number;
        lines: string | number;
        animation: "none" | "pulse" | "wave";
        lineGap: string;
        lastLineWidth: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        color: {
            type: StringConstructor;
            default: string;
        };
        delay: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        animation: {
            type: import("vue").PropType<"none" | "pulse" | "wave">;
            default: string;
        };
        lines: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        lineGap: {
            type: StringConstructor;
            default: string;
        };
        lastLineWidth: {
            type: StringConstructor[];
            default: string;
        };
    }>>, {}, {}, {}, {}, {
        color: string;
        delay: string | number;
        lines: string | number;
        animation: "none" | "pulse" | "wave";
        lineGap: string;
        lastLineWidth: string;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    color: {
        type: StringConstructor;
        default: string;
    };
    delay: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    animation: {
        type: import("vue").PropType<"none" | "pulse" | "wave">;
        default: string;
    };
    lines: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    lineGap: {
        type: StringConstructor;
        default: string;
    };
    lastLineWidth: {
        type: StringConstructor[];
        default: string;
    };
}>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    color: string;
    delay: string | number;
    lines: string | number;
    animation: "none" | "pulse" | "wave";
    lineGap: string;
    lastLineWidth: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
