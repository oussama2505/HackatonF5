import { PropType } from 'vue';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    id: {
        type: StringConstructor;
        default: string;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {
        type: PropType<string | number | boolean | unknown[] | Record<string, unknown> | null>;
        default: boolean;
    };
    trueLabel: {
        type: StringConstructor;
        default: null;
    };
    falseLabel: {
        type: StringConstructor;
        default: null;
    };
    trueInnerLabel: {
        type: StringConstructor;
        default: null;
    };
    falseInnerLabel: {
        type: StringConstructor;
        default: null;
    };
    ariaLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    offColor: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: PropType<"small" | "medium" | "large">;
        default: string;
        validator: (value: string) => boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    arrayValue: {
        type: (BooleanConstructor | ObjectConstructor | StringConstructor | NumberConstructor)[];
        default: null;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    leftLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    trueValue: {
        type: PropType<any>;
        default: boolean;
    };
    falseValue: {
        type: PropType<any>;
        default: boolean;
    };
    indeterminate: {
        type: BooleanConstructor;
        default: boolean;
    };
    indeterminateValue: {
        type: PropType<any>;
        default: null;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    rules: {
        type: PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    };
    dirty: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}, {
    focus: () => void;
    reset: () => void;
    isDirty: import("vue").Ref<boolean>;
    isTouched: import("vue").Ref<boolean>;
    isLoading: import("vue").WritableComputedRef<boolean>;
    isError: import("vue").WritableComputedRef<boolean>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    [x: string]: (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    id: {
        type: StringConstructor;
        default: string;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {
        type: PropType<string | number | boolean | unknown[] | Record<string, unknown> | null>;
        default: boolean;
    };
    trueLabel: {
        type: StringConstructor;
        default: null;
    };
    falseLabel: {
        type: StringConstructor;
        default: null;
    };
    trueInnerLabel: {
        type: StringConstructor;
        default: null;
    };
    falseInnerLabel: {
        type: StringConstructor;
        default: null;
    };
    ariaLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    offColor: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: PropType<"small" | "medium" | "large">;
        default: string;
        validator: (value: string) => boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    arrayValue: {
        type: (BooleanConstructor | ObjectConstructor | StringConstructor | NumberConstructor)[];
        default: null;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    leftLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    trueValue: {
        type: PropType<any>;
        default: boolean;
    };
    falseValue: {
        type: PropType<any>;
        default: boolean;
    };
    indeterminate: {
        type: BooleanConstructor;
        default: boolean;
    };
    indeterminateValue: {
        type: PropType<any>;
        default: null;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    rules: {
        type: PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    };
    dirty: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}>>, {
    label: string;
    error: boolean;
    size: "small" | "medium" | "large";
    preset: string;
    name: string;
    success: boolean;
    id: string;
    ariaLabel: import("../../composables").TranslationProp;
    disabled: boolean;
    readonly: boolean;
    errorMessages: string | string[];
    modelValue: string | number | boolean | unknown[] | Record<string, unknown> | null;
    stateful: boolean;
    color: string;
    loading: boolean;
    rules: import("../../composables").ValidationRule<any>[];
    dirty: boolean;
    errorCount: string | number;
    messages: string | string[];
    immediateValidation: boolean;
    indeterminate: boolean;
    indeterminateValue: any;
    arrayValue: string | number | boolean | Record<string, any>;
    leftLabel: boolean;
    trueValue: any;
    falseValue: any;
    trueLabel: string;
    falseLabel: string;
    trueInnerLabel: string;
    falseInnerLabel: string;
    offColor: string;
}, {}>, {
    innerLabel?(_: {}): any;
    checker?(_: {
        value: boolean;
    }): any;
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
