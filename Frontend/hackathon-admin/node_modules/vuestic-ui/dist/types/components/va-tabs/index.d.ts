export { VaTab } from './components/VaTab';
export declare const VaTabs: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: (StringConstructor | NumberConstructor)[];
            default: null;
        };
        left: {
            type: BooleanConstructor;
            default: boolean;
        };
        right: {
            type: BooleanConstructor;
            default: boolean;
        };
        center: {
            type: BooleanConstructor;
            default: boolean;
        };
        grow: {
            type: BooleanConstructor;
            default: boolean;
        };
        hidePagination: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        hideSlider: {
            type: BooleanConstructor;
            default: boolean;
        };
        vertical: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        prevIcon: {
            type: StringConstructor;
            default: string;
        };
        nextIcon: {
            type: StringConstructor;
            default: string;
        };
        ariaMoveRightLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaMoveLeftLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onClick:next"?: ((...args: any[]) => any) | undefined;
        "onClick:prev"?: ((...args: any[]) => any) | undefined;
    }, {
        selectTab: (tab: import("./types").TabComponent) => void;
        moveToTab: (tab: import("./types").TabComponent) => void;
        movePaginationLeft: () => void;
        movePaginationRight: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:modelValue": (...args: any[]) => void;
        "click:next": (...args: any[]) => void;
        "click:prev": (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: (StringConstructor | NumberConstructor)[];
            default: null;
        };
        left: {
            type: BooleanConstructor;
            default: boolean;
        };
        right: {
            type: BooleanConstructor;
            default: boolean;
        };
        center: {
            type: BooleanConstructor;
            default: boolean;
        };
        grow: {
            type: BooleanConstructor;
            default: boolean;
        };
        hidePagination: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        hideSlider: {
            type: BooleanConstructor;
            default: boolean;
        };
        vertical: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        prevIcon: {
            type: StringConstructor;
            default: string;
        };
        nextIcon: {
            type: StringConstructor;
            default: string;
        };
        ariaMoveRightLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaMoveLeftLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onClick:next"?: ((...args: any[]) => any) | undefined;
        "onClick:prev"?: ((...args: any[]) => any) | undefined;
    }, {
        preset: string;
        left: boolean;
        center: boolean;
        right: boolean;
        disabled: boolean;
        modelValue: string | number;
        stateful: boolean;
        color: string;
        vertical: boolean;
        grow: boolean;
        hidePagination: boolean;
        hideSlider: boolean;
        prevIcon: string;
        nextIcon: string;
        ariaMoveRightLabel: import("../../composables").TranslationProp;
        ariaMoveLeftLabel: import("../../composables").TranslationProp;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: (StringConstructor | NumberConstructor)[];
            default: null;
        };
        left: {
            type: BooleanConstructor;
            default: boolean;
        };
        right: {
            type: BooleanConstructor;
            default: boolean;
        };
        center: {
            type: BooleanConstructor;
            default: boolean;
        };
        grow: {
            type: BooleanConstructor;
            default: boolean;
        };
        hidePagination: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        hideSlider: {
            type: BooleanConstructor;
            default: boolean;
        };
        vertical: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        prevIcon: {
            type: StringConstructor;
            default: string;
        };
        nextIcon: {
            type: StringConstructor;
            default: string;
        };
        ariaMoveRightLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaMoveLeftLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onClick:next"?: ((...args: any[]) => any) | undefined;
        "onClick:prev"?: ((...args: any[]) => any) | undefined;
    }, {
        selectTab: (tab: import("./types").TabComponent) => void;
        moveToTab: (tab: import("./types").TabComponent) => void;
        movePaginationLeft: () => void;
        movePaginationRight: () => void;
    }, {}, {}, {}, {
        preset: string;
        left: boolean;
        center: boolean;
        right: boolean;
        disabled: boolean;
        modelValue: string | number;
        stateful: boolean;
        color: string;
        vertical: boolean;
        grow: boolean;
        hidePagination: boolean;
        hideSlider: boolean;
        prevIcon: string;
        nextIcon: string;
        ariaMoveRightLabel: import("../../composables").TranslationProp;
        ariaMoveLeftLabel: import("../../composables").TranslationProp;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: null;
    };
    left: {
        type: BooleanConstructor;
        default: boolean;
    };
    right: {
        type: BooleanConstructor;
        default: boolean;
    };
    center: {
        type: BooleanConstructor;
        default: boolean;
    };
    grow: {
        type: BooleanConstructor;
        default: boolean;
    };
    hidePagination: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideSlider: {
        type: BooleanConstructor;
        default: boolean;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    prevIcon: {
        type: StringConstructor;
        default: string;
    };
    nextIcon: {
        type: StringConstructor;
        default: string;
    };
    ariaMoveRightLabel: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    ariaMoveLeftLabel: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onClick:next"?: ((...args: any[]) => any) | undefined;
    "onClick:prev"?: ((...args: any[]) => any) | undefined;
}, {
    selectTab: (tab: import("./types").TabComponent) => void;
    moveToTab: (tab: import("./types").TabComponent) => void;
    movePaginationLeft: () => void;
    movePaginationRight: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
    "click:next": (...args: any[]) => void;
    "click:prev": (...args: any[]) => void;
}, string, {
    preset: string;
    left: boolean;
    center: boolean;
    right: boolean;
    disabled: boolean;
    modelValue: string | number;
    stateful: boolean;
    color: string;
    vertical: boolean;
    grow: boolean;
    hidePagination: boolean;
    hideSlider: boolean;
    prevIcon: string;
    nextIcon: string;
    ariaMoveRightLabel: import("../../composables").TranslationProp;
    ariaMoveLeftLabel: import("../../composables").TranslationProp;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        tabs?(_: {}): any;
        default?(_: {}): any;
    };
});
export * from './types';
