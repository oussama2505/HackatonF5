export declare const VaTimeInput: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        closeOnContentClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        offset: {
            default: () => number[];
            type: import("vue").PropType<NonNullable<import("../va-dropdown/types").DropdownOffsetProp | undefined>>;
            required: true;
        };
        placement: {
            default: string;
            type: import("vue").PropType<NonNullable<import("../../composables").PlacementWithAlias | undefined>>;
            required: true;
        };
        modelValue: {
            type: DateConstructor;
            default: undefined;
        };
        clearValue: {
            type: DateConstructor;
            default: null;
        };
        format: {
            type: import("vue").PropType<(date?: Date | undefined) => string>;
        };
        parse: {
            type: import("vue").PropType<(input: string) => Date>;
        };
        manualInput: {
            type: BooleanConstructor;
            default: boolean;
        };
        leftIcon: {
            type: BooleanConstructor;
            default: boolean;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        ariaLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaResetLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaToggleDropdownLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        rules: {
            type: import("vue").PropType<import("../../composables").ValidationRule<Date>[]>;
            default: () => any;
            required: false;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        name: {
            type: StringConstructor;
            default: undefined;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        errorMessages: {
            type: import("vue").PropType<string | string[]>;
            default: undefined;
        };
        dirty: {
            type: BooleanConstructor;
            default: boolean;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        messages: {
            type: import("vue").PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
        preset: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        view: {
            type: import("vue").PropType<NonNullable<"hours" | "minutes" | "seconds" | undefined>>;
            required: true;
            default: "hours" | "minutes" | "seconds" | undefined;
        };
        disabled: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        readonly: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        "onUpdate:modelValue": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        ampm: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        hidePeriodSwitch: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        periodUpdatesModelValue: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        hoursFilter: {
            type: import("vue").PropType<(h: number) => boolean>;
            required: true;
            default: ((h: number) => boolean) | undefined;
        };
        minutesFilter: {
            type: import("vue").PropType<(h: number) => boolean>;
            required: true;
            default: ((h: number) => boolean) | undefined;
        };
        secondsFilter: {
            type: import("vue").PropType<(h: number) => boolean>;
            required: true;
            default: ((h: number) => boolean) | undefined;
        };
        framed: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        cellHeight: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        visibleCellsCount: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        clearable: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearableIcon: {
            type: StringConstructor;
            default: string;
        };
        closeOnChange: {
            type: BooleanConstructor;
            default: null;
        };
        isOpen: {
            type: BooleanConstructor;
            default: undefined;
        };
        onClose: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        anchor: {
            type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables").MaybeHTMLElementOrSelector;
        };
        role: {
            type: import("vue").PropType<NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>>;
            required: true;
            default: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined;
        };
        trigger: {
            type: import("vue").PropType<NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>>;
            required: true;
            default: import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined;
        };
        target: {
            type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables").MaybeHTMLElementOrSelector;
        };
        hoverOverTimeout: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        hoverOutTimeout: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        autoPlacement: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        stickToEdges: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        keepAnchorWidth: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        verticalScrollOnOverflow: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        onOpen: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-right-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onContent-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-outside": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onFocus-outside": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-dblclick": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        anchorSelector: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        closeOnClickOutside: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnFocusOutside: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnAnchorClick: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        isContentHoverable: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        cursor: {
            type: import("vue").PropType<NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>>;
            required: true;
            default: boolean | import("../va-dropdown/types").CursorAnchor | undefined;
        };
        teleport: {
            type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables").MaybeHTMLElementOrSelector;
        };
        contentClass: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        label: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        onClick: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        color: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        loading: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        background: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        requiredMark: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        inputAriaLabel: {
            type: import("vue").PropType<NonNullable<import("../../composables").TranslationProp | undefined>>;
            required: true;
            default: import("../../composables").TranslationProp | undefined;
        };
        inputAriaLabelledby: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        inputAriaDescribedby: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        "onClick-prepend": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-append": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-prepend-inner": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-append-inner": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-field": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        counter: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        placeholder: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        innerLabel: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
    }>>, {
        isFocused: import("vue").WritableComputedRef<boolean>;
        isValid: import("vue").Ref<boolean>;
        value: import("../../composables").StatefulValue<Date | undefined>;
        isDirty: import("vue").Ref<boolean>;
        isTouched: import("vue").Ref<boolean>;
        focus: () => void;
        blur: () => void;
        reset: () => void;
        withoutValidation: (cb: () => any) => void;
        resetValidation: () => void;
        toggleDropdown: (event: Event | KeyboardEvent) => void;
        showDropdown: (event?: KeyboardEvent | undefined, cancel?: boolean | undefined, prevent?: boolean | undefined) => void;
        hideDropdown: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        [x: string]: (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        closeOnContentClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        offset: {
            default: () => number[];
            type: import("vue").PropType<NonNullable<import("../va-dropdown/types").DropdownOffsetProp | undefined>>;
            required: true;
        };
        placement: {
            default: string;
            type: import("vue").PropType<NonNullable<import("../../composables").PlacementWithAlias | undefined>>;
            required: true;
        };
        modelValue: {
            type: DateConstructor;
            default: undefined;
        };
        clearValue: {
            type: DateConstructor;
            default: null;
        };
        format: {
            type: import("vue").PropType<(date?: Date | undefined) => string>;
        };
        parse: {
            type: import("vue").PropType<(input: string) => Date>;
        };
        manualInput: {
            type: BooleanConstructor;
            default: boolean;
        };
        leftIcon: {
            type: BooleanConstructor;
            default: boolean;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        ariaLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaResetLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaToggleDropdownLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        rules: {
            type: import("vue").PropType<import("../../composables").ValidationRule<Date>[]>;
            default: () => any;
            required: false;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        name: {
            type: StringConstructor;
            default: undefined;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        errorMessages: {
            type: import("vue").PropType<string | string[]>;
            default: undefined;
        };
        dirty: {
            type: BooleanConstructor;
            default: boolean;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        messages: {
            type: import("vue").PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
        preset: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        view: {
            type: import("vue").PropType<NonNullable<"hours" | "minutes" | "seconds" | undefined>>;
            required: true;
            default: "hours" | "minutes" | "seconds" | undefined;
        };
        disabled: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        readonly: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        "onUpdate:modelValue": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        ampm: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        hidePeriodSwitch: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        periodUpdatesModelValue: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        hoursFilter: {
            type: import("vue").PropType<(h: number) => boolean>;
            required: true;
            default: ((h: number) => boolean) | undefined;
        };
        minutesFilter: {
            type: import("vue").PropType<(h: number) => boolean>;
            required: true;
            default: ((h: number) => boolean) | undefined;
        };
        secondsFilter: {
            type: import("vue").PropType<(h: number) => boolean>;
            required: true;
            default: ((h: number) => boolean) | undefined;
        };
        framed: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        cellHeight: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        visibleCellsCount: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        clearable: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearableIcon: {
            type: StringConstructor;
            default: string;
        };
        closeOnChange: {
            type: BooleanConstructor;
            default: null;
        };
        isOpen: {
            type: BooleanConstructor;
            default: undefined;
        };
        onClose: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        anchor: {
            type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables").MaybeHTMLElementOrSelector;
        };
        role: {
            type: import("vue").PropType<NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>>;
            required: true;
            default: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined;
        };
        trigger: {
            type: import("vue").PropType<NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>>;
            required: true;
            default: import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined;
        };
        target: {
            type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables").MaybeHTMLElementOrSelector;
        };
        hoverOverTimeout: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        hoverOutTimeout: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        autoPlacement: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        stickToEdges: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        keepAnchorWidth: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        verticalScrollOnOverflow: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        onOpen: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-right-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onContent-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-outside": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onFocus-outside": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-dblclick": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        anchorSelector: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        closeOnClickOutside: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnFocusOutside: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnAnchorClick: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        isContentHoverable: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        cursor: {
            type: import("vue").PropType<NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>>;
            required: true;
            default: boolean | import("../va-dropdown/types").CursorAnchor | undefined;
        };
        teleport: {
            type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables").MaybeHTMLElementOrSelector;
        };
        contentClass: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        label: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        onClick: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        color: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        loading: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        background: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        requiredMark: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        inputAriaLabel: {
            type: import("vue").PropType<NonNullable<import("../../composables").TranslationProp | undefined>>;
            required: true;
            default: import("../../composables").TranslationProp | undefined;
        };
        inputAriaLabelledby: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        inputAriaDescribedby: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        "onClick-prepend": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-append": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-prepend-inner": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-append-inner": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-field": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        counter: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        placeholder: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        innerLabel: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
    }>>, {
        label: string;
        error: boolean;
        onClick: (...args: any[]) => any;
        onClose: (...args: any[]) => any;
        anchor: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
        preset: string;
        name: string;
        view: NonNullable<"hours" | "minutes" | "seconds" | undefined>;
        success: boolean;
        ariaLabel: import("../../composables").TranslationProp;
        role: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>;
        disabled: NonNullable<boolean | undefined>;
        readonly: NonNullable<boolean | undefined>;
        errorMessages: string | string[];
        "onUpdate:modelValue": (...args: any[]) => any;
        trigger: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>;
        modelValue: Date;
        stateful: boolean;
        color: string;
        loading: NonNullable<boolean | undefined>;
        target: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
        rules: import("../../composables").ValidationRule<Date>[];
        dirty: boolean;
        errorCount: string | number;
        messages: string | string[];
        immediateValidation: boolean;
        placement: NonNullable<import("../../composables").PlacementWithAlias | undefined>;
        hoverOverTimeout: NonNullable<string | number | undefined>;
        hoverOutTimeout: NonNullable<string | number | undefined>;
        autoPlacement: NonNullable<boolean | undefined>;
        stickToEdges: NonNullable<boolean | undefined>;
        keepAnchorWidth: NonNullable<boolean | undefined>;
        verticalScrollOnOverflow: NonNullable<boolean | undefined>;
        onOpen: (...args: any[]) => any;
        "onAnchor-click": (...args: any[]) => any;
        "onAnchor-right-click": (...args: any[]) => any;
        "onContent-click": (...args: any[]) => any;
        "onClick-outside": (...args: any[]) => any;
        "onFocus-outside": (...args: any[]) => any;
        "onAnchor-dblclick": (...args: any[]) => any;
        anchorSelector: string;
        closeOnClickOutside: NonNullable<boolean | undefined>;
        closeOnFocusOutside: NonNullable<boolean | undefined>;
        closeOnAnchorClick: NonNullable<boolean | undefined>;
        closeOnContentClick: boolean;
        isContentHoverable: NonNullable<boolean | undefined>;
        offset: NonNullable<import("../va-dropdown/types").DropdownOffsetProp | undefined>;
        cursor: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>;
        teleport: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
        contentClass: string;
        background: string;
        closeOnChange: boolean;
        isOpen: boolean;
        requiredMark: NonNullable<boolean | undefined>;
        inputAriaLabel: NonNullable<import("../../composables").TranslationProp | undefined>;
        inputAriaLabelledby: string;
        inputAriaDescribedby: string;
        "onClick-prepend": (...args: any[]) => any;
        "onClick-append": (...args: any[]) => any;
        "onClick-prepend-inner": (...args: any[]) => any;
        "onClick-append-inner": (...args: any[]) => any;
        "onClick-field": (...args: any[]) => any;
        counter: NonNullable<boolean | undefined>;
        placeholder: string;
        innerLabel: NonNullable<boolean | undefined>;
        ariaResetLabel: import("../../composables").TranslationProp;
        clearable: boolean;
        clearableIcon: string;
        clearValue: Date;
        icon: string;
        leftIcon: boolean;
        manualInput: boolean;
        ariaToggleDropdownLabel: import("../../composables").TranslationProp;
        ampm: NonNullable<boolean | undefined>;
        hidePeriodSwitch: NonNullable<boolean | undefined>;
        periodUpdatesModelValue: NonNullable<boolean | undefined>;
        hoursFilter: (h: number) => boolean;
        minutesFilter: (h: number) => boolean;
        secondsFilter: (h: number) => boolean;
        framed: NonNullable<boolean | undefined>;
        cellHeight: NonNullable<string | number | undefined>;
        visibleCellsCount: NonNullable<string | number | undefined>;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        closeOnContentClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        offset: {
            default: () => number[];
            type: import("vue").PropType<NonNullable<import("../va-dropdown/types").DropdownOffsetProp | undefined>>;
            required: true;
        };
        placement: {
            default: string;
            type: import("vue").PropType<NonNullable<import("../../composables").PlacementWithAlias | undefined>>;
            required: true;
        };
        modelValue: {
            type: DateConstructor;
            default: undefined;
        };
        clearValue: {
            type: DateConstructor;
            default: null;
        };
        format: {
            type: import("vue").PropType<(date?: Date | undefined) => string>;
        };
        parse: {
            type: import("vue").PropType<(input: string) => Date>;
        };
        manualInput: {
            type: BooleanConstructor;
            default: boolean;
        };
        leftIcon: {
            type: BooleanConstructor;
            default: boolean;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        ariaLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaResetLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaToggleDropdownLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        rules: {
            type: import("vue").PropType<import("../../composables").ValidationRule<Date>[]>;
            default: () => any;
            required: false;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        name: {
            type: StringConstructor;
            default: undefined;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        errorMessages: {
            type: import("vue").PropType<string | string[]>;
            default: undefined;
        };
        dirty: {
            type: BooleanConstructor;
            default: boolean;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        messages: {
            type: import("vue").PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
        preset: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        view: {
            type: import("vue").PropType<NonNullable<"hours" | "minutes" | "seconds" | undefined>>;
            required: true;
            default: "hours" | "minutes" | "seconds" | undefined;
        };
        disabled: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        readonly: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        "onUpdate:modelValue": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        ampm: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        hidePeriodSwitch: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        periodUpdatesModelValue: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        hoursFilter: {
            type: import("vue").PropType<(h: number) => boolean>;
            required: true;
            default: ((h: number) => boolean) | undefined;
        };
        minutesFilter: {
            type: import("vue").PropType<(h: number) => boolean>;
            required: true;
            default: ((h: number) => boolean) | undefined;
        };
        secondsFilter: {
            type: import("vue").PropType<(h: number) => boolean>;
            required: true;
            default: ((h: number) => boolean) | undefined;
        };
        framed: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        cellHeight: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        visibleCellsCount: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        clearable: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearableIcon: {
            type: StringConstructor;
            default: string;
        };
        closeOnChange: {
            type: BooleanConstructor;
            default: null;
        };
        isOpen: {
            type: BooleanConstructor;
            default: undefined;
        };
        onClose: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        anchor: {
            type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables").MaybeHTMLElementOrSelector;
        };
        role: {
            type: import("vue").PropType<NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>>;
            required: true;
            default: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined;
        };
        trigger: {
            type: import("vue").PropType<NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>>;
            required: true;
            default: import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined;
        };
        target: {
            type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables").MaybeHTMLElementOrSelector;
        };
        hoverOverTimeout: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        hoverOutTimeout: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        autoPlacement: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        stickToEdges: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        keepAnchorWidth: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        verticalScrollOnOverflow: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        onOpen: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-right-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onContent-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-outside": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onFocus-outside": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-dblclick": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        anchorSelector: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        closeOnClickOutside: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnFocusOutside: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnAnchorClick: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        isContentHoverable: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        cursor: {
            type: import("vue").PropType<NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>>;
            required: true;
            default: boolean | import("../va-dropdown/types").CursorAnchor | undefined;
        };
        teleport: {
            type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables").MaybeHTMLElementOrSelector;
        };
        contentClass: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        label: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        onClick: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        color: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        loading: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        background: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        requiredMark: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        inputAriaLabel: {
            type: import("vue").PropType<NonNullable<import("../../composables").TranslationProp | undefined>>;
            required: true;
            default: import("../../composables").TranslationProp | undefined;
        };
        inputAriaLabelledby: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        inputAriaDescribedby: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        "onClick-prepend": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-append": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-prepend-inner": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-append-inner": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-field": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        counter: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        placeholder: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        innerLabel: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
    }>>, {
        isFocused: import("vue").WritableComputedRef<boolean>;
        isValid: import("vue").Ref<boolean>;
        value: import("../../composables").StatefulValue<Date | undefined>;
        isDirty: import("vue").Ref<boolean>;
        isTouched: import("vue").Ref<boolean>;
        focus: () => void;
        blur: () => void;
        reset: () => void;
        withoutValidation: (cb: () => any) => void;
        resetValidation: () => void;
        toggleDropdown: (event: Event | KeyboardEvent) => void;
        showDropdown: (event?: KeyboardEvent | undefined, cancel?: boolean | undefined, prevent?: boolean | undefined) => void;
        hideDropdown: () => void;
    }, {}, {}, {}, {
        label: string;
        error: boolean;
        onClick: (...args: any[]) => any;
        onClose: (...args: any[]) => any;
        anchor: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
        preset: string;
        name: string;
        view: NonNullable<"hours" | "minutes" | "seconds" | undefined>;
        success: boolean;
        ariaLabel: import("../../composables").TranslationProp;
        role: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>;
        disabled: NonNullable<boolean | undefined>;
        readonly: NonNullable<boolean | undefined>;
        errorMessages: string | string[];
        "onUpdate:modelValue": (...args: any[]) => any;
        trigger: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>;
        modelValue: Date;
        stateful: boolean;
        color: string;
        loading: NonNullable<boolean | undefined>;
        target: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
        rules: import("../../composables").ValidationRule<Date>[];
        dirty: boolean;
        errorCount: string | number;
        messages: string | string[];
        immediateValidation: boolean;
        placement: NonNullable<import("../../composables").PlacementWithAlias | undefined>;
        hoverOverTimeout: NonNullable<string | number | undefined>;
        hoverOutTimeout: NonNullable<string | number | undefined>;
        autoPlacement: NonNullable<boolean | undefined>;
        stickToEdges: NonNullable<boolean | undefined>;
        keepAnchorWidth: NonNullable<boolean | undefined>;
        verticalScrollOnOverflow: NonNullable<boolean | undefined>;
        onOpen: (...args: any[]) => any;
        "onAnchor-click": (...args: any[]) => any;
        "onAnchor-right-click": (...args: any[]) => any;
        "onContent-click": (...args: any[]) => any;
        "onClick-outside": (...args: any[]) => any;
        "onFocus-outside": (...args: any[]) => any;
        "onAnchor-dblclick": (...args: any[]) => any;
        anchorSelector: string;
        closeOnClickOutside: NonNullable<boolean | undefined>;
        closeOnFocusOutside: NonNullable<boolean | undefined>;
        closeOnAnchorClick: NonNullable<boolean | undefined>;
        closeOnContentClick: boolean;
        isContentHoverable: NonNullable<boolean | undefined>;
        offset: NonNullable<import("../va-dropdown/types").DropdownOffsetProp | undefined>;
        cursor: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>;
        teleport: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
        contentClass: string;
        background: string;
        closeOnChange: boolean;
        isOpen: boolean;
        requiredMark: NonNullable<boolean | undefined>;
        inputAriaLabel: NonNullable<import("../../composables").TranslationProp | undefined>;
        inputAriaLabelledby: string;
        inputAriaDescribedby: string;
        "onClick-prepend": (...args: any[]) => any;
        "onClick-append": (...args: any[]) => any;
        "onClick-prepend-inner": (...args: any[]) => any;
        "onClick-append-inner": (...args: any[]) => any;
        "onClick-field": (...args: any[]) => any;
        counter: NonNullable<boolean | undefined>;
        placeholder: string;
        innerLabel: NonNullable<boolean | undefined>;
        ariaResetLabel: import("../../composables").TranslationProp;
        clearable: boolean;
        clearableIcon: string;
        clearValue: Date;
        icon: string;
        leftIcon: boolean;
        manualInput: boolean;
        ariaToggleDropdownLabel: import("../../composables").TranslationProp;
        ampm: NonNullable<boolean | undefined>;
        hidePeriodSwitch: NonNullable<boolean | undefined>;
        periodUpdatesModelValue: NonNullable<boolean | undefined>;
        hoursFilter: (h: number) => boolean;
        minutesFilter: (h: number) => boolean;
        secondsFilter: (h: number) => boolean;
        framed: NonNullable<boolean | undefined>;
        cellHeight: NonNullable<string | number | undefined>;
        visibleCellsCount: NonNullable<string | number | undefined>;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    offset: {
        default: () => number[];
        type: import("vue").PropType<NonNullable<import("../va-dropdown/types").DropdownOffsetProp | undefined>>;
        required: true;
    };
    placement: {
        default: string;
        type: import("vue").PropType<NonNullable<import("../../composables").PlacementWithAlias | undefined>>;
        required: true;
    };
    modelValue: {
        type: DateConstructor;
        default: undefined;
    };
    clearValue: {
        type: DateConstructor;
        default: null;
    };
    format: {
        type: import("vue").PropType<(date?: Date | undefined) => string>;
    };
    parse: {
        type: import("vue").PropType<(input: string) => Date>;
    };
    manualInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    leftIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    ariaLabel: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    ariaResetLabel: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    ariaToggleDropdownLabel: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    rules: {
        type: import("vue").PropType<import("../../composables").ValidationRule<Date>[]>;
        default: () => any;
        required: false;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    errorMessages: {
        type: import("vue").PropType<string | string[]>;
        default: undefined;
    };
    dirty: {
        type: BooleanConstructor;
        default: boolean;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    messages: {
        type: import("vue").PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    preset: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    view: {
        type: import("vue").PropType<NonNullable<"hours" | "minutes" | "seconds" | undefined>>;
        required: true;
        default: "hours" | "minutes" | "seconds" | undefined;
    };
    disabled: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    readonly: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    "onUpdate:modelValue": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    ampm: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    hidePeriodSwitch: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    periodUpdatesModelValue: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    hoursFilter: {
        type: import("vue").PropType<(h: number) => boolean>;
        required: true;
        default: ((h: number) => boolean) | undefined;
    };
    minutesFilter: {
        type: import("vue").PropType<(h: number) => boolean>;
        required: true;
        default: ((h: number) => boolean) | undefined;
    };
    secondsFilter: {
        type: import("vue").PropType<(h: number) => boolean>;
        required: true;
        default: ((h: number) => boolean) | undefined;
    };
    framed: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    cellHeight: {
        type: import("vue").PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    visibleCellsCount: {
        type: import("vue").PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
    closeOnChange: {
        type: BooleanConstructor;
        default: null;
    };
    isOpen: {
        type: BooleanConstructor;
        default: undefined;
    };
    onClose: {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    anchor: {
        type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables").MaybeHTMLElementOrSelector;
    };
    role: {
        type: import("vue").PropType<NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>>;
        required: true;
        default: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined;
    };
    trigger: {
        type: import("vue").PropType<NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>>;
        required: true;
        default: import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined;
    };
    target: {
        type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables").MaybeHTMLElementOrSelector;
    };
    hoverOverTimeout: {
        type: import("vue").PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    hoverOutTimeout: {
        type: import("vue").PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    autoPlacement: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    stickToEdges: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    keepAnchorWidth: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    verticalScrollOnOverflow: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    onOpen: {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onAnchor-click": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onAnchor-right-click": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onContent-click": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-outside": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onFocus-outside": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onAnchor-dblclick": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    anchorSelector: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    closeOnClickOutside: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    closeOnFocusOutside: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    closeOnAnchorClick: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    isContentHoverable: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    cursor: {
        type: import("vue").PropType<NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>>;
        required: true;
        default: boolean | import("../va-dropdown/types").CursorAnchor | undefined;
    };
    teleport: {
        type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables").MaybeHTMLElementOrSelector;
    };
    contentClass: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    label: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    onClick: {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    color: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    loading: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    background: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    requiredMark: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    inputAriaLabel: {
        type: import("vue").PropType<NonNullable<import("../../composables").TranslationProp | undefined>>;
        required: true;
        default: import("../../composables").TranslationProp | undefined;
    };
    inputAriaLabelledby: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    inputAriaDescribedby: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    "onClick-prepend": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-append": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-prepend-inner": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-append-inner": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-field": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    counter: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    placeholder: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    innerLabel: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
}>>, {
    isFocused: import("vue").WritableComputedRef<boolean>;
    isValid: import("vue").Ref<boolean>;
    value: import("../../composables").StatefulValue<Date | undefined>;
    isDirty: import("vue").Ref<boolean>;
    isTouched: import("vue").Ref<boolean>;
    focus: () => void;
    blur: () => void;
    reset: () => void;
    withoutValidation: (cb: () => any) => void;
    resetValidation: () => void;
    toggleDropdown: (event: Event | KeyboardEvent) => void;
    showDropdown: (event?: KeyboardEvent | undefined, cancel?: boolean | undefined, prevent?: boolean | undefined) => void;
    hideDropdown: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    [x: string]: (...args: any[]) => void;
}, string, {
    label: string;
    error: boolean;
    onClick: (...args: any[]) => any;
    onClose: (...args: any[]) => any;
    anchor: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
    preset: string;
    name: string;
    view: NonNullable<"hours" | "minutes" | "seconds" | undefined>;
    success: boolean;
    ariaLabel: import("../../composables").TranslationProp;
    role: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>;
    disabled: NonNullable<boolean | undefined>;
    readonly: NonNullable<boolean | undefined>;
    errorMessages: string | string[];
    "onUpdate:modelValue": (...args: any[]) => any;
    trigger: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>;
    modelValue: Date;
    stateful: boolean;
    color: string;
    loading: NonNullable<boolean | undefined>;
    target: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
    rules: import("../../composables").ValidationRule<Date>[];
    dirty: boolean;
    errorCount: string | number;
    messages: string | string[];
    immediateValidation: boolean;
    placement: NonNullable<import("../../composables").PlacementWithAlias | undefined>;
    hoverOverTimeout: NonNullable<string | number | undefined>;
    hoverOutTimeout: NonNullable<string | number | undefined>;
    autoPlacement: NonNullable<boolean | undefined>;
    stickToEdges: NonNullable<boolean | undefined>;
    keepAnchorWidth: NonNullable<boolean | undefined>;
    verticalScrollOnOverflow: NonNullable<boolean | undefined>;
    onOpen: (...args: any[]) => any;
    "onAnchor-click": (...args: any[]) => any;
    "onAnchor-right-click": (...args: any[]) => any;
    "onContent-click": (...args: any[]) => any;
    "onClick-outside": (...args: any[]) => any;
    "onFocus-outside": (...args: any[]) => any;
    "onAnchor-dblclick": (...args: any[]) => any;
    anchorSelector: string;
    closeOnClickOutside: NonNullable<boolean | undefined>;
    closeOnFocusOutside: NonNullable<boolean | undefined>;
    closeOnAnchorClick: NonNullable<boolean | undefined>;
    closeOnContentClick: boolean;
    isContentHoverable: NonNullable<boolean | undefined>;
    offset: NonNullable<import("../va-dropdown/types").DropdownOffsetProp | undefined>;
    cursor: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>;
    teleport: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
    contentClass: string;
    background: string;
    closeOnChange: boolean;
    isOpen: boolean;
    requiredMark: NonNullable<boolean | undefined>;
    inputAriaLabel: NonNullable<import("../../composables").TranslationProp | undefined>;
    inputAriaLabelledby: string;
    inputAriaDescribedby: string;
    "onClick-prepend": (...args: any[]) => any;
    "onClick-append": (...args: any[]) => any;
    "onClick-prepend-inner": (...args: any[]) => any;
    "onClick-append-inner": (...args: any[]) => any;
    "onClick-field": (...args: any[]) => any;
    counter: NonNullable<boolean | undefined>;
    placeholder: string;
    innerLabel: NonNullable<boolean | undefined>;
    ariaResetLabel: import("../../composables").TranslationProp;
    clearable: boolean;
    clearableIcon: string;
    clearValue: Date;
    icon: string;
    leftIcon: boolean;
    manualInput: boolean;
    ariaToggleDropdownLabel: import("../../composables").TranslationProp;
    ampm: NonNullable<boolean | undefined>;
    hidePeriodSwitch: NonNullable<boolean | undefined>;
    periodUpdatesModelValue: NonNullable<boolean | undefined>;
    hoursFilter: (h: number) => boolean;
    minutesFilter: (h: number) => boolean;
    secondsFilter: (h: number) => boolean;
    framed: NonNullable<boolean | undefined>;
    cellHeight: NonNullable<string | number | undefined>;
    visibleCellsCount: NonNullable<string | number | undefined>;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: Partial<Record<string, (_: any) => any>> & {
        prependInner?(_: any): any;
    };
});
