import { PropType } from 'vue';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    items: {
        type: PropType<string[] | number[]>;
        default: () => never[];
    };
    activeItemIndex: {
        type: NumberConstructor;
        default: number;
    };
    cellHeight: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
}, {
    focus: () => void;
    blur: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    blur: (...args: any[]) => void;
    focus: (...args: any[]) => void;
    "item-selected": (...args: any[]) => void;
    "update:activeItemIndex": (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    items: {
        type: PropType<string[] | number[]>;
        default: () => never[];
    };
    activeItemIndex: {
        type: NumberConstructor;
        default: number;
    };
    cellHeight: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
}>> & {
    onBlur?: ((...args: any[]) => any) | undefined;
    onFocus?: ((...args: any[]) => any) | undefined;
    "onItem-selected"?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeItemIndex"?: ((...args: any[]) => any) | undefined;
}, {
    items: string[] | number[];
    cellHeight: string | number;
    activeItemIndex: number;
}, {}>, {
    cell?(_: {
        item: string | number;
        index: number;
        activeItemIndex: number;
        items: string[] | number[];
        formattedItem: string;
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
