export declare const VaTreeNode: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        node: {
            type: import("vue").PropType<import("../..").TreeNode>;
            required: true;
        };
    }>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        node: {
            type: import("vue").PropType<import("../..").TreeNode>;
            required: true;
        };
    }>>, {}, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        node: {
            type: import("vue").PropType<import("../..").TreeNode>;
            required: true;
        };
    }>>, {}, {}, {}, {}, {}>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    node: {
        type: import("vue").PropType<import("../..").TreeNode>;
        required: true;
    };
}>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: Partial<Record<NonNullable<string | number>, (_: any) => any>> & {
        "icon-toggle"?(_: {
            [x: string]: any;
            id: string | number;
            level?: number | undefined;
            checked?: boolean | null | undefined;
            disabled?: boolean | undefined;
            expanded?: boolean | undefined;
            hasChildren?: boolean | undefined;
            matchesFilter?: boolean | undefined;
            indeterminate?: boolean | undefined;
        }): any;
        checkbox?(_: {
            [x: string]: any;
            id: string | number;
            level?: number | undefined;
            checked?: boolean | null | undefined;
            disabled?: boolean | undefined;
            expanded?: boolean | undefined;
            hasChildren?: boolean | undefined;
            matchesFilter?: boolean | undefined;
            indeterminate?: boolean | undefined;
        }): any;
        icon?(_: {
            [x: string]: any;
            id: string | number;
            level?: number | undefined;
            checked?: boolean | null | undefined;
            disabled?: boolean | undefined;
            expanded?: boolean | undefined;
            hasChildren?: boolean | undefined;
            matchesFilter?: boolean | undefined;
            indeterminate?: boolean | undefined;
        }): any;
        content?(_: {
            [x: string]: any;
            id: string | number;
            level?: number | undefined;
            checked?: boolean | null | undefined;
            disabled?: boolean | undefined;
            expanded?: boolean | undefined;
            hasChildren?: boolean | undefined;
            matchesFilter?: boolean | undefined;
            indeterminate?: boolean | undefined;
        }): any;
    };
});
