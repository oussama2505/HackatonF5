import { ComputedRef } from 'vue';
declare const _default: <Item>(__VLS_props: {
    table?: boolean | undefined;
    disabled?: boolean | undefined;
    trackBy?: string | number | ((item: any[] | Record<string, any>) => string | number) | undefined;
    horizontal?: boolean | undefined;
    items?: Item[] | undefined;
    "onScroll:bottom"?: ((...args: any[]) => any) | undefined;
    bench?: string | number | undefined;
    itemSize?: string | number | undefined;
    wrapperSize?: string | number | undefined;
} & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, __VLS_ctx?: {
    slots: {
        content?(_: {
            containerStyleComputed: {
                [x: string]: string | undefined;
            };
            listStyleComputed: {
                transform: string;
            };
            renderBuffer: Item[];
            uniqueKey: (item: Array<any> | Record<string, any>, index: number, defaultValue?: any) => any;
            currentListOffset: number;
        }): any;
        default?(_: {
            item: Item;
            index: number;
        }): any;
    };
    attrs: any;
    emit: (event: "scroll:bottom", ...args: any[]) => void;
} | undefined, __VLS_expose?: ((exposed: import("vue").ShallowUnwrapRef<{
    scrollToAttribute: ComputedRef<"left" | "top">;
    virtualScrollTo: (index: number) => void;
}>) => void) | undefined, __VLS_setup?: Promise<{
    props: {
        table?: boolean | undefined;
        disabled?: boolean | undefined;
        trackBy?: string | number | ((item: any[] | Record<string, any>) => string | number) | undefined;
        horizontal?: boolean | undefined;
        items?: Item[] | undefined;
        "onScroll:bottom"?: ((...args: any[]) => any) | undefined;
        bench?: string | number | undefined;
        itemSize?: string | number | undefined;
        wrapperSize?: string | number | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps;
    expose(exposed: import("vue").ShallowUnwrapRef<{
        scrollToAttribute: ComputedRef<"left" | "top">;
        virtualScrollTo: (index: number) => void;
    }>): void;
    attrs: any;
    slots: {
        content?(_: {
            containerStyleComputed: {
                [x: string]: string | undefined;
            };
            listStyleComputed: {
                transform: string;
            };
            renderBuffer: Item[];
            uniqueKey: (item: Array<any> | Record<string, any>, index: number, defaultValue?: any) => any;
            currentListOffset: number;
        }): any;
        default?(_: {
            item: Item;
            index: number;
        }): any;
    };
    emit: (event: "scroll:bottom", ...args: any[]) => void;
}>) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}> & {
    __ctx?: {
        props: {
            table?: boolean | undefined;
            disabled?: boolean | undefined;
            trackBy?: string | number | ((item: any[] | Record<string, any>) => string | number) | undefined;
            horizontal?: boolean | undefined;
            items?: Item[] | undefined;
            "onScroll:bottom"?: ((...args: any[]) => any) | undefined;
            bench?: string | number | undefined;
            itemSize?: string | number | undefined;
            wrapperSize?: string | number | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps;
        expose(exposed: import("vue").ShallowUnwrapRef<{
            scrollToAttribute: ComputedRef<"left" | "top">;
            virtualScrollTo: (index: number) => void;
        }>): void;
        attrs: any;
        slots: {
            content?(_: {
                containerStyleComputed: {
                    [x: string]: string | undefined;
                };
                listStyleComputed: {
                    transform: string;
                };
                renderBuffer: Item[];
                uniqueKey: (item: Array<any> | Record<string, any>, index: number, defaultValue?: any) => any;
                currentListOffset: number;
            }): any;
            default?(_: {
                item: Item;
                index: number;
            }): any;
        };
        emit: (event: "scroll:bottom", ...args: any[]) => void;
    } | undefined;
};
export default _default;
type __VLS_OmitKeepDiscriminatedUnion<T, K extends keyof any> = T extends any ? Pick<T, Exclude<keyof T, K>> : never;
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
