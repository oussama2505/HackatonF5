import { defineComponent, computed, toRef, openBlock, createElementBlock, normalizeStyle, renderSlot } from "vue";
import { u as useFixedBarProps, a as useFixedBar } from "../../composables/useFixedBar.js";
import { s as setupScroll } from "../../composables/useScroll.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { u as useColors } from "../../composables/useColors.js";
import { u as useTextColor } from "../../composables/useTextColor.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaAppBar"
  },
  __name: "VaAppBar",
  props: {
    ...useFixedBarProps,
    ...useComponentPresetProp,
    gradient: { type: Boolean, default: false },
    target: { type: [Object, String], default: "" },
    shadowOnScroll: { type: Boolean, default: false },
    shadowColor: { type: String, default: "" },
    color: { type: String, default: "primary" }
  },
  setup(__props) {
    const props = __props;
    const { scrollRoot, isScrolledDown } = setupScroll(props.fixed, props.target);
    const { fixedBarStyleComputed } = useFixedBar(props, isScrolledDown);
    const { getColor, getGradientBackground, getBoxShadowColor } = useColors();
    const colorComputed = computed(() => getColor(props.color));
    const { textColorComputed } = useTextColor(toRef(props, "color"));
    const showShadowComputed = computed(() => isScrolledDown.value ? !!props.shadowOnScroll : false);
    const shadowColorComputed = computed(() => getColor(props.shadowColor, colorComputed.value));
    const computedShadow = computed(() => {
      const shadow = getBoxShadowColor(props.shadowColor ? shadowColorComputed.value : colorComputed.value);
      return showShadowComputed.value ? `var(--va-app-bar-shadow) ${shadow}` : "";
    });
    const computedStyle = computed(() => ({
      ...fixedBarStyleComputed.value,
      background: props.gradient ? getGradientBackground(colorComputed.value) : colorComputed.value,
      boxShadow: computedShadow.value,
      color: textColorComputed.value
    }));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("header", {
        ref_key: "scrollRoot",
        ref: scrollRoot,
        role: "toolbar",
        class: "va-app-bar",
        style: normalizeStyle(computedStyle.value)
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 4);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaAppBar.vue_vue_type_script_setup_true_lang.js.map
