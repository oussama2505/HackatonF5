import { defineComponent, computed, useSlots, openBlock, createElementBlock, normalizeClass, unref, createBlock, mergeProps, isRef, withCtx, createVNode, toHandlers, renderSlot, createTextVNode, toDisplayString, normalizeProps, createCommentVNode, withKeys, withModifiers } from "vue";
import { o as omit } from "../../../vendor.js";
import { V as VaButton } from "../va-button/index.js";
import { V as VaButtonGroup } from "../va-button-group/index.js";
import { V as VaDropdown } from "../va-dropdown/index.js";
import { V as VaDropdownContent } from "../va-dropdown/components/VaDropdownContent/index.js";
import { e as extractComponentProps } from "../../utils/component-options/extract-component-options.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { u as useStatefulProps, b as useStateful } from "../../composables/useStateful.js";
import { a as usePlacementAliasesProps } from "../../composables/usePlacementAliases.js";
import { a as useTranslationProp, u as useTranslation } from "../../composables/useTranslation.js";
import { u as useBem } from "../../composables/useBem.js";
import { f as filterComponentProps } from "../../utils/component-options/filter-props.js";
import { u as useEmitProxy } from "../../composables/useEmitProxy.js";
const { createEmits, createVOnListeners: createListeners } = useEmitProxy(["click"]);
const { createEmits: createMainButtonEmits, createVOnListeners: createMainButtonListeners } = useEmitProxy(
  [{ listen: "click", emit: "main-button-click" }]
);
const VaButtonProps = omit(extractComponentProps(VaButton), ["iconRight", "block"]);
const VaDropdownProps = extractComponentProps(VaDropdown);
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaButtonDropdown"
  },
  __name: "VaButtonDropdown",
  props: {
    ...useComponentPresetProp,
    ...VaButtonProps,
    ...VaDropdownProps,
    ...useStatefulProps,
    ...usePlacementAliasesProps,
    modelValue: { type: Boolean, default: false },
    stateful: { type: Boolean, default: true },
    icon: { type: String, default: "va-arrow-down" },
    openedIcon: { type: String, default: "va-arrow-up" },
    hideIcon: { type: Boolean, default: false },
    leftIcon: { type: Boolean, default: false },
    iconColor: { type: String, default: "" },
    disabled: { type: Boolean, default: false },
    disableButton: { type: Boolean, default: false },
    disableDropdown: { type: Boolean, default: false },
    offset: { type: [Number, Array], default: 2 },
    keepAnchorWidth: { type: Boolean, default: false },
    closeOnContentClick: { type: Boolean, default: true },
    split: { type: Boolean },
    splitTo: { type: String, default: "" },
    splitHref: { type: String, default: "" },
    loading: { type: Boolean, default: false },
    label: { type: String },
    ariaLabel: useTranslationProp("$t:toggleDropdown")
  },
  emits: ["update:modelValue", ...createEmits(), ...createMainButtonEmits()],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const { valueComputed } = useStateful(props, emit);
    const computedIcon = computed(() => valueComputed.value ? props.openedIcon : props.icon);
    const computedClass = useBem("va-button-dropdown", () => ({
      split: props.split
    }));
    const slots = useSlots();
    const computedButtonIcons = computed(() => {
      if (props.hideIcon) {
        return {};
      }
      const propName = (props.label || slots.label) && !props.leftIcon ? "icon-right" : "icon";
      return { [propName]: computedIcon.value };
    });
    const buttonPropsFiltered = computed(() => {
      let ignoredProps = ["to", "href", "loading", "icon"];
      const presetProps = [
        "plain",
        "textOpacity",
        "backgroundOpacity",
        "hoverOpacity",
        "hoverBehavior",
        "hoverOpacity",
        "pressedOpacity",
        "pressedBehavior",
        "pressedOpacity"
      ];
      if (props.preset) {
        ignoredProps = [...ignoredProps, ...presetProps];
      }
      const filteredProps = omit(VaButtonProps, ignoredProps);
      return Object.keys(filteredProps);
    });
    const buttonPropsComputed = computed(
      () => Object.entries(props).filter(([key, _]) => buttonPropsFiltered.value.includes(key)).reduce((acc, [key, value]) => {
        Object.assign(acc, { [key]: value });
        return acc;
      }, {})
    );
    const computedMainButtonProps = computed(() => ({
      to: props.splitTo,
      href: props.splitHref,
      loading: props.loading
    }));
    const hideDropdown = () => {
      valueComputed.value = false;
    };
    const vaDropdownProps = filterComponentProps(VaDropdownProps);
    const listeners = createListeners(emit);
    const mainButtonListeners = createMainButtonListeners(emit);
    const { t, tp } = useTranslation();
    __expose({
      hideDropdown
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(["va-button-dropdown", unref(computedClass)])
      }, [
        !_ctx.$props.split ? (openBlock(), createBlock(unref(VaDropdown), mergeProps({ key: 0 }, unref(vaDropdownProps), {
          modelValue: unref(valueComputed),
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => isRef(valueComputed) ? valueComputed.value = $event : null),
          disabled: _ctx.$props.disabled || _ctx.$props.disableDropdown
        }), {
          anchor: withCtx(() => [
            createVNode(unref(VaButton), mergeProps({
              "aria-label": unref(tp)(_ctx.$props.ariaLabel)
            }, { ...computedButtonIcons.value, ...buttonPropsComputed.value }, toHandlers(unref(listeners))), {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "label", {}, () => [
                  createTextVNode(toDisplayString(__props.label), 1)
                ])
              ]),
              _: 3
            }, 16, ["aria-label"])
          ]),
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "content", {}, () => [
              createVNode(unref(VaDropdownContent), null, {
                default: withCtx(() => [
                  renderSlot(_ctx.$slots, "default")
                ]),
                _: 3
              })
            ])
          ]),
          _: 3
        }, 16, ["modelValue", "disabled"])) : (openBlock(), createBlock(unref(VaButtonGroup), normalizeProps(mergeProps({ key: 1 }, buttonPropsComputed.value)), {
          default: withCtx(() => [
            !_ctx.$props.leftIcon ? (openBlock(), createBlock(unref(VaButton), mergeProps({
              key: 0,
              disabled: _ctx.$props.disabled || _ctx.$props.disableButton
            }, computedMainButtonProps.value, toHandlers(unref(mainButtonListeners))), {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "label", {}, () => [
                  createTextVNode(toDisplayString(__props.label), 1)
                ])
              ]),
              _: 3
            }, 16, ["disabled"])) : createCommentVNode("", true),
            createVNode(unref(VaDropdown), mergeProps(unref(vaDropdownProps), {
              modelValue: unref(valueComputed),
              "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => isRef(valueComputed) ? valueComputed.value = $event : null),
              disabled: _ctx.$props.disabled || _ctx.$props.disableDropdown,
              teleport: _ctx.$el
            }), {
              anchor: withCtx(() => [
                createVNode(unref(VaButton), mergeProps({
                  "aria-label": _ctx.$props.ariaLabel || unref(t)("toggleDropdown"),
                  disabled: _ctx.$props.disabled || _ctx.$props.disableDropdown,
                  icon: computedIcon.value,
                  "icon-color": _ctx.$props.iconColor
                }, toHandlers(unref(listeners)), {
                  onKeydown: withKeys(withModifiers(hideDropdown, ["prevent"]), ["esc"])
                }), null, 16, ["aria-label", "disabled", "icon", "icon-color", "onKeydown"])
              ]),
              default: withCtx(() => [
                createVNode(unref(VaDropdownContent), null, {
                  default: withCtx(() => [
                    renderSlot(_ctx.$slots, "default")
                  ]),
                  _: 3
                })
              ]),
              _: 3
            }, 16, ["modelValue", "disabled", "teleport"]),
            _ctx.$props.leftIcon ? (openBlock(), createBlock(unref(VaButton), mergeProps({
              key: 1,
              disabled: _ctx.$props.disabled || _ctx.$props.disableButton
            }, computedMainButtonProps.value, toHandlers(unref(mainButtonListeners))), {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "label", {}, () => [
                  createTextVNode(toDisplayString(__props.label), 1)
                ])
              ]),
              _: 3
            }, 16, ["disabled"])) : createCommentVNode("", true)
          ]),
          _: 3
        }, 16))
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaButtonDropdown.vue_vue_type_script_setup_true_lang.js.map
