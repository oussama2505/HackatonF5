import { defineComponent, useCssVars, computed, openBlock, createElementBlock, normalizeClass, unref, createVNode, withCtx, renderSlot } from "vue";
import { o as omit } from "../../../vendor.js";
import { V as VaButton } from "../va-button/index.js";
import { _ as _sfc_main$1 } from "../va-config/VaConfig.vue_vue_type_script_setup_true_lang.js";
import { e as extractComponentProps } from "../../utils/component-options/extract-component-options.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { u as useColors } from "../../composables/useColors.js";
import { u as useTextColor } from "../../composables/useTextColor.js";
import { f as filterComponentProps } from "../../utils/component-options/filter-props.js";
import { u as useBem } from "../../composables/useBem.js";
const VaButtonProps = omit(extractComponentProps(VaButton), ["block", "gradient"]);
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaButtonGroup"
  },
  __name: "VaButtonGroup",
  props: {
    ...VaButtonProps,
    ...useComponentPresetProp,
    grow: { type: Boolean, default: false },
    gradient: { type: Boolean, default: false }
  },
  setup(__props) {
    useCssVars((_ctx) => ({
      "094c61f0": backgroundColor.value
    }));
    const props = __props;
    const { getColor, getGradientBackground } = useColors();
    const colorComputed = computed(() => getColor(props.color));
    const { textColorComputed } = useTextColor(colorComputed);
    const filteredProps = filterComponentProps(VaButtonProps);
    const buttonConfig = computed(() => ({
      VaButton: {
        ...filteredProps.value,
        ...props.gradient && {
          color: "#00000000",
          textColor: textColorComputed.value
        }
      }
    }));
    const computedClass = useBem("va-button-group", () => ({
      square: !props.round,
      grow: props.grow,
      small: props.size === "small",
      large: props.size === "large"
    }));
    const backgroundColor = computed(
      () => props.gradient ? getGradientBackground(colorComputed.value) : "transparent"
    );
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(["va-button-group", unref(computedClass)])
      }, [
        createVNode(unref(_sfc_main$1), { components: buttonConfig.value }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 8, ["components"])
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaButtonGroup.vue_vue_type_script_setup_true_lang.js.map
