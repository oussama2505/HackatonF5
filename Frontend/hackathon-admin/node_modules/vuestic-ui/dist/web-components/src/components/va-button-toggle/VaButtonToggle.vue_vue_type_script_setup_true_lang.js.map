{"version":3,"file":"VaButtonToggle.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../src/components/va-button-toggle/VaButtonToggle.vue"],"sourcesContent":["<template>\n  <va-button-group\n    class=\"va-button-toggle\"\n    v-bind=\"buttonGroupPropsComputed\"\n  >\n    <va-button\n      v-for=\"option in options\"\n      :key=\"getTrackBy(option)\"\n      :aria-pressed=\"isToggled(option)\"\n      v-bind.prop=\"getButtonProps(option)\"\n      @click=\"changeValue(option)\"\n    >\n      {{ getText(option) }}\n    </va-button>\n  </va-button-group>\n</template>\n\n<script lang=\"ts\">\nimport { PropType, computed } from 'vue'\nimport { extractComponentProps, filterComponentProps } from '../../utils/component-options'\nimport { useComponentPresetProp, useColors, useSelectableList, useSelectableListProps } from '../../composables'\n\nimport { VaButton } from '../va-button'\nimport { VaButtonGroup } from '../va-button-group'\n\nimport type { ButtonOption } from './types'\nimport type { StringOrFunction } from '../../composables'\n\nconst VaButtonGroupProps = extractComponentProps(VaButtonGroup)\n</script>\n\n<script lang=\"ts\" setup>\n\ndefineOptions({\n  name: 'VaButtonToggle',\n})\n\nconst props = defineProps({\n  ...VaButtonGroupProps,\n  ...useComponentPresetProp,\n  ...useSelectableListProps,\n  modelValue: { type: [String, Number, Boolean], default: '' },\n  options: {\n    type: Array as PropType<ButtonOption[]>,\n    required: true,\n  },\n  activeButtonTextColor: { type: String },\n  toggleColor: { type: String, default: '' },\n\n  textBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'label' },\n  valueBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'value' },\n})\n\nconst emit = defineEmits(['update:modelValue'])\n\nconst { getText, getTrackBy } = useSelectableList(props)\nconst { getColor, shiftHSLAColor } = useColors()\nconst colorComputed = computed(() => getColor(props.color))\n\nconst isToggled = (value: any) => getTrackBy(value) === props.modelValue\n\nconst activeButtonColor = computed(() => {\n  if (props.toggleColor) { return getColor(props.toggleColor) }\n  return shiftHSLAColor(colorComputed.value, { l: props.plain ? -16 : -6 })\n})\n\nconst activeButtonBackgroundOpacityComputed = computed(() => {\n  if (!props.preset || props.preset === 'default') { return {} }\n  return { backgroundOpacity: props.pressedOpacity }\n})\n\nconst activeButtonPropsComputed = computed(() => ({\n  color: activeButtonColor.value,\n  textColor: props.activeButtonTextColor,\n  ...activeButtonBackgroundOpacityComputed.value,\n}))\n\nconst getButtonProps = (option: ButtonOption = {} as ButtonOption) => {\n  const iconsProps = { icon: option.icon, iconRight: option.iconRight }\n\n  if (!isToggled(option)) { return iconsProps }\n  return {\n    ...(isToggled(option) && activeButtonPropsComputed.value),\n    ...iconsProps,\n  }\n}\n\nconst buttonGroupPropsComputed = filterComponentProps(VaButtonGroupProps)\n\nconst changeValue = (value: any) => emit('update:modelValue', getTrackBy(value))\n</script>\n\n<style lang=\"scss\">\n@import '../../styles/resources';\n\n.va-button-toggle {\n  .va-button {\n    @include keyboard-focus-outline($offset: -2px);\n\n    height: auto;\n  }\n}\n</style>\n"],"names":[],"mappings":";;;;;;;;AA4BA,MAAM,qBAAqB,sBAAsB,aAAa;;;;;;;;;;;;;;;;;;;;;;AAS9D,UAAM,QAAQ;AAgBd,UAAM,OAAO;AAEb,UAAM,EAAE,SAAS,WAAW,IAAI,kBAAkB,KAAK;AACvD,UAAM,EAAE,UAAU,eAAe,IAAI,UAAU;AAC/C,UAAM,gBAAgB,SAAS,MAAM,SAAS,MAAM,KAAK,CAAC;AAE1D,UAAM,YAAY,CAAC,UAAe,WAAW,KAAK,MAAM,MAAM;AAExD,UAAA,oBAAoB,SAAS,MAAM;AACvC,UAAI,MAAM,aAAa;AAAS,eAAA,SAAS,MAAM,WAAW;AAAA,MAAE;AACrD,aAAA,eAAe,cAAc,OAAO,EAAE,GAAG,MAAM,QAAQ,MAAM,GAAI,CAAA;AAAA,IAAA,CACzE;AAEK,UAAA,wCAAwC,SAAS,MAAM;AAC3D,UAAI,CAAC,MAAM,UAAU,MAAM,WAAW,WAAW;AAAE,eAAO;MAAG;AACtD,aAAA,EAAE,mBAAmB,MAAM;IAAe,CAClD;AAEK,UAAA,4BAA4B,SAAS,OAAO;AAAA,MAChD,OAAO,kBAAkB;AAAA,MACzB,WAAW,MAAM;AAAA,MACjB,GAAG,sCAAsC;AAAA,IACzC,EAAA;AAEF,UAAM,iBAAiB,CAAC,SAAuB,OAAuB;AACpE,YAAM,aAAa,EAAE,MAAM,OAAO,MAAM,WAAW,OAAO;AAEtD,UAAA,CAAC,UAAU,MAAM,GAAG;AAAS,eAAA;AAAA,MAAW;AACrC,aAAA;AAAA,QACL,GAAI,UAAU,MAAM,KAAK,0BAA0B;AAAA,QACnD,GAAG;AAAA,MAAA;AAAA,IACL;AAGI,UAAA,2BAA2B,qBAAqB,kBAAkB;AAExE,UAAM,cAAc,CAAC,UAAe,KAAK,qBAAqB,WAAW,KAAK,CAAC;;;;;;;;;;;;;;;;;;;;;;;"}