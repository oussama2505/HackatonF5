import { defineComponent, useCssVars, computed, openBlock, createBlock, resolveDynamicComponent, unref, normalizeClass, normalizeStyle, withCtx, renderSlot } from "vue";
import { p as pick } from "../../../vendor.js";
import { g as getGradientBackground } from "../../services/color/utils.js";
import { u as useRouterLinkProps, a as useRouterLink } from "../../composables/useRouterLink.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { u as useColors } from "../../composables/useColors.js";
import { u as useTextColor } from "../../composables/useTextColor.js";
import { u as useBem } from "../../composables/useBem.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaCard"
  },
  __name: "VaCard",
  props: {
    ...useRouterLinkProps,
    ...useComponentPresetProp,
    tag: { type: String, default: "div" },
    square: { type: Boolean, default: false },
    outlined: { type: Boolean, default: false },
    bordered: { type: Boolean, default: true },
    disabled: { type: Boolean, default: false },
    href: { type: String, default: "" },
    target: { type: String, default: "" },
    stripe: { type: Boolean, default: false },
    stripeColor: { type: String, default: "" },
    gradient: { type: Boolean, default: false },
    textColor: { type: String },
    color: { type: String, default: "background-secondary" }
  },
  setup(__props) {
    useCssVars((_ctx) => ({
      "790ac25a": stripeColorComputed.value
    }));
    const props = __props;
    const { getColor } = useColors();
    const { isLinkTag, tagComputed, hrefComputed } = useRouterLink(props);
    const { textColorComputed } = useTextColor(computed(() => getColor(props.color)));
    const stripeColorComputed = computed(() => getColor(props.stripeColor));
    const classComputed = useBem("va-card", () => ({
      ...pick(props, ["square", "outlined", "disabled", "stripe"]),
      noBorder: !props.bordered,
      link: isLinkTag.value
    }));
    const cardStyles = computed(() => {
      const background = props.gradient && props.color ? getGradientBackground(getColor(props.color)) : getColor(props.color);
      return {
        background,
        color: textColorComputed.value
      };
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(unref(tagComputed)), {
        class: normalizeClass(["va-card", unref(classComputed)]),
        style: normalizeStyle(cardStyles.value),
        href: unref(hrefComputed),
        target: __props.target,
        to: _ctx.to,
        replace: _ctx.replace,
        exact: _ctx.exact,
        "active-class": _ctx.activeClass,
        "exact-active-class": _ctx.exactActiveClass
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class", "style", "href", "target", "to", "replace", "exact", "active-class", "exact-active-class"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaCard.vue_vue_type_script_setup_true_lang.js.map
