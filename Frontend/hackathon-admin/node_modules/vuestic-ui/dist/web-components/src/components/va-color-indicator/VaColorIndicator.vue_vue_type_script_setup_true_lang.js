import { defineComponent, useCssVars, computed, openBlock, createElementBlock, mergeProps, withKeys, toHandlers, unref, createElementVNode, normalizeStyle } from "vue";
import { u as useStatefulProps, a as useStatefulEmits, b as useStateful } from "../../composables/useStateful.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { u as useColors } from "../../composables/useColors.js";
import { u as useKeyboardOnlyFocus } from "../../composables/useKeyboardOnlyFocus.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaColorIndicator"
  },
  __name: "VaColorIndicator",
  props: {
    ...useStatefulProps,
    ...useComponentPresetProp,
    modelValue: { type: Boolean, default: null },
    color: { type: String, default: "" },
    square: { type: Boolean, default: false },
    size: { type: String, default: "1rem" }
  },
  emits: [...useStatefulEmits],
  setup(__props, { emit: __emit }) {
    useCssVars((_ctx) => ({
      "1fba77fa": borderRadiusComputed.value
    }));
    const props = __props;
    const emit = __emit;
    const { valueComputed } = useStateful(props, emit);
    const { getColor } = useColors();
    const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus();
    const colorComputed = computed(() => getColor(props.color));
    const borderRadiusComputed = computed(() => props.square ? "0px" : "50%");
    const computedStyle = computed(() => ({
      backgroundColor: colorComputed.value,
      height: props.size,
      width: props.size
    }));
    const computedClass = computed(() => ({
      "va-color-indicator--selected": valueComputed.value,
      "va-color-indicator--on-keyboard-focus": hasKeyboardFocus.value
    }));
    const toggleModelValue = () => {
      valueComputed.value = !valueComputed.value;
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", mergeProps({
        class: ["va-color-indicator", computedClass.value],
        style: computedStyle.value,
        onClick: toggleModelValue,
        onKeydown: [
          withKeys(toggleModelValue, ["enter"]),
          withKeys(toggleModelValue, ["space"])
        ]
      }, toHandlers(unref(keyboardFocusListeners), true)), [
        createElementVNode("div", {
          class: "va-color-indicator__core",
          style: normalizeStyle(computedStyle.value)
        }, null, 4)
      ], 16);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaColorIndicator.vue_vue_type_script_setup_true_lang.js.map
