import { defineComponent, shallowRef, computed, openBlock, createElementBlock, createVNode, unref, mergeProps, isRef, withCtx, withKeys, withDirectives, createElementVNode, vModelText } from "vue";
import { V as VaColorIndicator } from "../va-color-indicator/index.js";
import { V as VaInput } from "../va-input/index.js";
import { t as throttle } from "../../../vendor.js";
import { e as extractComponentProps } from "../../utils/component-options/extract-component-options.js";
import { u as useStatefulProps, a as useStatefulEmits, b as useStateful } from "../../composables/useStateful.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { a as useTranslationProp, u as useTranslation } from "../../composables/useTranslation.js";
import { f as filterComponentProps } from "../../utils/component-options/filter-props.js";
const _hoisted_1 = { class: "va-color-input" };
const VaInputProps = extractComponentProps(VaInput);
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaColorInput"
  },
  __name: "VaColorInput",
  props: {
    ...VaInputProps,
    ...useStatefulProps,
    ...useComponentPresetProp,
    modelValue: { type: String, default: null },
    disabled: { type: Boolean, default: false },
    indicator: {
      type: String,
      default: "dot",
      validator: (value) => ["dot", "square"].includes(value)
    },
    ariaOpenColorPickerLabel: useTranslationProp("$t:openColorPicker")
  },
  emits: [...useStatefulEmits],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const colorPicker = shallowRef();
    const { valueComputed } = useStateful(props, emit);
    const callPickerDialog = () => {
      var _a;
      return !props.disabled && ((_a = colorPicker.value) == null ? void 0 : _a.click());
    };
    const tabIndexComputed = computed(() => props.disabled ? -1 : 0);
    const inputValue = computed({
      get: () => props.modelValue,
      set: throttle((value) => emit("update:modelValue", value), 500)
    });
    const vaInputProps = filterComponentProps(VaInputProps);
    const { tp } = useTranslation();
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1, [
        createVNode(unref(VaInput), mergeProps(unref(vaInputProps), {
          modelValue: unref(valueComputed),
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => isRef(valueComputed) ? valueComputed.value = $event : null),
          class: "va-color-input__input",
          tabindex: tabIndexComputed.value
        }), {
          appendInner: withCtx(() => [
            createVNode(unref(VaColorIndicator), {
              class: "va-color-input__dot",
              role: "button",
              "aria-label": unref(tp)(_ctx.$props.ariaOpenColorPickerLabel),
              "aria-disabled": _ctx.$props.disabled,
              tabindex: tabIndexComputed.value,
              color: unref(valueComputed),
              indicator: _ctx.$props.indicator,
              size: "16px",
              onClick: callPickerDialog,
              onKeydown: [
                withKeys(callPickerDialog, ["space"]),
                withKeys(callPickerDialog, ["enter"])
              ]
            }, null, 8, ["aria-label", "aria-disabled", "tabindex", "color", "indicator"])
          ]),
          _: 1
        }, 16, ["modelValue", "tabindex"]),
        withDirectives(createElementVNode("input", {
          ref_key: "colorPicker",
          ref: colorPicker,
          type: "color",
          class: "va-color-input__hidden-input",
          "aria-hidden": "true",
          tabindex: "-1",
          "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => inputValue.value = $event)
        }, null, 512), [
          [vModelText, inputValue.value]
        ])
      ]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaColorInput.vue_vue_type_script_setup_true_lang.js.map
