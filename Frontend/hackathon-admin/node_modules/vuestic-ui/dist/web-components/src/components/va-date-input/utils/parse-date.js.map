{"version":3,"file":"parse-date.js","sources":["../../../../../../src/components/va-date-input/utils/parse-date.ts"],"sourcesContent":["export const isISO8601 = (date: string) => {\n  const isoDate = Date.parse(date)\n\n  return !isNaN(isoDate) && !date.includes(' ')\n}\n\nexport const isRFC1123GTM = (date: string) => {\n  return date.endsWith('GMT')\n}\n\nexport const isRFC1123 = (date: string) => {\n  const rfcDate = new Date(date)\n\n  return !isNaN(rfcDate.getTime())\n}\n\nexport const formatDateToTheSameStandardFormat = (date: Date, formattedString: string) => {\n  if (isRFC1123GTM(formattedString)) {\n    return date.toUTCString()\n  }\n\n  if (isISO8601(formattedString)) {\n    return date.toISOString()\n  }\n\n  if (isRFC1123(formattedString)) {\n    return date.toString()\n  }\n\n  return null\n}\n\n/** Handle ISO8601 and RFC1123 standard JS dates */\nexport const parseDate = (date: string) => {\n  // Parse ISO 86801 dates\n  const isoDate = Date.parse(date)\n\n  if (!isNaN(isoDate)) {\n    return new Date(isoDate)\n  }\n\n  // Parse legacy RFC1123 dates\n  const rfcDate = new Date(date)\n\n  if (!isNaN(rfcDate.getTime())) {\n    return rfcDate\n  }\n\n  return null\n}\n"],"names":[],"mappings":"AAAa,MAAA,YAAY,CAAC,SAAiB;AACnC,QAAA,UAAU,KAAK,MAAM,IAAI;AAE/B,SAAO,CAAC,MAAM,OAAO,KAAK,CAAC,KAAK,SAAS,GAAG;AAC9C;AAEa,MAAA,eAAe,CAAC,SAAiB;AACrC,SAAA,KAAK,SAAS,KAAK;AAC5B;AAEa,MAAA,YAAY,CAAC,SAAiB;AACnC,QAAA,UAAU,IAAI,KAAK,IAAI;AAE7B,SAAO,CAAC,MAAM,QAAQ,QAAS,CAAA;AACjC;AAEa,MAAA,oCAAoC,CAAC,MAAY,oBAA4B;AACpF,MAAA,aAAa,eAAe,GAAG;AACjC,WAAO,KAAK;EACd;AAEI,MAAA,UAAU,eAAe,GAAG;AAC9B,WAAO,KAAK;EACd;AAEI,MAAA,UAAU,eAAe,GAAG;AAC9B,WAAO,KAAK;EACd;AAEO,SAAA;AACT;"}