import { defineComponent, useCssVars, unref, computed, watchEffect, useSlots, openBlock, createElementBlock, Fragment, renderList, createVNode, withCtx, renderSlot, createElementVNode } from "vue";
import { u as useGridTemplateArea } from "./hooks/useGridTemplateArea.js";
import { u as useLayoutProps, a as useLayout } from "./hooks/useLayout.js";
import { V as VaLayoutArea } from "./components/VaLayoutArea.js";
import { u as useDocument } from "../../composables/useDocument.js";
const _hoisted_1 = { class: "va-layout" };
const _hoisted_2 = { class: "va-layout__area va-layout__area--content" };
const areaNames = [
  "top",
  "left",
  "right",
  "bottom"
];
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaLayout"
  },
  __name: "VaLayout",
  props: {
    ...useLayoutProps,
    allowBodyScrollOnOverlay: { type: Boolean, default: false }
  },
  emits: [
    "top-overlay-click",
    "left-overlay-click",
    "right-overlay-click",
    "bottom-overlay-click"
  ],
  setup(__props, { emit: __emit }) {
    useCssVars((_ctx) => ({
      "26bb68e3": horizontalTemplate.value,
      "6c829775": verticalTemplate.value,
      "21ec940c": unref(templateArea),
      "54ed9602": unref(paddings).top + "px",
      "5729798a": unref(paddings).bottom + "px",
      "7da6afc2": unref(paddings).left + "px",
      "6d0e4ed0": unref(paddings).right + "px"
    }));
    const props = __props;
    const { paddings } = useLayout(props);
    const doDisableScroll = computed(() => {
      return !props.allowBodyScrollOnOverlay && areaNames.some((area) => {
        var _a;
        return (_a = props[area]) == null ? void 0 : _a.overlay;
      });
    });
    const document = useDocument();
    watchEffect(() => {
      var _a;
      const overflowParent = (_a = document.value) == null ? void 0 : _a.body;
      if (!overflowParent) {
        return;
      }
      if (doDisableScroll.value) {
        overflowParent.style.overflow = "hidden";
      } else {
        overflowParent.style.overflow = "";
      }
    });
    const templateArea = useGridTemplateArea(props);
    const slots = useSlots();
    const verticalTemplate = computed(() => {
      return [
        slots.top ? "min-content" : "0fr",
        "1fr",
        slots.bottom ? "min-content" : "0fr"
      ].filter(Boolean).join(" ");
    });
    const horizontalTemplate = computed(() => {
      return [
        slots.left ? "min-content" : "0fr",
        "1fr",
        slots.right ? "min-content" : "0fr"
      ].filter(Boolean).join(" ");
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1, [
        (openBlock(), createElementBlock(Fragment, null, renderList(areaNames, (area) => {
          return createVNode(VaLayoutArea, {
            key: area,
            area,
            config: _ctx.$props[area] || {},
            onOverlayClick: ($event) => _ctx.$emit(`${area}-overlay-click`)
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, area)
            ]),
            _: 2
          }, 1032, ["area", "config", "onOverlayClick"]);
        }), 64)),
        createElementVNode("div", _hoisted_2, [
          renderSlot(_ctx.$slots, "default", {}, () => [
            renderSlot(_ctx.$slots, "content")
          ])
        ])
      ]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaLayout.vue_vue_type_script_setup_true_lang.js.map
