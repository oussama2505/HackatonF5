import { defineComponent, computed, toRef, openBlock, createElementBlock, createVNode, unref, withCtx, renderSlot, normalizeProps, guardReactiveProps } from "vue";
import { V as VaMessageList } from "./VaMessageList.js";
import { b as useValidationProps } from "../../composables/useValidation.js";
const _hoisted_1 = { class: "va-message-list-wrapper" };
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaMessageListWrapper"
  },
  __name: "VaMessageListWrapper",
  props: {
    ...useValidationProps
  },
  setup(__props) {
    const props = __props;
    const messagesColor = computed(() => {
      if (props.error) {
        return "danger";
      }
      if (props.success) {
        return "success";
      }
      return "";
    });
    const hasError = toRef(props, "error");
    const messagesComputed = computed(() => props.error ? props.errorMessages : props.messages);
    const errorLimit = computed(() => props.error ? Number(props.errorCount) : 99);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1, [
        createVNode(unref(VaMessageList), {
          color: messagesColor.value,
          limit: errorLimit.value,
          "has-error": hasError.value,
          "model-value": messagesComputed.value,
          "inherit-slots": ["message"]
        }, {
          default: withCtx((bind) => [
            renderSlot(_ctx.$slots, "default", normalizeProps(guardReactiveProps(bind)))
          ]),
          _: 3
        }, 8, ["color", "limit", "has-error", "model-value"])
      ]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaMessageListWrapper.vue_vue_type_script_setup_true_lang.js.map
