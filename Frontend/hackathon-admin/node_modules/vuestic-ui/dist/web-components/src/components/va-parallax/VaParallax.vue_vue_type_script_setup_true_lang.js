import { defineComponent, shallowRef, ref, computed, onMounted, onBeforeUnmount, openBlock, createElementBlock, normalizeStyle, createElementVNode, renderSlot } from "vue";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { u as useScrollParent } from "../../composables/useScrollParent.js";
import { w as warn } from "../../utils/console.js";
import { u as useNumericProp } from "../../composables/useNumericProp.js";
const _hoisted_1 = { class: "va-parallax__image-container" };
const _hoisted_2 = ["src", "alt"];
const _hoisted_3 = { class: "va-parallax__item-container" };
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaParallax"
  },
  __name: "VaParallax",
  props: {
    ...useComponentPresetProp,
    target: { type: [Object, String] },
    src: { type: String, default: "", required: true },
    alt: { type: String, default: "parallax" },
    height: { type: [Number, String], default: 400 },
    reversed: { type: Boolean, default: false },
    speed: {
      type: [Number, String],
      default: 0.5,
      validator: (value) => {
        const num = Number(value);
        return num >= 0 && num <= 1;
      }
    }
  },
  setup(__props) {
    const props = __props;
    const rootElement = shallowRef();
    const img = shallowRef();
    const elOffsetTop = ref(0);
    const parallax = ref(0);
    const parallaxDist = ref(0);
    const percentScrolled = ref(0);
    const scrollTop = ref(0);
    const windowHeight = ref(0);
    const windowBottom = ref(0);
    const isLoaded = ref(false);
    const computedWrapperStyles = computed(() => ({ height: heightComputed.value + "px" }));
    const computedImgStyles = computed(() => ({
      display: "block",
      transform: `translate(-50%, ${parallax.value}px)`,
      opacity: isLoaded.value ? 1 : 0,
      top: props.reversed ? 0 : "auto"
    }));
    const { getScrollableParent } = useScrollParent();
    const targetElement = computed(() => {
      var _a;
      if (!props.target) {
        return getScrollableParent((_a = rootElement.value) == null ? void 0 : _a.parentElement);
      }
      if (props.target instanceof HTMLElement) {
        return props.target;
      }
      const element = document.querySelector(props.target);
      if (element) {
        return element;
      }
      warn("VaParallax target prop got wrong selector. Target is null");
      return null;
    });
    const imgHeight = computed(() => {
      var _a;
      return ((_a = img.value) == null ? void 0 : _a.naturalHeight) || 0;
    });
    const heightComputed = useNumericProp("height");
    const speedComputed = useNumericProp("speed");
    const calcDimensions = () => {
      var _a, _b;
      const offset = ((_a = rootElement.value) == null ? void 0 : _a.getBoundingClientRect()) || { top: 0 };
      scrollTop.value = ((_b = targetElement.value) == null ? void 0 : _b.scrollTop) || 0;
      parallaxDist.value = imgHeight.value - heightComputed.value;
      elOffsetTop.value = offset.top + scrollTop.value;
      windowHeight.value = window.innerHeight;
      windowBottom.value = scrollTop.value + windowHeight.value;
    };
    const translate = () => {
      calcDimensions();
      percentScrolled.value = (windowBottom.value - elOffsetTop.value) / (heightComputed.value + windowHeight.value);
      parallax.value = Math.round(parallaxDist.value * percentScrolled.value) * speedComputed.value;
      if (props.reversed) {
        parallax.value = -parallax.value;
      }
    };
    const addEventListeners = () => {
      var _a, _b;
      (_a = targetElement.value) == null ? void 0 : _a.addEventListener("scroll", translate);
      (_b = targetElement.value) == null ? void 0 : _b.addEventListener("resize", translate);
    };
    const removeEventListeners = () => {
      var _a, _b;
      (_a = targetElement.value) == null ? void 0 : _a.removeEventListener("scroll", translate);
      (_b = targetElement.value) == null ? void 0 : _b.removeEventListener("resize", translate);
    };
    const initImage = () => {
      var _a, _b;
      if ((_a = img.value) == null ? void 0 : _a.complete) {
        translate();
        addEventListeners();
      } else {
        (_b = img.value) == null ? void 0 : _b.addEventListener("load", () => {
          translate();
          addEventListeners();
        }, false);
      }
      isLoaded.value = true;
    };
    onMounted(initImage);
    onBeforeUnmount(removeEventListeners);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref_key: "rootElement",
        ref: rootElement,
        class: "va-parallax",
        style: normalizeStyle(computedWrapperStyles.value)
      }, [
        createElementVNode("div", _hoisted_1, [
          createElementVNode("img", {
            ref_key: "img",
            ref: img,
            class: "va-parallax__image",
            src: _ctx.$props.src,
            alt: _ctx.$props.alt,
            style: normalizeStyle(computedImgStyles.value)
          }, null, 12, _hoisted_2)
        ]),
        createElementVNode("div", _hoisted_3, [
          renderSlot(_ctx.$slots, "default")
        ])
      ], 4);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaParallax.vue_vue_type_script_setup_true_lang.js.map
