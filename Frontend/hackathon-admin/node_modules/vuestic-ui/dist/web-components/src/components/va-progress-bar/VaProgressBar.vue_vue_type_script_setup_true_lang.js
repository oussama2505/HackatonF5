import { defineComponent, computed, openBlock, createElementBlock, mergeProps, renderSlot, normalizeProps, guardReactiveProps, Fragment, createTextVNode, toDisplayString, createCommentVNode, createElementVNode, normalizeStyle } from "vue";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { b as clamp } from "../../../vendor.js";
import { a as useTranslationProp, u as useTranslation } from "../../composables/useTranslation.js";
import { u as useColors } from "../../composables/useColors.js";
import { u as useTextColor } from "../../composables/useTextColor.js";
const _hoisted_1 = {
  key: 0,
  class: "va-progress-bar__info"
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaProgressBar"
  },
  __name: "VaProgressBar",
  props: {
    ...useComponentPresetProp,
    modelValue: { type: [Number, String], default: 0 },
    indeterminate: { type: Boolean, default: false },
    color: { type: String, default: "primary" },
    size: {
      type: [Number, String],
      default: "medium"
    },
    buffer: { type: [Number, String], default: 100 },
    rounded: { type: Boolean, default: true },
    reverse: { type: Boolean, default: false },
    contentInside: { type: Boolean, default: false },
    showPercent: { type: Boolean, default: false },
    max: { type: [Number, String], default: 100 },
    ariaLabel: useTranslationProp("$t:progressState")
  },
  setup(__props) {
    const props = __props;
    const { getColor, getHoverColor } = useColors();
    const colorComputed = computed(() => getColor(props.color));
    const { textColorComputed } = useTextColor(colorComputed);
    const isTextSize = computed(() => typeof props.size === "string" && ["small", "medium", "large"].includes(props.size));
    const getCSSHeight = () => {
      if (typeof props.size === "number") {
        return `${props.size}px`;
      }
      if (isTextSize.value) {
        return;
      }
      return props.size;
    };
    const { tp } = useTranslation();
    const progressBarValue = computed(() => 100 / Number(props.max) * Number(props.modelValue));
    const rootClass = computed(() => ({
      "va-progress-bar--square": !props.rounded,
      [`va-progress-bar--${props.size}`]: isTextSize.value
    }));
    const rooStyle = computed(() => ({
      "--va-progress-bar-color": colorComputed.value,
      "--va-progress-bar-background-color": getHoverColor(colorComputed.value)
    }));
    const wrapperStyle = computed(() => ({
      height: getCSSHeight()
    }));
    const bufferStyle = computed(() => ({
      width: `${props.indeterminate ? 100 : clamp(Number(props.buffer), 0, 100)}%`,
      color: textColorComputed.value,
      [props.reverse ? "right" : "left"]: 0
    }));
    const progressStyle = computed(() => ({
      marginLeft: props.reverse ? "auto" : void 0,
      width: `${clamp(progressBarValue.value, 0, 100)}%`
    }));
    const intermediateStyle = computed(() => ({
      animationDirection: props.reverse ? "reverse" : "normal"
    }));
    const ariaAttributesComputed = computed(() => ({
      role: "progressbar",
      "aria-label": tp(props.ariaLabel),
      "aria-valuenow": !props.indeterminate ? props.modelValue : void 0
    }));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", mergeProps({
        class: ["va-progress-bar", rootClass.value],
        style: rooStyle.value
      }, ariaAttributesComputed.value), [
        !_ctx.$props.contentInside ? (openBlock(), createElementBlock("div", _hoisted_1, [
          renderSlot(_ctx.$slots, "default", normalizeProps(guardReactiveProps({ value: _ctx.$props.modelValue })), () => [
            _ctx.$props.showPercent ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              createTextVNode(toDisplayString(_ctx.$props.modelValue) + "% ", 1)
            ], 64)) : createCommentVNode("", true)
          ])
        ])) : createCommentVNode("", true),
        createElementVNode("div", {
          class: "va-progress-bar__wrapper",
          style: normalizeStyle(wrapperStyle.value)
        }, [
          createElementVNode("div", {
            class: "va-progress-bar__buffer",
            style: normalizeStyle(bufferStyle.value)
          }, [
            _ctx.$props.contentInside ? renderSlot(_ctx.$slots, "default", normalizeProps(mergeProps({ key: 0 }, { value: _ctx.$props.modelValue })), () => [
              _ctx.$props.showPercent ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                createTextVNode(toDisplayString(_ctx.$props.modelValue) + "% ", 1)
              ], 64)) : createCommentVNode("", true)
            ]) : createCommentVNode("", true)
          ], 4),
          __props.indeterminate ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
            createElementVNode("div", {
              class: "va-progress-bar__progress--indeterminate-start",
              style: normalizeStyle(intermediateStyle.value)
            }, null, 4),
            createElementVNode("div", {
              class: "va-progress-bar__progress--indeterminate-end",
              style: normalizeStyle(intermediateStyle.value)
            }, null, 4)
          ], 64)) : (openBlock(), createElementBlock("div", {
            key: 1,
            class: "va-progress-bar__progress",
            style: normalizeStyle(progressStyle.value)
          }, null, 4))
        ], 4)
      ], 16);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaProgressBar.vue_vue_type_script_setup_true_lang.js.map
