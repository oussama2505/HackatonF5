import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, withKeys, Fragment, renderList, createBlock, mergeProps, withCtx, renderSlot, normalizeProps, guardReactiveProps, createCommentVNode, normalizeStyle, toDisplayString } from "vue";
import { u as useRatingProps, a as useRating } from "./hooks/useRating.js";
import { u as useVaRatingColorsProps, a as useVaRatingColors } from "./hooks/useVaRatingColors.js";
import { R as RatingValue } from "./types.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { _ as _VaRatingItem } from "./components/VaRatingItem/VaRatingItem.js";
import { _ as _sfc_main$1 } from "./components/VaRatingItemNumberButton.vue_vue_type_script_setup_true_lang.js";
import { u as useFormFieldProps, a as useFormField } from "../../composables/useFormField.js";
import { e as extractComponentProps } from "../../utils/component-options/extract-component-options.js";
import { a as useTranslationProp, u as useTranslation } from "../../composables/useTranslation.js";
import { f as filterComponentProps } from "../../utils/component-options/filter-props.js";
const _hoisted_1 = ["aria-label"];
const VaRatingItemPropsDeclarations = extractComponentProps(_VaRatingItem, ["modelValue", "itemNumber"]);
const VaRatingItemNumberButtonPropsDeclarations = extractComponentProps(_sfc_main$1, ["modelValue", "itemNumber"]);
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaRating"
  },
  __name: "VaRating",
  props: {
    ...VaRatingItemNumberButtonPropsDeclarations,
    ...useRatingProps,
    ...useVaRatingColorsProps,
    ...useFormFieldProps,
    ...VaRatingItemPropsDeclarations,
    ...useComponentPresetProp,
    modelValue: { type: Number, default: 0 },
    numbers: { type: Boolean, default: false },
    halves: { type: Boolean, default: false },
    max: { type: [Number, String], default: 5 },
    texts: { type: Array, default: () => [] },
    ariaLabel: useTranslationProp("$t:currentRating"),
    ariaItemLabel: useTranslationProp("$t:voteRating")
  },
  emits: ["update:modelValue"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const { computedClasses: rootClass } = useFormField("va-rating", props);
    const {
      visibleValue,
      modelValue: vModel,
      hoveredValue,
      isHovered,
      onMouseEnter,
      onMouseLeave,
      onItemValueUpdate,
      onItemHoveredValueUpdate,
      getItemValue
    } = useRating(props);
    const isInteractionsEnabled = computed(() => !props.disabled && !props.readonly);
    const onArrowKeyPress = (direction) => {
      const max = Number(props.max);
      const step = props.halves ? RatingValue.HALF : RatingValue.FULL;
      const nextStep = visibleValue.value + step * direction;
      const min = props.clearable ? 0 : step;
      if (nextStep >= min && nextStep <= max) {
        onItemValueUpdate(visibleValue.value, step * direction);
      } else if (nextStep < min) {
        onItemValueUpdate(min, 0);
      } else {
        onItemValueUpdate(max, direction === -1 ? step * direction : 0);
      }
    };
    const { tp, t } = useTranslation();
    const {
      computedColor,
      backgroundComputed,
      textColorComputed
    } = useVaRatingColors(props);
    const tabIndexComputed = computed(() => isInteractionsEnabled.value ? 0 : void 0);
    const VaRatingItemProps = filterComponentProps(VaRatingItemPropsDeclarations);
    const VaRatingItemNumberButtonProps = filterComponentProps(VaRatingItemNumberButtonPropsDeclarations);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(["va-rating", unref(rootClass)]),
        "aria-label": unref(tp)(_ctx.$props.ariaLabel, { max: _ctx.$props.max, value: _ctx.$props.modelValue })
      }, [
        createElementVNode("div", {
          class: "va-rating__item-wrapper",
          onKeyup: [
            _cache[0] || (_cache[0] = withKeys(($event) => onArrowKeyPress(-1), ["left"])),
            _cache[1] || (_cache[1] = withKeys(($event) => onArrowKeyPress(1), ["right"]))
          ],
          onMouseenter: _cache[2] || (_cache[2] = //@ts-ignore
          (...args) => unref(onMouseEnter) && unref(onMouseEnter)(...args)),
          onMouseleave: _cache[3] || (_cache[3] = //@ts-ignore
          (...args) => unref(onMouseLeave) && unref(onMouseLeave)(...args))
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(Number(_ctx.$props.max), (itemNumber) => {
            return openBlock(), createBlock(_VaRatingItem, mergeProps({
              key: itemNumber,
              class: "va-rating__item"
            }, unref(VaRatingItemProps), {
              "aria-label": unref(tp)(_ctx.$props.ariaItemLabel, { max: _ctx.$props.max, value: itemNumber }),
              "model-value": unref(getItemValue)(itemNumber - 1),
              tabindex: tabIndexComputed.value,
              disabled: _ctx.$props.disabled,
              readonly: _ctx.$props.readonly,
              onHover: ($event) => isInteractionsEnabled.value && unref(onItemHoveredValueUpdate)(itemNumber - 1, $event),
              "onUpdate:modelValue": ($event) => isInteractionsEnabled.value && unref(onItemValueUpdate)(itemNumber - 1, $event)
            }), {
              default: withCtx(({ value, onClick }) => [
                renderSlot(_ctx.$slots, "item", normalizeProps(guardReactiveProps({ value, onClick, index: itemNumber })), () => [
                  _ctx.$props.numbers ? (openBlock(), createBlock(_sfc_main$1, mergeProps({ key: 0 }, unref(VaRatingItemNumberButtonProps), {
                    "model-value": value,
                    "item-number": itemNumber
                  }), null, 16, ["model-value", "item-number"])) : createCommentVNode("", true)
                ])
              ]),
              _: 2
            }, 1040, ["aria-label", "model-value", "tabindex", "disabled", "readonly", "onHover", "onUpdate:modelValue"]);
          }), 128))
        ], 32),
        _ctx.$props.texts && _ctx.$props.texts.length === _ctx.$props.max ? (openBlock(), createElementBlock("span", {
          key: 0,
          class: "va-rating__text-wrapper",
          style: normalizeStyle({ color: unref(computedColor) })
        }, toDisplayString(_ctx.$props.texts[Math.round(unref(visibleValue)) - 1]), 5)) : createCommentVNode("", true)
      ], 10, _hoisted_1);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaRating.vue_vue_type_script_setup_true_lang.js.map
