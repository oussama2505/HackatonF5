import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, unref, normalizeStyle, renderSlot, createBlock, createCommentVNode, createTextVNode, toDisplayString, withDirectives, createVNode, vShow } from "vue";
import { V as VaIcon } from "../../../va-icon/index.js";
import { i as isObject } from "../../../../utils/is-object.js";
import { a as useColorProps, u as useColors } from "../../../../composables/useColors.js";
import { u as useNumericProp } from "../../../../composables/useNumericProp.js";
import { u as useBem } from "../../../../composables/useBem.js";
const _hoisted_1 = ["aria-selected"];
const _hoisted_2 = {
  key: 1,
  class: "va-select-option__highlighted"
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaSelectOption"
  },
  __name: "VaSelectOption",
  props: {
    ...useColorProps,
    disabled: { type: Boolean, default: false },
    option: { type: [Number, String, Boolean, Object], default: () => ({}) },
    getText: { type: Function, required: true },
    getTrackBy: { type: Function, required: true },
    currentOption: { type: [String, Number, Boolean, Object], default: null },
    getSelectedState: { type: Function, required: true },
    search: { type: String, default: "" },
    highlightMatchedText: { type: Boolean, default: true },
    inputFocused: { type: Boolean, default: false },
    minSearchChars: { type: [Number, String], default: 0 }
  },
  setup(__props, { expose: __expose }) {
    const props = __props;
    const { getColor, getHoverColor } = useColors();
    const minSearchCharsComputed = useNumericProp("minSearchChars");
    const optionIcon = computed(() => isObject(props.option) ? props.option.icon : void 0);
    const optionIconColor = computed(() => getColor(props.color));
    const optionText = computed(() => props.getText(props.option));
    const optionTextSplitted = computed(() => {
      const defaultSplit = { start: optionText.value, searchedSubString: "", end: "" };
      if (!optionText.value || !props.search || !props.highlightMatchedText || props.search.length < minSearchCharsComputed.value) {
        return defaultSplit;
      }
      const substringStartIndex = optionText.value.toLowerCase().indexOf(props.search.toLowerCase());
      if (substringStartIndex < 0) {
        return defaultSplit;
      }
      const start = optionText.value.slice(0, substringStartIndex);
      const searchedSubString = optionText.value.slice(substringStartIndex, substringStartIndex + props.search.length);
      const end = optionText.value.slice(substringStartIndex + props.search.length);
      return { start, searchedSubString, end };
    });
    const isSelected = computed(() => props.getSelectedState(props.option));
    const isFocused = computed(() => {
      if (typeof props.option === "string") {
        return props.option === props.currentOption;
      }
      return props.getTrackBy(props.currentOption) === props.getTrackBy(props.option);
    });
    const optionClass = useBem("va-select-option", () => ({
      selected: isSelected.value
    }));
    const optionStyle = computed(() => ({
      color: isSelected.value ? getColor(props.color) : "inherit",
      backgroundColor: isFocused.value ? getHoverColor(getColor(props.color)) : "transparent",
      cursor: props.disabled ? "default" : void 0,
      opacity: props.disabled ? "var(--va-select-option-list-option-disabled-opacity)" : void 0
    }));
    __expose({
      isFocused,
      isSelected
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        role: "option",
        class: normalizeClass(["va-select-option", unref(optionClass)]),
        style: normalizeStyle(optionStyle.value),
        "aria-selected": isSelected.value
      }, [
        renderSlot(_ctx.$slots, "option-content", {}, () => [
          optionIcon.value ? (openBlock(), createBlock(unref(VaIcon), {
            key: 0,
            size: "small",
            class: "va-select-option__icon",
            name: optionIcon.value
          }, null, 8, ["name"])) : createCommentVNode("", true),
          createTextVNode(" " + toDisplayString(optionTextSplitted.value.start) + " ", 1),
          optionTextSplitted.value.searchedSubString ? (openBlock(), createElementBlock("span", _hoisted_2, toDisplayString(optionTextSplitted.value.searchedSubString), 1)) : createCommentVNode("", true),
          createTextVNode(" " + toDisplayString(optionTextSplitted.value.end), 1)
        ]),
        withDirectives(createVNode(unref(VaIcon), {
          class: "va-select-option__selected-icon",
          size: "small",
          name: "va-check",
          color: optionIconColor.value
        }, null, 8, ["color"]), [
          [vShow, isSelected.value]
        ])
      ], 14, _hoisted_1);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaSelectOption.vue_vue_type_script_setup_true_lang.js.map
