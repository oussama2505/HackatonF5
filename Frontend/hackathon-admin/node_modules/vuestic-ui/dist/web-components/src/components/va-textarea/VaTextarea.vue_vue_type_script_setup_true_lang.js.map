{"version":3,"file":"VaTextarea.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../src/components/va-textarea/VaTextarea.vue"],"sourcesContent":["<template>\n  <VaInputWrapper\n    class=\"va-textarea\"\n    v-bind=\"vaInputWrapperProps\"\n    :error=\"computedError\"\n    :error-messages=\"computedErrorMessages\"\n  >\n    <div\n      class=\"va-textarea__resize-wrapper\"\n      :class=\"{\n        'va-textarea__resize-wrapper--resizable': isResizable,\n      }\"\n    >\n      <textarea\n        v-model=\"valueComputed\"\n        v-bind=\"{ ...computedProps, ...listeners, ...computedInputAttributes, ...validationListeners }\"\n        class=\"va-textarea__textarea\"\n        ref=\"textarea\"\n        :rows=\"rows\"\n        :style=\"computedStyle\"\n        :loading=\"isLoading\"\n        :ariaLabel=\"$props.label\"\n        :class=\"{\n          'va-textarea__textarea--autosize': autosize,\n        }\"\n      />\n    </div>\n  </VaInputWrapper>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  CSSProperties,\n  shallowRef,\n  ref,\n  watchEffect,\n  useAttrs,\n} from 'vue'\n\nimport omit from 'lodash/omit.js'\nimport pick from 'lodash/pick.js'\nimport { VaInputWrapper } from '../va-input-wrapper'\n\nimport {\n  useFormFieldProps,\n  useEmitProxy,\n  useStateful,\n  useStatefulProps,\n  useValidation,\n  useValidationProps,\n  useValidationEmits,\n} from '../../composables'\nimport {\n  extractComponentProps,\n  filterComponentProps,\n} from '../../utils/component-options'\nimport { blurElement, focusElement } from '../../utils/focus'\nimport { useTextHeight } from './composables/useLineHeight'\n\nconst positiveNumberValidator = (val: number) => {\n  if (val > 0) {\n    return true\n  }\n  throw new Error(\n    `\\`minRows|maxRows\\` must be a positive integer greater than 0, but ${val} is provided`,\n  )\n}\n\nconst { createEmits, createListeners } = useEmitProxy([\n  'input',\n  'change',\n  'click',\n  'update:modelValue',\n])\n\nconst VaInputWrapperProps = extractComponentProps(VaInputWrapper)\n</script>\n\n<script lang=\"ts\" setup>\ndefineOptions({\n  name: 'VaTextarea',\n})\n\nconst props = defineProps({\n  ...useFormFieldProps,\n  ...VaInputWrapperProps,\n  ...useStatefulProps,\n  ...useValidationProps,\n  modelValue: { type: [String, Number], default: '' },\n  placeholder: { type: String },\n  autosize: { type: Boolean, default: false },\n  minRows: {\n    type: [Number, String],\n    default: 1,\n    validator: positiveNumberValidator,\n  },\n  maxRows: {\n    type: [Number, String],\n    validator: positiveNumberValidator,\n  },\n  resize: {\n    type: Boolean,\n    default: true,\n  },\n  clearValue: {\n    type: [String],\n    default: '',\n  },\n})\n\nconst emit = defineEmits([...createEmits(), ...useValidationEmits])\n\nconst attrs = useAttrs()\n\nconst textarea = shallowRef<HTMLTextAreaElement>()\nconst { valueComputed } = useStateful(props, emit, 'modelValue', {\n  defaultValue: '',\n})\n\nconst focus = () => {\n  focusElement(textarea.value)\n}\n\nconst blur = () => {\n  blurElement(textarea.value)\n}\n\nconst reset = () =>\n  withoutValidation(() => {\n    emit('update:modelValue', props.clearValue)\n    emit('clear')\n    resetValidation()\n  })\n\nconst {\n  isDirty,\n  isTouched,\n  computedError,\n  computedErrorMessages,\n  listeners: validationListeners,\n  validationAriaAttributes,\n  isLoading,\n  resetValidation,\n  withoutValidation,\n} = useValidation(props, emit, {\n  value: valueComputed,\n  focus,\n  reset,\n})\n\nconst isResizable = computed(() => {\n  return props.resize && !props.autosize\n})\n\nconst rows = ref(props.minRows)\n\nconst textHeight = useTextHeight(textarea, valueComputed)\n\nfunction calculateInputHeight () {\n  let minRows = parseFloat(String(props.minRows))\n  let maxRows = parseFloat(String(props.maxRows))\n\n  minRows = isNaN(minRows) ? 1 : minRows\n  maxRows = isNaN(maxRows) ? Infinity : maxRows\n\n  if (!props.autosize) {\n    rows.value = Math.max(maxRows, Math.min(minRows, maxRows ?? 0))\n    return\n  }\n\n  if (!textHeight.value || !textarea.value) {\n    return\n  }\n\n  const style = getComputedStyle(textarea.value)\n\n  const height = textHeight.value\n  const lineHeight = parseFloat(style.lineHeight)\n  const minHeight = Math.max(\n    minRows * lineHeight,\n    minRows + Math.round(lineHeight),\n  )\n\n  const maxHeight = maxRows * lineHeight || Infinity\n  const newHeight = Math.max(minHeight, Math.min(maxHeight, height ?? 0))\n\n  rows.value = Math.round(newHeight / lineHeight)\n\n  // Make height 1px bigger to prevent jumps\n  textarea.value.style.height = `${newHeight + 1}px`\n}\n\nwatchEffect(() => {\n  calculateInputHeight()\n})\n\nconst computedStyle = computed(\n  () =>\n    ({\n      resize: isResizable.value ? undefined : 'none',\n    } as CSSProperties),\n)\n\nconst computedProps = computed(() => ({\n  ...pick(props, ['disabled', 'readonly', 'placeholder', 'ariaLabel', 'name']),\n}))\n\nconst computedInputAttributes = computed(() => ({\n  ...validationAriaAttributes.value,\n  ...omit(attrs, ['class', 'style']),\n}))\n\nconst vaInputWrapperProps = filterComponentProps(VaInputWrapperProps)\nconst listeners = createListeners(emit)\n\ndefineExpose({\n  isDirty,\n  isTouched,\n  isLoading,\n  computedError,\n  computedErrorMessages,\n  reset,\n  focus,\n  blur,\n  value: valueComputed,\n  withoutValidation,\n  resetValidation,\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources/index.scss\";\n\n.va-textarea {\n  .va-input-wrapper__field {\n    padding-top: 12px;\n    padding-bottom: 12px;\n    align-items: flex-start;\n  }\n\n  &__resize-wrapper {\n    display: flex;\n    overflow: hidden;\n    width: 100%;\n    align-self: stretch;\n\n    &--resizable {\n      resize: vertical;\n    }\n  }\n\n  &__textarea {\n    border: 0;\n    flex: 1;\n    font-family: var(--va-font-family);\n    width: 100%;\n    background: transparent;\n    color: currentColor;\n    box-sizing: content-box;\n    min-height: 1.15rem;\n    outline: none;\n    position: relative;\n    resize: none;\n\n    @include va-scroll(var(--va-secondary));\n\n    &--autosize {\n      overflow: hidden;\n    }\n  }\n}\n</style>\n"],"names":[],"mappings":"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"}