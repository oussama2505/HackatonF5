import { defineComponent, shallowRef, computed, ref, onMounted, openBlock, createBlock, Transition, withCtx, withDirectives, createElementVNode, normalizeClass, normalizeStyle, unref, createElementBlock, toDisplayString, createCommentVNode, vShow, createVNode, withModifiers, withKeys } from "vue";
import { _ as _VaIcon } from "../va-icon/VaIcon.js";
import { u as useTimer } from "../../composables/useTimer.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { a as useTranslationProp, u as useTranslation } from "../../composables/useTranslation.js";
import { u as useColors } from "../../composables/useColors.js";
import { u as useTextColor } from "../../composables/useTextColor.js";
import { u as useNumericProp } from "../../composables/useNumericProp.js";
const _hoisted_1 = ["role", "aria-live"];
const _hoisted_2 = { class: "va-toast__group" };
const _hoisted_3 = ["textContent"];
const _hoisted_4 = { class: "va-toast__content" };
const _hoisted_5 = ["innerHTML"];
const _hoisted_6 = ["textContent"];
const _hoisted_7 = {
  key: 1,
  class: "va-toast__content"
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaToast"
  },
  __name: "VaToast",
  props: {
    ...useComponentPresetProp,
    title: { type: String, default: "" },
    offsetY: { type: [Number, String], default: 16 },
    offsetX: { type: [Number, String], default: 16 },
    message: { type: [String, Function], default: "" },
    dangerouslyUseHtmlString: { type: Boolean, default: false },
    icon: { type: String, default: "close" },
    customClass: { type: String, default: "" },
    duration: { type: [Number, String], default: 5e3 },
    color: { type: String, default: "" },
    closeable: { type: Boolean, default: true },
    onClose: { type: Function },
    onClick: { type: Function },
    multiLine: { type: Boolean, default: false },
    position: {
      type: String,
      default: "top-right",
      validator: (value) => ["top-right", "top-left", "bottom-right", "bottom-left"].includes(value)
    },
    render: { type: Function },
    ariaCloseLabel: useTranslationProp("$t:close"),
    role: { type: String, default: void 0 },
    inline: { type: Boolean, default: false }
  },
  emits: ["on-click", "on-close"],
  setup(__props, { emit: __emit }) {
    const VaToastRenderer = defineComponent({
      name: "VaToastRenderer",
      props: {
        render: { type: Function, required: true }
      },
      setup: (props2) => () => props2.render()
    });
    const { tp } = useTranslation();
    const props = __props;
    const emit = __emit;
    const rootElement = shallowRef();
    const { getColor } = useColors();
    const { textColorComputed } = useTextColor(computed(() => getColor(props.color)));
    const offsetYComputed = useNumericProp("offsetY");
    const offsetXComputed = useNumericProp("offsetX");
    const durationComputed = useNumericProp("duration");
    const visible = ref(false);
    const positionX = computed(() => {
      return props.position.includes("right") ? "right" : "left";
    });
    const positionY = computed(() => {
      return props.position.includes("top") ? "top" : "bottom";
    });
    const toastClasses = computed(() => [
      props.customClass,
      props.multiLine ? "va-toast--multiline" : "",
      props.inline ? "va-toast--inline" : ""
    ]);
    const toastStyles = computed(() => ({
      [positionY.value]: `${offsetYComputed.value}px`,
      [positionX.value]: `${offsetXComputed.value}px`,
      backgroundColor: getColor(props.color),
      color: textColorComputed.value
    }));
    const computedAriaLive = computed(() => {
      if (props.role === "status") {
        return "polite";
      } else {
        return "assertive";
      }
    });
    const computedMessage = computed(() => typeof props.message === "function" ? props.message() : props.message);
    const destroyElement = () => {
      var _a, _b;
      (_a = rootElement.value) == null ? void 0 : _a.removeEventListener("transitionend", destroyElement);
      (_b = rootElement.value) == null ? void 0 : _b.remove();
    };
    const onToastClick = () => {
      if (typeof props.onClick === "function") {
        props.onClick();
      } else {
        emit("on-click");
      }
    };
    const onToastClose = () => {
      var _a;
      visible.value = false;
      (_a = rootElement.value) == null ? void 0 : _a.addEventListener("transitionend", destroyElement);
      if (typeof props.onClose === "function") {
        props.onClose();
      } else {
        emit("on-close");
      }
    };
    const timer = useTimer();
    const clearTimer = timer.clear;
    const startTimer = () => {
      if (durationComputed.value > 0) {
        timer.start(() => visible.value && onToastClose(), durationComputed.value);
      }
    };
    onMounted(() => {
      visible.value = true;
      startTimer();
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(Transition, { name: "va-toast-fade" }, {
        default: withCtx(() => [
          withDirectives(createElementVNode("div", {
            ref_key: "rootElement",
            ref: rootElement,
            role: _ctx.$props.role ?? _ctx.$props.closeable ? "alertdialog" : "alert",
            "aria-live": computedAriaLive.value,
            "aria-atomic": "true",
            class: normalizeClass(["va-toast", toastClasses.value]),
            style: normalizeStyle(toastStyles.value),
            onMouseenter: _cache[0] || (_cache[0] = //@ts-ignore
            (...args) => unref(clearTimer) && unref(clearTimer)(...args)),
            onMouseleave: startTimer,
            onClick: onToastClick
          }, [
            createElementVNode("div", _hoisted_2, [
              _ctx.$props.title ? (openBlock(), createElementBlock("h2", {
                key: 0,
                class: "va-toast__title",
                textContent: toDisplayString(_ctx.$props.title)
              }, null, 8, _hoisted_3)) : createCommentVNode("", true),
              withDirectives(createElementVNode("div", _hoisted_4, [
                _ctx.$props.dangerouslyUseHtmlString ? (openBlock(), createElementBlock("div", {
                  key: 0,
                  innerHTML: computedMessage.value
                }, null, 8, _hoisted_5)) : (openBlock(), createElementBlock("p", {
                  key: 1,
                  textContent: toDisplayString(computedMessage.value)
                }, null, 8, _hoisted_6))
              ], 512), [
                [vShow, _ctx.$props.message]
              ]),
              _ctx.$props.render ? (openBlock(), createElementBlock("div", _hoisted_7, [
                createVNode(unref(VaToastRenderer), {
                  render: _ctx.$props.render
                }, null, 8, ["render"])
              ])) : createCommentVNode("", true),
              _ctx.$props.closeable ? (openBlock(), createBlock(_VaIcon, {
                key: 2,
                class: "va-toast__close-icon",
                role: "button",
                "aria-label": unref(tp)(_ctx.$props.ariaCloseLabel),
                tabindex: "0",
                size: "1rem",
                name: _ctx.$props.icon,
                onClick: withModifiers(onToastClose, ["stop"]),
                onKeydown: withKeys(withModifiers(onToastClose, ["stop"]), ["enter"])
              }, null, 8, ["aria-label", "name", "onKeydown"])) : createCommentVNode("", true)
            ])
          ], 46, _hoisted_1), [
            [vShow, visible.value]
          ])
        ]),
        _: 1
      });
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaToast.vue_vue_type_script_setup_true_lang.js.map
