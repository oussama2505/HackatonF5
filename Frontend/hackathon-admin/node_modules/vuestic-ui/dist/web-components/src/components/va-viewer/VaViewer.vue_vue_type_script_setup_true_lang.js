import { defineComponent, ref, computed, useSlots, openBlock, createElementBlock, Fragment, createElementVNode, mergeProps, renderSlot, normalizeProps, guardReactiveProps, createCommentVNode, createBlock, Teleport, createVNode, unref } from "vue";
import { V as VaIcon } from "../va-icon/index.js";
import { u as useIsMounted } from "../../composables/useIsMounted.js";
import { u as useClickOutside } from "../../composables/useClickOutside.js";
import { u as useDocument } from "../../composables/useDocument.js";
const _hoisted_1 = { class: "va-viewer-content" };
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaViewer",
    inheritAttrs: false
  },
  __name: "VaViewer",
  setup(__props, { expose: __expose }) {
    const content = ref();
    const controls = ref();
    const isMounted = useIsMounted();
    const isClosed = ref(true);
    const isOpened = computed(() => isMounted.value && !isClosed.value);
    const openViewer = () => isClosed.value = false;
    const closeViewer = () => isClosed.value = true;
    const slots = useSlots();
    const handleAnchorClick = () => {
      if (!slots.anchor) {
        openViewer();
      }
    };
    useClickOutside([content, controls], closeViewer);
    const document = useDocument();
    const teleportTarget = computed(() => {
      var _a;
      return (_a = document.value) == null ? void 0 : _a.body;
    });
    __expose({
      openViewer,
      closeViewer
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(Fragment, null, [
        createElementVNode("div", mergeProps({ class: "va-viewer" }, _ctx.$attrs, { onClick: handleAnchorClick }), [
          renderSlot(_ctx.$slots, "anchor", normalizeProps(guardReactiveProps({ openViewer }))),
          !_ctx.$slots.anchor ? renderSlot(_ctx.$slots, "default", { key: 0 }) : createCommentVNode("", true)
        ], 16),
        isOpened.value ? (openBlock(), createBlock(Teleport, {
          key: 0,
          to: teleportTarget.value
        }, [
          createElementVNode("div", _hoisted_1, [
            createElementVNode("div", {
              ref_key: "content",
              ref: content,
              class: "va-viewer-content__main-area"
            }, [
              !_ctx.$slots.image ? renderSlot(_ctx.$slots, "default", { key: 0 }) : createCommentVNode("", true),
              renderSlot(_ctx.$slots, "image")
            ], 512),
            createElementVNode("div", {
              ref_key: "controls",
              ref: controls,
              class: "va-viewer-content__controls-panel"
            }, [
              renderSlot(_ctx.$slots, "controls"),
              renderSlot(_ctx.$slots, "close", normalizeProps(guardReactiveProps({ close: closeViewer })), () => [
                createElementVNode("button", {
                  class: "va-viewer-content__close-button",
                  onClick: closeViewer
                }, [
                  createVNode(unref(VaIcon), {
                    name: "close",
                    color: "backgroundPrimary"
                  })
                ])
              ])
            ], 512)
          ])
        ], 8, ["to"])) : createCommentVNode("", true)
      ], 64);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaViewer.vue_vue_type_script_setup_true_lang.js.map
