{"version":3,"file":"useResizeObserver.js","sources":["../../../../src/composables/useResizeObserver.ts"],"sourcesContent":["import { onBeforeUnmount, onMounted, ref, Ref, unref, watch } from 'vue'\n\ntype MaybeRef<T> = T | Ref<T>\ntype MaybeArray<T> = T | T[]\n\nexport const useResizeObserver = <T extends HTMLElement | undefined>(elementsList: MaybeRef<T>[] | Ref<T>, cb: ResizeObserverCallback) => {\n  let resizeObserver: ResizeObserver | undefined\n\n  const observeAll = (elementsList: MaybeRef<T>[]) => {\n    elementsList.forEach((element: MaybeRef<T>) => {\n      const unrefedElement = unref(element)\n\n      unrefedElement && resizeObserver?.observe(unrefedElement)\n    })\n  }\n\n  watch(elementsList, (newValue) => {\n    resizeObserver?.disconnect()\n    observeAll(Array.isArray(newValue) ? newValue : [newValue])\n  })\n\n  onMounted(() => {\n    resizeObserver = new ResizeObserver(cb)\n    observeAll(Array.isArray(elementsList) ? elementsList : [elementsList])\n  })\n\n  onBeforeUnmount(() => resizeObserver?.disconnect())\n\n  return resizeObserver\n}\n"],"names":["elementsList"],"mappings":";AAKa,MAAA,oBAAoB,CAAoC,cAAsC,OAA+B;AACpI,MAAA;AAEE,QAAA,aAAa,CAACA,kBAAgC;AAClDA,kBAAa,QAAQ,CAAC,YAAyB;AACvC,YAAA,iBAAiB,MAAM,OAAO;AAElB,yBAAA,iDAAgB,QAAQ;AAAA,IAAc,CACzD;AAAA,EAAA;AAGG,QAAA,cAAc,CAAC,aAAa;AAChC,qDAAgB;AAChB,eAAW,MAAM,QAAQ,QAAQ,IAAI,WAAW,CAAC,QAAQ,CAAC;AAAA,EAAA,CAC3D;AAED,YAAU,MAAM;AACG,qBAAA,IAAI,eAAe,EAAE;AACtC,eAAW,MAAM,QAAQ,YAAY,IAAI,eAAe,CAAC,YAAY,CAAC;AAAA,EAAA,CACvE;AAEe,kBAAA,MAAM,iDAAgB,YAAY;AAE3C,SAAA;AACT;"}